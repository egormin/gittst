{"version":3,"sources":["webpack:///integrations.81a5b362e2adcd49d8a5.bundle.js","webpack:///./integrations/index.js","webpack:///./integrations/integration_settings_form.js"],"names":["webpackJsonp","./integrations/index.js","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","$","__WEBPACK_IMPORTED_MODULE_0__integration_settings_form__","init","call","./integrations/integration_settings_form.js","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","IntegrationSettingsForm","formSelector","this","$form","canTestService","data","testEndPoint","$serviceToggle","find","$submitBtn","$submitBtnLoader","$submitBtnLabel","_this","toggleServiceState","is","on","e","handleServiceToggle","handleSettingsSave","get","checkValidity","preventDefault","testSettings","serialize","currentTarget","serviceActive","toggleSubmitBtnLabel","removeAttr","attr","btnLabel","text","saveTestActive","disable","removeClass","enable","addClass","formData","_this2","toggleSubmitBtnState","ajax","type","url","done","res","error","Flash","message","title","clickHandler","submit","fail","always"],"mappings":"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","file":"integrations.81a5b362e2adcd49d8a5.bundle.js","sourcesContent":["webpackJsonp([\"integrations\"],{\n\n/***/ \"./integrations/index.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__integration_settings_form__ = __webpack_require__(\"./integrations/integration_settings_form.js\");\n/* eslint-disable no-new */\n\n\n$(function () {\n  var integrationSettingsForm = new __WEBPACK_IMPORTED_MODULE_0__integration_settings_form__[\"a\" /* default */]('.js-integration-settings-form');\n  integrationSettingsForm.init();\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./integrations/integration_settings_form.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global Flash */\n\nvar IntegrationSettingsForm = function () {\n  function IntegrationSettingsForm(formSelector) {\n    _classCallCheck(this, IntegrationSettingsForm);\n\n    this.$form = $(formSelector);\n\n    // Form Metadata\n    this.canTestService = this.$form.data('can-test');\n    this.testEndPoint = this.$form.data('test-url');\n\n    // Form Child Elements\n    this.$serviceToggle = this.$form.find('#service_active');\n    this.$submitBtn = this.$form.find('button[type=\"submit\"]');\n    this.$submitBtnLoader = this.$submitBtn.find('.js-btn-spinner');\n    this.$submitBtnLabel = this.$submitBtn.find('.js-btn-label');\n  }\n\n  _createClass(IntegrationSettingsForm, [{\n    key: 'init',\n    value: function init() {\n      var _this = this;\n\n      // Initialize View\n      this.toggleServiceState(this.$serviceToggle.is(':checked'));\n\n      // Bind Event Listeners\n      this.$serviceToggle.on('change', function (e) {\n        return _this.handleServiceToggle(e);\n      });\n      this.$submitBtn.on('click', function (e) {\n        return _this.handleSettingsSave(e);\n      });\n    }\n  }, {\n    key: 'handleSettingsSave',\n    value: function handleSettingsSave(e) {\n      // Check if Service is marked active, as if not marked active,\n      // We can skip testing it and directly go ahead to allow form to\n      // be submitted\n      if (!this.$serviceToggle.is(':checked')) {\n        return;\n      }\n\n      // Service was marked active so now we check;\n      // 1) If form contents are valid\n      // 2) If this service can be tested\n      // If both conditions are true, we override form submission\n      // and test the service using provided configuration.\n      if (this.$form.get(0).checkValidity() && this.canTestService) {\n        e.preventDefault();\n        this.testSettings(this.$form.serialize());\n      }\n    }\n  }, {\n    key: 'handleServiceToggle',\n    value: function handleServiceToggle(e) {\n      this.toggleServiceState($(e.currentTarget).is(':checked'));\n    }\n\n    /**\n     * Change Form's validation enforcement based on service status (active/inactive)\n     */\n\n  }, {\n    key: 'toggleServiceState',\n    value: function toggleServiceState(serviceActive) {\n      this.toggleSubmitBtnLabel(serviceActive);\n      if (serviceActive) {\n        this.$form.removeAttr('novalidate');\n      } else if (!this.$form.attr('novalidate')) {\n        this.$form.attr('novalidate', 'novalidate');\n      }\n    }\n\n    /**\n     * Toggle Submit button label based on Integration status and ability to test service\n     */\n\n  }, {\n    key: 'toggleSubmitBtnLabel',\n    value: function toggleSubmitBtnLabel(serviceActive) {\n      var btnLabel = 'Save changes';\n\n      if (serviceActive && this.canTestService) {\n        btnLabel = 'Test settings and save changes';\n      }\n\n      this.$submitBtnLabel.text(btnLabel);\n    }\n\n    /**\n     * Toggle Submit button state based on provided boolean value of `saveTestActive`\n     * When enabled, it does two things, and reverts back when disabled\n     *\n     * 1. It shows load spinner on submit button\n     * 2. Makes submit button disabled\n     */\n\n  }, {\n    key: 'toggleSubmitBtnState',\n    value: function toggleSubmitBtnState(saveTestActive) {\n      if (saveTestActive) {\n        this.$submitBtn.disable();\n        this.$submitBtnLoader.removeClass('hidden');\n      } else {\n        this.$submitBtn.enable();\n        this.$submitBtnLoader.addClass('hidden');\n      }\n    }\n\n    /* eslint-disable promise/catch-or-return, no-new */\n    /**\n     * Test Integration config\n     */\n\n  }, {\n    key: 'testSettings',\n    value: function testSettings(formData) {\n      var _this2 = this;\n\n      this.toggleSubmitBtnState(true);\n      $.ajax({\n        type: 'PUT',\n        url: this.testEndPoint,\n        data: formData\n      }).done(function (res) {\n        if (res.error) {\n          new Flash(res.message, null, null, {\n            title: 'Save anyway',\n            clickHandler: function clickHandler(e) {\n              e.preventDefault();\n              _this2.$form.submit();\n            }\n          });\n        } else {\n          _this2.$form.submit();\n        }\n      }).fail(function () {\n        new Flash('Something went wrong on our end.');\n      }).always(function () {\n        _this2.toggleSubmitBtnState(false);\n      });\n    }\n  }]);\n\n  return IntegrationSettingsForm;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (IntegrationSettingsForm);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ })\n\n},[\"./integrations/index.js\"]);\n\n\n// WEBPACK FOOTER //\n// integrations.81a5b362e2adcd49d8a5.bundle.js","/* eslint-disable no-new */\nimport IntegrationSettingsForm from './integration_settings_form';\n\n$(() => {\n  const integrationSettingsForm = new IntegrationSettingsForm('.js-integration-settings-form');\n  integrationSettingsForm.init();\n});\n\n\n\n// WEBPACK FOOTER //\n// ./integrations/index.js","/* global Flash */\n\nexport default class IntegrationSettingsForm {\n  constructor(formSelector) {\n    this.$form = $(formSelector);\n\n    // Form Metadata\n    this.canTestService = this.$form.data('can-test');\n    this.testEndPoint = this.$form.data('test-url');\n\n    // Form Child Elements\n    this.$serviceToggle = this.$form.find('#service_active');\n    this.$submitBtn = this.$form.find('button[type=\"submit\"]');\n    this.$submitBtnLoader = this.$submitBtn.find('.js-btn-spinner');\n    this.$submitBtnLabel = this.$submitBtn.find('.js-btn-label');\n  }\n\n  init() {\n    // Initialize View\n    this.toggleServiceState(this.$serviceToggle.is(':checked'));\n\n    // Bind Event Listeners\n    this.$serviceToggle.on('change', e => this.handleServiceToggle(e));\n    this.$submitBtn.on('click', e => this.handleSettingsSave(e));\n  }\n\n  handleSettingsSave(e) {\n    // Check if Service is marked active, as if not marked active,\n    // We can skip testing it and directly go ahead to allow form to\n    // be submitted\n    if (!this.$serviceToggle.is(':checked')) {\n      return;\n    }\n\n    // Service was marked active so now we check;\n    // 1) If form contents are valid\n    // 2) If this service can be tested\n    // If both conditions are true, we override form submission\n    // and test the service using provided configuration.\n    if (this.$form.get(0).checkValidity() && this.canTestService) {\n      e.preventDefault();\n      this.testSettings(this.$form.serialize());\n    }\n  }\n\n  handleServiceToggle(e) {\n    this.toggleServiceState($(e.currentTarget).is(':checked'));\n  }\n\n  /**\n   * Change Form's validation enforcement based on service status (active/inactive)\n   */\n  toggleServiceState(serviceActive) {\n    this.toggleSubmitBtnLabel(serviceActive);\n    if (serviceActive) {\n      this.$form.removeAttr('novalidate');\n    } else if (!this.$form.attr('novalidate')) {\n      this.$form.attr('novalidate', 'novalidate');\n    }\n  }\n\n  /**\n   * Toggle Submit button label based on Integration status and ability to test service\n   */\n  toggleSubmitBtnLabel(serviceActive) {\n    let btnLabel = 'Save changes';\n\n    if (serviceActive && this.canTestService) {\n      btnLabel = 'Test settings and save changes';\n    }\n\n    this.$submitBtnLabel.text(btnLabel);\n  }\n\n  /**\n   * Toggle Submit button state based on provided boolean value of `saveTestActive`\n   * When enabled, it does two things, and reverts back when disabled\n   *\n   * 1. It shows load spinner on submit button\n   * 2. Makes submit button disabled\n   */\n  toggleSubmitBtnState(saveTestActive) {\n    if (saveTestActive) {\n      this.$submitBtn.disable();\n      this.$submitBtnLoader.removeClass('hidden');\n    } else {\n      this.$submitBtn.enable();\n      this.$submitBtnLoader.addClass('hidden');\n    }\n  }\n\n  /* eslint-disable promise/catch-or-return, no-new */\n  /**\n   * Test Integration config\n   */\n  testSettings(formData) {\n    this.toggleSubmitBtnState(true);\n    $.ajax({\n      type: 'PUT',\n      url: this.testEndPoint,\n      data: formData,\n    })\n    .done((res) => {\n      if (res.error) {\n        new Flash(res.message, null, null, {\n          title: 'Save anyway',\n          clickHandler: (e) => {\n            e.preventDefault();\n            this.$form.submit();\n          },\n        });\n      } else {\n        this.$form.submit();\n      }\n    })\n    .fail(() => {\n      new Flash('Something went wrong on our end.');\n    })\n    .always(() => {\n      this.toggleSubmitBtnState(false);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./integrations/integration_settings_form.js"],"sourceRoot":""}