{"version":3,"sources":["webpack:///merge_conflicts.c7f2ef9cce11ab77b621.bundle.js","webpack:///./merge_conflicts/components/diff_file_editor.js","webpack:///./merge_conflicts/components/inline_conflict_lines.js","webpack:///./merge_conflicts/components/parallel_conflict_lines.js","webpack:///./merge_conflicts/merge_conflict_service.js","webpack:///./merge_conflicts/merge_conflict_store.js","webpack:///./merge_conflicts/merge_conflicts_bundle.js","webpack:///./merge_conflicts/mixins/line_conflict_actions.js","webpack:///./merge_conflicts/mixins/line_conflict_utils.js"],"names":["webpackJsonp","./merge_conflicts/components/diff_file_editor.js","module","__webpack_exports__","__webpack_require__","$","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","__WEBPACK_IMPORTED_MODULE_0_vue__","global","mergeConflicts","diffFileEditor","extend","props","file","onCancelDiscardConfirmation","Function","onAcceptDiscardConfirmation","data","saved","loading","fileLoaded","originalContent","computed","classObject","this","is-loading","watch","val","resetEditorContent","loadEditor","mounted","methods","_this","get","content_path","done","content","$el","querySelector","fileContent","document","createTextNode","textContent","editor","ace","edit","$blockScrolling","Infinity","getSession","setMode","blob_ace_mode","on","saveDiffResolution","fail","Flash","always","getValue","resolveEditChanged","promptDiscardConfirmation","setValue","cancelDiscardConfirmation","acceptDiscardConfirmation","window","gl","call","./merge_conflicts/components/inline_conflict_lines.js","inlineConflictLines","mixins","utils","actions","./merge_conflicts/components/parallel_conflict_lines.js","parallelConflictLines","template","./merge_conflicts/merge_conflict_service.js","exports","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","i","length","descriptor","protoProps","staticProps","prototype","mergeConflictsService","options","conflictsPath","resolveConflictsPath","ajax","dataType","url","JSON","stringify","contentType","method","./merge_conflicts/merge_conflict_store.js","__WEBPACK_IMPORTED_MODULE_1_js_cookie__","__WEBPACK_IMPORTED_MODULE_1_js_cookie___default","n","diffViewType","a","VIEW_TYPES","INLINE","PARALLEL","CONFLICT_TYPES","TEXT","TEXT_EDITOR","mergeConflictsStore","state","isLoading","hasError","isSubmitting","isParallel","conflictsData","setConflictsData","decorateFiles","files","commitMessage","commit_message","sourceBranch","source_branch","targetBranch","target_branch","shortCommitSha","commit_sha","slice","forEach","resolutionData","resolveMode","filePath","getFilePath","iconClass","blob_icon","blobPath","blob_path","type","showEditor","setInlineLine","setParallelLine","_this2","inlineLines","sections","section","currentLineType","conflict","lines","id","push","getHeadHeaderLine","line","lineType","richText","decorateLineForInlineView","getOriginHeaderLine","_this3","parallelLines","linesObj","left","right","getLineForParallelView","checkLineLengths","len","setLoadingState","setErrorState","setFailedRequest","message","errorMessage","getConflictsCount","count","getConflictsCountText","setViewType","viewType","diffView","set","buttonTitle","isHeader","isHead","isSelected","isUnselected","hasConflict","isOrigin","hasMatch","rich_text","old_line","new_line","lineNumber","old_path","new_path","diff","setPromptConfirmationState","setFileResolveMode","mode","restoreFileLinesState","isLeftMatch","isRightMatch","isReadyToCommit","hasCommitMessage","trim","unresolved","l","numberConflicts","resolvedConflicts","keys","j","k","getCommitButtonText","initial","getCommitData","commitData","addFile","handleSelected","sectionId","selection","_this4","markLine","hasSameId","setSubmitState","fileTextTypePresent","some","f","./merge_conflicts/merge_conflicts_bundle.js","__WEBPACK_IMPORTED_MODULE_2__merge_conflict_service__","__WEBPACK_IMPORTED_MODULE_3__mixins_line_conflict_utils__","__WEBPACK_IMPORTED_MODULE_4__mixins_line_conflict_actions__","conflictsEl","dataset","MergeConflictsResolverApp","el","components","diff-file-editor","inline-conflict-lines","parallel-conflict-lines","conflictsCountText","readyToCommit","commitButtonText","showDiffViewTypeSwitcher","created","fetchConflictsData","error","$nextTick","syntaxHighlight","handleViewTypeChange","onClickResolveModeButton","commit","submitResolveConflicts","location","href","redirect_to","./merge_conflicts/mixins/line_conflict_actions.js","./merge_conflicts/mixins/line_conflict_utils.js","lineCssClass","head","origin","match","selected","unselected"],"mappings":"AAAAA,cAAc,oBAERC,mDACA,SAAUC,EAAQC,EAAqBC,GAE7C,cAC4B,SAASC,GACrC,QAASC,GAAgBC,EAAKC,EAAKC,GAAiK,MAApJD,KAAOD,GAAOG,OAAOC,eAAeJ,EAAKC,GAAOC,MAAOA,EAAOG,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBP,EAAIC,GAAOC,EAAgBF,EAD7I,GAAIQ,GAAoCX,EAAoB,8CCA1H,SAAEY,GACAA,EAAOC,eAAiBD,EAAOC,mBAE/BD,EAAOC,eAAeC,eAAiBH,EAAA,QAAII,QACzCC,OACEC,KAAMX,OACNY,4BAA6BC,SAC7BC,4BAA6BD,UAE/BE,KANgD,WAO9C,OACEC,OAAO,EACPC,SAAS,EACTC,YAAY,EACZC,gBAAiB,KAGrBC,UACEC,YADQ,WAEN,OACEL,MAASM,KAAKN,MACdO,aAAcD,KAAKL,WAIzBO,WACG,kBADH,SACsBC,GAClBH,KAAKI,sBAEAD,GAAOH,KAAKJ,YAAcI,KAAKL,SAIpCK,KAAKK,eAGTC,QAjCgD,WAkC1CN,KAAKX,KAAKgB,YACZL,KAAKK,cAGTE,SACEF,WADO,WACM,GAAAG,GAAAR,IACXA,MAAKL,SAAU,EAEftB,EAAEoC,IAAIT,KAAKX,KAAKqB,cACbC,KAAK,SAACtB,GACL,GAAMuB,GAAUJ,EAAKK,IAAIC,cAAc,OACjCC,EAAcC,SAASC,eAAe5B,EAAKuB,QAEjDA,GAAQM,YAAcH,EAAYG,YAElCV,EAAKX,gBAAkBR,EAAKuB,QAC5BJ,EAAKZ,YAAa,EAClBY,EAAKW,OAASC,IAAIC,KAAKT,GACvBJ,EAAKW,OAAOG,gBAAkBC,IAC9Bf,EAAKW,OAAOK,aAAaC,QAAzB,YAA6CpC,EAAKqC,eAClDlB,EAAKW,OAAOQ,GAAG,SAAU,WACvBnB,EAAKoB,uBAEPpB,EAAKoB,uBAENC,KAAK,WACJ,GAAIC,OAAM,gDAEXC,OAAO,WACNvB,EAAKb,SAAU,KAGrBiC,mBA5BO,WA6BL5B,KAAKN,OAAQ,EAGbM,KAAKX,KAAKuB,QAAUZ,KAAKmB,OAAOa,WAChChC,KAAKX,KAAK4C,mBAAqBjC,KAAKX,KAAKuB,UAAYZ,KAAKH,gBAC1DG,KAAKX,KAAK6C,2BAA4B,GAExC9B,mBApCO,WAqCDJ,KAAKJ,YACPI,KAAKmB,OAAOgB,SAASnC,KAAKH,iBAAkB,IAGhDuC,0BAzCO,SAyCmB/C,GACxBW,KAAKV,4BAA4BD,IAEnCgD,0BA5CO,SA4CmBhD,GACxBW,KAAKR,4BAA4BH,QAItCiD,OAAOC,KAAOD,OAAOC,UDSKC,KAAKrE,EAAqBC,EAAoB,iDAIrEqE,wDACA,SAAUvE,EAAQC,EAAqBC,GAE7C,YEhHA,IAAAW,GAAAX,EAAA,8CAIA,SAAEY,GACAA,EAAOC,eAAiBD,EAAOC,mBAE/BD,EAAOC,eAAeyD,oBAAsB3D,EAAA,QAAII,QAC9CC,OACEC,KAAMX,QAERiE,QAAS3D,EAAOC,eAAe2D,MAAO5D,EAAOC,eAAe4D,YAE7DP,OAAOC,KAAOD,OAAOC,SFsHlBO,0DACA,SAAU5E,EAAQC,EAAqBC,GAE7C,YGtIA,IAAAW,GAAAX,EAAA,8CAIA,SAAEY,GACAA,EAAOC,eAAiBD,EAAOC,mBAE/BD,EAAOC,eAAe8D,sBAAwBhE,EAAA,QAAII,QAChDC,OACEC,KAAMX,QAERiE,QAAS3D,EAAOC,eAAe2D,MAAO5D,EAAOC,eAAe4D,SAC5DG,i1BAgBDV,OAAOC,KAAOD,OAAOC,SH8HlBU,8CACA,SAAU/E,EAAQgF,EAAS9E,IAEL,SAASC,GAErC,QAAS8E,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFvE,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQrE,GAAS,IAAK,GAAIsE,GAAI,EAAGA,EAAItE,EAAMuE,OAAQD,IAAK,CAAE,GAAIE,GAAaxE,EAAMsE,EAAIE,GAAWhF,WAAagF,EAAWhF,aAAc,EAAOgF,EAAW/E,cAAe,EAAU,SAAW+E,KAAYA,EAAW9E,UAAW,GAAMJ,OAAOC,eAAe8E,EAAQG,EAAWpF,IAAKoF,IAAiB,MAAO,UAAUP,EAAaQ,EAAYC,GAAiJ,MAA9HD,IAAYL,EAAiBH,EAAYU,UAAWF,GAAiBC,GAAaN,EAAiBH,EAAaS,GAAqBT,OI3JzkB,SAAErE,GACAA,EAAOC,eAAiBD,EAAOC,kBADpB,IAGL+E,GAHK,WAIT,QAAAA,GAAYC,GAASd,EAAAnD,KAAAgE,GACnBhE,KAAKkE,cAAgBD,EAAQC,cAC7BlE,KAAKmE,qBAAuBF,EAAQE,qBAN7B,MAAAZ,GAAAS,IAAAxF,IAAA,qBAAAC,MAAA,WAUP,MAAOJ,GAAE+F,MACPC,SAAU,OACVC,IAAKtE,KAAKkE,mBAZL1F,IAAA,yBAAAC,MAAA,SAgBcgB,GACrB,MAAOpB,GAAE+F,MACPE,IAAKtE,KAAKmE,qBACV1E,KAAM8E,KAAKC,UAAU/E,GACrBgF,YAAa,mBACbJ,SAAU,OACVK,OAAQ,aAtBHV,IA2BXhF,GAAOC,eAAe+E,sBAAwBA,GAC7C1B,OAAOC,KAAOD,OAAOC,UJ0KKC,KAAKU,EAAS9E,EAAoB,iDAIzDuG,4CACA,SAAUzG,EAAQC,EAAqBC,GAE7C,cAC4B,SAASC,GAAyB,GAAIU,GAAoCX,EAAoB,6CKhN1HwG,EAAAxG,EAAA,oDAAAyG,EAAAzG,EAAA0G,EAAAF,IAKA,SAAE5F,GACAA,EAAOC,eAAiBD,EAAOC,kBAE/B,IAAM8F,GAAeF,EAAAG,EAAQvE,IAAI,aAQ3BwE,GACJC,OAAQ,SACRC,SAAU,YAENC,GACJC,KAAM,OACNC,YAAa,cAGftG,GAAOC,eAAesG,qBACpBC,OACEC,WAAW,EACXC,UAAU,EACVC,cAAc,EACdC,WAAYb,IAAiBE,EAAWE,SACxCJ,aAAcA,EACdc,kBAGFC,iBAV0C,SAUzBrG,GACfO,KAAK+F,cAActG,EAAKuG,OAExBhG,KAAKwF,MAAMK,eACTG,MAAOvG,EAAKuG,MACZC,cAAexG,EAAKyG,eACpBC,aAAc1G,EAAK2G,cACnBC,aAAc5G,EAAK6G,cACnBC,eAAgB9G,EAAK+G,WAAWC,MAAM,EAAG,KAI7CV,cAtB0C,SAsB5BC,GAAO,GAAAxF,GAAAR,IACnBgG,GAAMU,QAAQ,SAACrH,GACbA,EAAKuB,QAAU,GACfvB,EAAKsH,kBACLtH,EAAK6C,2BAA4B,EACjC7C,EAAKuH,YAvCsB,cAwC3BvH,EAAKwH,SAAWrG,EAAKsG,YAAYzH,GACjCA,EAAK0H,UAAL,MAAuB1H,EAAK2H,UAC5B3H,EAAK4H,SAAW5H,EAAK6H,UAEjB7H,EAAK8H,OAAS/B,EAAeC,MAC/BhG,EAAK+H,YAAa,EAClB/H,EAAKgB,YAAa,EAElBG,EAAK6G,cAAchI,GACnBmB,EAAK8G,gBAAgBjI,IACZA,EAAK8H,OAAS/B,EAAeE,cACtCjG,EAAK+H,YAAa,EAClB/H,EAAKgB,YAAa,MAKxBgH,cA7C0C,SA6C5BhI,GAAM,GAAAkI,GAAAvH,IAClBX,GAAKmI,eAELnI,EAAKoI,SAASf,QAAQ,SAACgB,GACrB,GAAIC,GAAkB,MACdC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,MAAOC,EAAOJ,EAAPI,EAErBF,IACFvI,EAAKmI,YAAYO,KAAKR,EAAKS,kBAAkBF,IAG/CD,EAAMnB,QAAQ,SAACuB,GAAS,GACdd,GAASc,EAATd,IAEM,SAATA,GAA2B,QAATA,GAAmBQ,IAAoBR,IAC5DQ,EAAkBR,EAClB9H,EAAKmI,YAAYO,MAAOG,SAAU,YAAaC,SAAU,MAG3DZ,EAAKa,0BAA0BH,EAAMH,EAAIF,GACzCvI,EAAKmI,YAAYO,KAAKE,KAGpBL,GACFvI,EAAKmI,YAAYO,KAAKR,EAAKc,oBAAoBP,OAKrDR,gBA1E0C,SA0E1BjI,GAAM,GAAAiJ,GAAAtI,IACpBX,GAAKkJ,gBACL,IAAMC,IAAaC,QAAUC,SAE7BrJ,GAAKoI,SAASf,QAAQ,SAACgB,GAAY,GACzBE,GAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,MAAOC,EAAOJ,EAAPI,EAErBF,KACFY,EAASC,KAAKV,KAAKO,EAAKD,oBAAoBP,IAC5CU,EAASE,MAAMX,KAAKO,EAAKN,kBAAkBF,KAG7CD,EAAMnB,QAAQ,SAACuB,GAAS,GACdd,GAASc,EAATd,IAER,IAAIS,EACW,QAATT,EACFqB,EAASC,KAAKV,KAAKO,EAAKK,uBAAuBV,EAAMH,EAAI,aACvC,QAATX,GACTqB,EAASE,MAAMX,KAAKO,EAAKK,uBAAuBV,EAAMH,EAAI,YAAY,QAEnE,CACL,GAAMI,GAAWf,GAAQ,SAEzBqB,GAASC,KAAKV,KAAKO,EAAKK,uBAAuBV,EAAMH,EAAII,IACzDM,EAASE,MAAMX,KAAKO,EAAKK,uBAAuBV,EAAMH,EAAII,GAAU,OAIxEI,EAAKM,iBAAiBJ,IAGxB,KAAK,GAAI9E,GAAI,EAAGmF,EAAML,EAASC,KAAK9E,OAAQD,EAAImF,EAAKnF,GAAK,EACxDrE,EAAKkJ,cAAcR,MACjBS,EAASE,MAAMhF,GACf8E,EAASC,KAAK/E,MAKpBoF,gBAlH0C,SAkH1BtD,GACdxF,KAAKwF,MAAMC,UAAYD,GAGzBuD,cAtH0C,SAsH5BvD,GACZxF,KAAKwF,MAAME,SAAWF,GAGxBwD,iBA1H0C,SA0HzBC,GACfjJ,KAAKwF,MAAME,UAAW,EACtB1F,KAAKwF,MAAMK,cAAcqD,aAAeD,GAG1CE,kBA/H0C,WAgIxC,IAAKnJ,KAAKwF,MAAMK,cAAcG,MAAMrC,OAClC,MAAO,EAGT,IAAMqC,GAAQhG,KAAKwF,MAAMK,cAAcG,MACnCoD,EAAQ,CAcZ,OAZApD,GAAMU,QAAQ,SAACrH,GACTA,EAAK8H,OAAS/B,EAAeC,KAC/BhG,EAAKoI,SAASf,QAAQ,SAACgB,GACjBA,EAAQE,WACVwB,GAAS,KAIbA,GAAS,IAINA,GAGTC,sBAtJ0C,WAuJxC,GAAMD,GAAQpJ,KAAKmJ,mBAGnB,OAAUC,GAAV,KAFaA,EAAQ,YAAc,aAKrCE,YA7J0C,SA6J9BC,GACVvJ,KAAKwF,MAAMgE,SAAWD,EACtBvJ,KAAKwF,MAAMI,WAAa2D,IAAatE,EAAWE,SAEhDN,EAAAG,EAAQyE,IAAI,YAAaF,IAG3BvB,kBApK0C,SAoKxBF,GAChB,OACEA,GAAIA,EACJK,SAvLmB,oBAwLnBuB,YAtLoB,WAuLpBvC,KAAM,MACNO,QAAS,OACTiC,UAAU,EACVC,QAAQ,EACRC,YAAY,EACZC,cAAc,IAIlB1B,0BAlL0C,SAkLhBH,EAAMH,EAAIF,GAAU,GACpCT,GAASc,EAATd,IACRc,GAAKH,GAAKA,EACVG,EAAK8B,YAAcnC,EACnBK,EAAK2B,OAAkB,QAATzC,EACdc,EAAK+B,SAAoB,QAAT7C,EAChBc,EAAKgC,SAAoB,UAAT9C,EAChBc,EAAKE,SAAWF,EAAKiC,UACrBjC,EAAK4B,YAAa,EAClB5B,EAAK6B,cAAe,GAGtBnB,uBA9L0C,SA8LnBV,EAAMH,EAAII,EAAU0B,GAAQ,GACzCO,GAAkClC,EAAlCkC,SAAUC,EAAwBnC,EAAxBmC,SAAUF,EAAcjC,EAAdiC,UACtBH,EAA2B,aAAb7B,CAEpB,QACEJ,KACAI,WACA6B,cACAH,OAAQG,GAAeH,EACvBI,SAAUD,IAAgBH,EAC1BK,SAAuB,UAAb/B,EACVmC,WAAYT,EAASQ,EAAWD,EAChCzC,QAASkC,EAAS,OAAS,SAC3BzB,SAAU+B,EACVL,YAAY,EACZC,cAAc,IAIlBzB,oBAjN0C,SAiNtBP,GAClB,OACEA,GAAIA,EACJK,SAnOqB,wBAoOrBuB,YAlOsB,aAmOtBvC,KAAM,MACNO,QAAS,SACTiC,UAAU,EACVK,UAAU,EACVH,YAAY,EACZC,cAAc,IAIlBhD,YA/N0C,SA+N9BzH,GAAM,GACRiL,GAAuBjL,EAAvBiL,SAAUC,EAAalL,EAAbkL,QAClB,OAAOD,KAAaC,EAAWA,EAAcD,EAAtC,MAAoDC,GAG7D3B,iBApO0C,SAoOzBJ,GAAU,GACjBC,GAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,KAEd,IAAID,EAAK9E,SAAW+E,EAAM/E,OACxB,GAAI8E,EAAK9E,OAAS+E,EAAM/E,OAEtB,IAAK,GADC6G,GAAO/B,EAAK9E,OAAS+E,EAAM/E,OACxBD,EAAI,EAAGA,EAAI8G,EAAM9G,GAAK,EAC7BgF,EAAMX,MAAOG,SAAU,YAAaC,SAAU,SAIhD,KAAK,GADCqC,GAAO9B,EAAM/E,OAAS8E,EAAK9E,OACxBD,EAAI,EAAGA,EAAI8G,EAAM9G,GAAK,EAC7B+E,EAAKV,MAAOG,SAAU,YAAaC,SAAU,MAMrDsC,2BAtP0C,SAsPfpL,EAAMmG,GAC/BnG,EAAK6C,0BAA4BsD,GAGnCkF,mBA1P0C,SA0PvBrL,EAAMsL,GAtQM,gBAuQzBA,EACFtL,EAAK+H,YAAa,EAvQE,SAwQXuD,IAETtL,EAAK+H,YAAa,EAClB/H,EAAKgB,YAAa,EAClBhB,EAAKsH,kBAEL3G,KAAK4K,sBAAsBvL,IAG7BA,EAAKuH,YAAc+D,GAGrBC,sBAzQ0C,SAyQpBvL,GACpBA,EAAKmI,YAAYd,QAAQ,SAACuB,IACpBA,EAAK8B,aAAe9B,EAAK0B,YAC3B1B,EAAK4B,YAAa,EAClB5B,EAAK6B,cAAe,KAIxBzK,EAAKkJ,cAAc7B,QAAQ,SAACmB,GAC1B,GAAMY,GAAOZ,EAAM,GACba,EAAQb,EAAM,GACdgD,EAAcpC,EAAKsB,aAAetB,EAAKkB,SACvCmB,EAAepC,EAAMqB,aAAerB,EAAMiB,UAE5CkB,GAAeC,KACjBrC,EAAKoB,YAAa,EAClBpB,EAAKqB,cAAe,EACpBpB,EAAMmB,YAAa,EACnBnB,EAAMoB,cAAe,MAK3BiB,gBAhS0C,WAqSxC,IAAK,GAJC/E,GAAQhG,KAAKwF,MAAMK,cAAcG,MACjCgF,EAAmB3M,EAAE4M,KAAKjL,KAAKwF,MAAMK,cAAcI,eAAetC,OACpEuH,EAAa,EAERxH,EAAI,EAAGyH,EAAInF,EAAMrC,OAAQD,EAAIyH,EAAGzH,GAAK,EAAG,CAC/C,GAAMrE,GAAO2G,EAAMtC,EAEnB,IApT2B,gBAoTvBrE,EAAKuH,YAA0C,CACjD,GAAIwE,GAAkB,EAChBC,EAAoB3M,OAAO4M,KAAKjM,EAAKsH,gBAAgBhD,MAI3D,IAAItE,EAAK8H,OAAS/B,EAAeC,KAAM,CACrC,IAAK,GAAIkG,GAAI,EAAGC,EAAInM,EAAKoI,SAAS9D,OAAQ4H,EAAIC,EAAGD,GAAK,EAChDlM,EAAKoI,SAAS8D,GAAG3D,WACnBwD,GAAmB,EAInBC,KAAsBD,IACxBF,GAAc,QAGb,IApUa,SAoUT7L,EAAKuH,cAGTvH,EAAKuB,QAAS,CACjBsK,GAAc,CACd,WAKN,OAAQlL,KAAKwF,MAAMG,cAAgBqF,IAAqBE,GAG1DO,oBAtU0C,WAuUxC,GAAMC,GAAU,4BAGhB,OAAO1L,MAAKwF,OAAQxF,KAAKwF,MAAMG,aAFZ,gBAEkD+F,GAGvEC,cA7U0C,WA8UxC,GAAIC,KA2BJ,OAzBAA,IACE1F,eAAgBlG,KAAKwF,MAAMK,cAAcI,cACzCD,UAGFhG,KAAKwF,MAAMK,cAAcG,MAAMU,QAAQ,SAACrH,GACtC,GAAMwM,IACJvB,SAAUjL,EAAKiL,SACfC,SAAUlL,EAAKkL,SAGblL,GAAK8H,OAAS/B,EAAeC,KAvWN,gBAyWrBhG,EAAKuH,YACPiF,EAAQpE,SAAWpI,EAAKsH,eAzWR,SA0WPtH,EAAKuH,cACdiF,EAAQjL,QAAUvB,EAAKuB,SAEhBvB,EAAK8H,OAAS/B,EAAeE,cACtCuG,EAAQjL,QAAUvB,EAAKuB,SAGzBgL,EAAW5F,MAAM+B,KAAK8D,KAGjBD,GAGTE,eA5W0C,SA4W3BzM,EAAM0M,EAAWC,GAAW,GAAAC,GAAAjM,IACzCjB,GAAA,QAAI0K,IAAIpK,EAAKsH,eAAgBoF,EAAWC,GAExC3M,EAAKmI,YAAYd,QAAQ,SAACuB,GACpBA,EAAKH,KAAOiE,IAAc9D,EAAK8B,aAAe9B,EAAK0B,WACrDsC,EAAKC,SAASjE,EAAM+D,KAIxB3M,EAAKkJ,cAAc7B,QAAQ,SAACmB,GAC1B,GAAMY,GAAOZ,EAAM,GACba,EAAQb,EAAM,GACdsE,EAAYzD,EAAMZ,KAAOiE,GAAatD,EAAKX,KAAOiE,EAClDlB,EAAcpC,EAAKsB,aAAetB,EAAKkB,SACvCmB,EAAepC,EAAMqB,aAAerB,EAAMiB,QAE5CwC,KAActB,GAAeC,KAC/BmB,EAAKC,SAASzD,EAAMuD,GACpBC,EAAKC,SAASxD,EAAOsD,OAK3BE,SAnY0C,SAmYjCjE,EAAM+D,GACK,SAAdA,GAAwB/D,EAAK2B,QAC/B3B,EAAK4B,YAAa,EAClB5B,EAAK6B,cAAe,GACG,WAAdkC,GAA0B/D,EAAK+B,UACxC/B,EAAK4B,YAAa,EAClB5B,EAAK6B,cAAe,IAEpB7B,EAAK4B,YAAa,EAClB5B,EAAK6B,cAAe,IAIxBsC,eAhZ0C,SAgZ3B5G,GACbxF,KAAKwF,MAAMG,aAAeH,GAG5B6G,oBApZ0C,WAqZxC,MAAOrM,MAAKwF,MAAMK,cAAcG,MAAMsG,KAAK,SAAAC,GAAA,MAAKA,GAAEpF,OAAS/B,EAAeC,UAG7E/C,OAAOC,KAAOD,OAAOC,ULkNKC,KAAKrE,EAAqBC,EAAoB,iDAIrEoO,8CACA,SAAUtO,EAAQC,EAAqBC,GAE7C,YACAM,QAAOC,eAAeR,EAAqB,cAAgBM,OAAO,IACtC,SAASJ,GAAyB,GAAIU,GAAoCX,EAAoB,6CAEjGqO,GADsDrO,EAAoB,6CAClBA,EAAoB,gDAE5EsO,GADgEtO,EAAoB0G,EAAE2H,GAC1BrO,EAAoB,oDAEhFuO,GADoEvO,EAAoB0G,EAAE4H,GAC5BtO,EAAoB,qDACZA,GAAoB0G,EAAE6H,GAC/BvO,EAAoB,oDACfA,EAAoB,yDMrpB/GA,EAAA,0DAYAC,GAAE,WACA,GACMuO,GAAc5L,SAASF,cAAc,cACrCyE,EAAsBhD,GAAGtD,eAAesG,oBACxCvB,EAAwB,GAAIzB,IAAGtD,eAAe+E,uBAClDE,cAAe0I,EAAYC,QAAQ3I,cACnCC,qBAAsByI,EAAYC,QAAQ1I,sBAG5C5B,IAAGuK,0BAA4B,GAAI/N,GAAA,SACjCgO,GAAI,aACJtN,KAAM8F,EAAoBC,MAC1BwH,YACEC,mBAAoB1K,GAAGtD,eAAeC,eACtCgO,wBAAyB3K,GAAGtD,eAAeyD,oBAC3CyK,0BAA2B5K,GAAGtD,eAAe8D,uBAE/CjD,UACEsN,mBADQ,WACe,MAAO7H,GAAoB8D,yBAClDgE,cAFQ,WAEU,MAAO9H,GAAoBwF,mBAC7CuC,iBAHQ,WAGa,MAAO/H,GAAoBkG,uBAChD8B,yBAJQ,WAIqB,MAAOhI,GAAoB8G,wBAE1DmB,QAdqC,WAc3B,GAAAhN,GAAAR,IACRgE,GACGyJ,qBACA9M,KAAK,SAAClB,GACa,UAAdA,EAAK0H,KACP5B,EAAoByD,iBAAiBvJ,EAAKwJ,SAE1C1D,EAAoBO,iBAAiBrG,KAGxCiO,MAAM,WACLnI,EAAoByD,qBAErBjH,OAAO,WACNwD,EAAoBuD,iBAAgB,GAEpCtI,EAAKmN,UAAU,WACbtP,EAAE,wBAAwBuP,uBAIlCrN,SACEsN,qBADO,SACctE,GACnBhE,EAAoB+D,YAAYC,IAElCuE,yBAJO,SAIkBzO,EAAMsL,GAC7B,GAhD2B,gBAgDvBA,GAAqCtL,EAAK4C,mBAE5C,WADAsD,GAAoBkF,2BAA2BpL,GAAM,EAIvDkG,GAAoBmF,mBAAmBrL,EAAMsL,IAE/CtI,0BAZO,SAYmBhD,GACxBkG,EAAoBkF,2BAA2BpL,GAAM,GACrDkG,EAAoBmF,mBAAmBrL,EAzDZ,gBA2D7B+C,0BAhBO,SAgBmB/C,GACxBkG,EAAoBkF,2BAA2BpL,GAAM,IAEvD0O,OAnBO,WAoBLxI,EAAoB6G,gBAAe,GAEnCpI,EACGgK,uBAAuBzI,EAAoBoG,iBAC3ChL,KAAK,SAAClB,GACL6C,OAAO2L,SAASC,KAAOzO,EAAK0O,cAE7BT,MAAM,WACLnI,EAAoB6G,gBAAe,GACnC,GAAItK,OAAM,0ENiqBOU,KAAKrE,EAAqBC,EAAoB,iDAIrEgQ,oDACA,SAAUlQ,EAAQgF,IOzvBxB,SAAElE,GACAA,EAAOC,eAAiBD,EAAOC,mBAE/BD,EAAOC,eAAe4D,SACpBtC,SACEuL,eADO,SACQzM,EAAM0M,EAAWC,GAC9BzJ,GAAGtD,eAAesG,oBAAoBuG,eAAezM,EAAM0M,EAAWC,OAI3E1J,OAAOC,KAAOD,OAAOC,SPiwBlB8L,kDACA,SAAUnQ,EAAQgF,IQ5wBxB,SAAElE,GACAA,EAAOC,eAAiBD,EAAOC,mBAE/BD,EAAOC,eAAe2D,OACpBrC,SACE+N,aADO,SACMrG,GACX,OACEsG,KAAQtG,EAAK2B,OACb4E,OAAUvG,EAAK+B,SACfyE,MAASxG,EAAKgC,SACdyE,SAAYzG,EAAK4B,WACjB8E,WAAc1G,EAAK6B,kBAK1BxH,OAAOC,KAAOD,OAAOC,WRoxBrB","file":"merge_conflicts.c7f2ef9cce11ab77b621.bundle.js","sourcesContent":["webpackJsonp([\"merge_conflicts\"],{\n\n/***/ \"./merge_conflicts/components/diff_file_editor.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"../../../node_modules/vue/dist/vue.esm.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable comma-dangle, quote-props, no-useless-computed-key, object-shorthand, no-new, no-param-reassign, max-len */\n/* global ace */\n/* global Flash */\n\n\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.diffFileEditor = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: {\n      file: Object,\n      onCancelDiscardConfirmation: Function,\n      onAcceptDiscardConfirmation: Function\n    },\n    data: function data() {\n      return {\n        saved: false,\n        loading: false,\n        fileLoaded: false,\n        originalContent: ''\n      };\n    },\n\n    computed: {\n      classObject: function classObject() {\n        return {\n          'saved': this.saved,\n          'is-loading': this.loading\n        };\n      }\n    },\n    watch: _defineProperty({}, 'file.showEditor', function fileShowEditor(val) {\n      this.resetEditorContent();\n\n      if (!val || this.fileLoaded || this.loading) {\n        return;\n      }\n\n      this.loadEditor();\n    }),\n    mounted: function mounted() {\n      if (this.file.loadEditor) {\n        this.loadEditor();\n      }\n    },\n\n    methods: {\n      loadEditor: function loadEditor() {\n        var _this = this;\n\n        this.loading = true;\n\n        $.get(this.file.content_path).done(function (file) {\n          var content = _this.$el.querySelector('pre');\n          var fileContent = document.createTextNode(file.content);\n\n          content.textContent = fileContent.textContent;\n\n          _this.originalContent = file.content;\n          _this.fileLoaded = true;\n          _this.editor = ace.edit(content);\n          _this.editor.$blockScrolling = Infinity; // Turn off annoying warning\n          _this.editor.getSession().setMode('ace/mode/' + file.blob_ace_mode);\n          _this.editor.on('change', function () {\n            _this.saveDiffResolution();\n          });\n          _this.saveDiffResolution();\n        }).fail(function () {\n          new Flash('Failed to load the file, please try again.');\n        }).always(function () {\n          _this.loading = false;\n        });\n      },\n      saveDiffResolution: function saveDiffResolution() {\n        this.saved = true;\n\n        // This probably be better placed in the data provider\n        this.file.content = this.editor.getValue();\n        this.file.resolveEditChanged = this.file.content !== this.originalContent;\n        this.file.promptDiscardConfirmation = false;\n      },\n      resetEditorContent: function resetEditorContent() {\n        if (this.fileLoaded) {\n          this.editor.setValue(this.originalContent, -1);\n        }\n      },\n      cancelDiscardConfirmation: function cancelDiscardConfirmation(file) {\n        this.onCancelDiscardConfirmation(file);\n      },\n      acceptDiscardConfirmation: function acceptDiscardConfirmation(file) {\n        this.onAcceptDiscardConfirmation(file);\n      }\n    }\n  });\n})(window.gl || (window.gl = {}));\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./merge_conflicts/components/inline_conflict_lines.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"../../../node_modules/vue/dist/vue.esm.js\");\n/* eslint-disable no-param-reassign, comma-dangle */\n\n\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.inlineConflictLines = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions]\n  });\n})(window.gl || (window.gl = {}));\n\n/***/ }),\n\n/***/ \"./merge_conflicts/components/parallel_conflict_lines.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"../../../node_modules/vue/dist/vue.esm.js\");\n/* eslint-disable no-param-reassign, comma-dangle */\n\n\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.parallelConflictLines = __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions],\n    template: '\\n      <table>\\n        <tr class=\"line_holder parallel\" v-for=\"section in file.parallelLines\">\\n          <template v-for=\"line in section\">\\n            <td class=\"diff-line-num header\" :class=\"lineCssClass(line)\" v-if=\"line.isHeader\"></td>\\n            <td class=\"line_content header\" :class=\"lineCssClass(line)\" v-if=\"line.isHeader\">\\n              <strong>{{line.richText}}</strong>\\n              <button class=\"btn\" @click=\"handleSelected(file, line.id, line.section)\">{{line.buttonTitle}}</button>\\n            </td>\\n            <td class=\"diff-line-num old_line\" :class=\"lineCssClass(line)\" v-if=\"!line.isHeader\">{{line.lineNumber}}</td>\\n            <td class=\"line_content parallel\" :class=\"lineCssClass(line)\" v-if=\"!line.isHeader\" v-html=\"line.richText\"></td>\\n          </template>\\n        </tr>\\n      </table>\\n    '\n  });\n})(window.gl || (window.gl = {}));\n\n/***/ }),\n\n/***/ \"./merge_conflicts/merge_conflict_service.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable no-param-reassign, comma-dangle */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  var mergeConflictsService = function () {\n    function mergeConflictsService(options) {\n      _classCallCheck(this, mergeConflictsService);\n\n      this.conflictsPath = options.conflictsPath;\n      this.resolveConflictsPath = options.resolveConflictsPath;\n    }\n\n    _createClass(mergeConflictsService, [{\n      key: 'fetchConflictsData',\n      value: function fetchConflictsData() {\n        return $.ajax({\n          dataType: 'json',\n          url: this.conflictsPath\n        });\n      }\n    }, {\n      key: 'submitResolveConflicts',\n      value: function submitResolveConflicts(data) {\n        return $.ajax({\n          url: this.resolveConflictsPath,\n          data: JSON.stringify(data),\n          contentType: 'application/json',\n          dataType: 'json',\n          method: 'POST'\n        });\n      }\n    }]);\n\n    return mergeConflictsService;\n  }();\n\n  global.mergeConflicts.mergeConflictsService = mergeConflictsService;\n})(window.gl || (window.gl = {}));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./merge_conflicts/merge_conflict_store.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"../../../node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_js_cookie__ = __webpack_require__(\"../../../node_modules/js-cookie/src/js.cookie.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_js_cookie___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_js_cookie__);\n/* eslint-disable comma-dangle, object-shorthand, no-param-reassign, camelcase, no-nested-ternary, no-continue, max-len */\n\n\n\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  var diffViewType = __WEBPACK_IMPORTED_MODULE_1_js_cookie___default.a.get('diff_view');\n  var HEAD_HEADER_TEXT = 'HEAD//our changes';\n  var ORIGIN_HEADER_TEXT = 'origin//their changes';\n  var HEAD_BUTTON_TITLE = 'Use ours';\n  var ORIGIN_BUTTON_TITLE = 'Use theirs';\n  var INTERACTIVE_RESOLVE_MODE = 'interactive';\n  var EDIT_RESOLVE_MODE = 'edit';\n  var DEFAULT_RESOLVE_MODE = INTERACTIVE_RESOLVE_MODE;\n  var VIEW_TYPES = {\n    INLINE: 'inline',\n    PARALLEL: 'parallel'\n  };\n  var CONFLICT_TYPES = {\n    TEXT: 'text',\n    TEXT_EDITOR: 'text-editor'\n  };\n\n  global.mergeConflicts.mergeConflictsStore = {\n    state: {\n      isLoading: true,\n      hasError: false,\n      isSubmitting: false,\n      isParallel: diffViewType === VIEW_TYPES.PARALLEL,\n      diffViewType: diffViewType,\n      conflictsData: {}\n    },\n\n    setConflictsData: function setConflictsData(data) {\n      this.decorateFiles(data.files);\n\n      this.state.conflictsData = {\n        files: data.files,\n        commitMessage: data.commit_message,\n        sourceBranch: data.source_branch,\n        targetBranch: data.target_branch,\n        shortCommitSha: data.commit_sha.slice(0, 7)\n      };\n    },\n    decorateFiles: function decorateFiles(files) {\n      var _this = this;\n\n      files.forEach(function (file) {\n        file.content = '';\n        file.resolutionData = {};\n        file.promptDiscardConfirmation = false;\n        file.resolveMode = DEFAULT_RESOLVE_MODE;\n        file.filePath = _this.getFilePath(file);\n        file.iconClass = 'fa-' + file.blob_icon;\n        file.blobPath = file.blob_path;\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.showEditor = false;\n          file.loadEditor = false;\n\n          _this.setInlineLine(file);\n          _this.setParallelLine(file);\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          file.showEditor = true;\n          file.loadEditor = true;\n        }\n      });\n    },\n    setInlineLine: function setInlineLine(file) {\n      var _this2 = this;\n\n      file.inlineLines = [];\n\n      file.sections.forEach(function (section) {\n        var currentLineType = 'new';\n        var conflict = section.conflict,\n            lines = section.lines,\n            id = section.id;\n\n\n        if (conflict) {\n          file.inlineLines.push(_this2.getHeadHeaderLine(id));\n        }\n\n        lines.forEach(function (line) {\n          var type = line.type;\n\n\n          if ((type === 'new' || type === 'old') && currentLineType !== type) {\n            currentLineType = type;\n            file.inlineLines.push({ lineType: 'emptyLine', richText: '' });\n          }\n\n          _this2.decorateLineForInlineView(line, id, conflict);\n          file.inlineLines.push(line);\n        });\n\n        if (conflict) {\n          file.inlineLines.push(_this2.getOriginHeaderLine(id));\n        }\n      });\n    },\n    setParallelLine: function setParallelLine(file) {\n      var _this3 = this;\n\n      file.parallelLines = [];\n      var linesObj = { left: [], right: [] };\n\n      file.sections.forEach(function (section) {\n        var conflict = section.conflict,\n            lines = section.lines,\n            id = section.id;\n\n\n        if (conflict) {\n          linesObj.left.push(_this3.getOriginHeaderLine(id));\n          linesObj.right.push(_this3.getHeadHeaderLine(id));\n        }\n\n        lines.forEach(function (line) {\n          var type = line.type;\n\n\n          if (conflict) {\n            if (type === 'old') {\n              linesObj.left.push(_this3.getLineForParallelView(line, id, 'conflict'));\n            } else if (type === 'new') {\n              linesObj.right.push(_this3.getLineForParallelView(line, id, 'conflict', true));\n            }\n          } else {\n            var lineType = type || 'context';\n\n            linesObj.left.push(_this3.getLineForParallelView(line, id, lineType));\n            linesObj.right.push(_this3.getLineForParallelView(line, id, lineType, true));\n          }\n        });\n\n        _this3.checkLineLengths(linesObj);\n      });\n\n      for (var i = 0, len = linesObj.left.length; i < len; i += 1) {\n        file.parallelLines.push([linesObj.right[i], linesObj.left[i]]);\n      }\n    },\n    setLoadingState: function setLoadingState(state) {\n      this.state.isLoading = state;\n    },\n    setErrorState: function setErrorState(state) {\n      this.state.hasError = state;\n    },\n    setFailedRequest: function setFailedRequest(message) {\n      this.state.hasError = true;\n      this.state.conflictsData.errorMessage = message;\n    },\n    getConflictsCount: function getConflictsCount() {\n      if (!this.state.conflictsData.files.length) {\n        return 0;\n      }\n\n      var files = this.state.conflictsData.files;\n      var count = 0;\n\n      files.forEach(function (file) {\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.sections.forEach(function (section) {\n            if (section.conflict) {\n              count += 1;\n            }\n          });\n        } else {\n          count += 1;\n        }\n      });\n\n      return count;\n    },\n    getConflictsCountText: function getConflictsCountText() {\n      var count = this.getConflictsCount();\n      var text = count ? 'conflicts' : 'conflict';\n\n      return count + ' ' + text;\n    },\n    setViewType: function setViewType(viewType) {\n      this.state.diffView = viewType;\n      this.state.isParallel = viewType === VIEW_TYPES.PARALLEL;\n\n      __WEBPACK_IMPORTED_MODULE_1_js_cookie___default.a.set('diff_view', viewType);\n    },\n    getHeadHeaderLine: function getHeadHeaderLine(id) {\n      return {\n        id: id,\n        richText: HEAD_HEADER_TEXT,\n        buttonTitle: HEAD_BUTTON_TITLE,\n        type: 'new',\n        section: 'head',\n        isHeader: true,\n        isHead: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n    decorateLineForInlineView: function decorateLineForInlineView(line, id, conflict) {\n      var type = line.type;\n\n      line.id = id;\n      line.hasConflict = conflict;\n      line.isHead = type === 'new';\n      line.isOrigin = type === 'old';\n      line.hasMatch = type === 'match';\n      line.richText = line.rich_text;\n      line.isSelected = false;\n      line.isUnselected = false;\n    },\n    getLineForParallelView: function getLineForParallelView(line, id, lineType, isHead) {\n      var old_line = line.old_line,\n          new_line = line.new_line,\n          rich_text = line.rich_text;\n\n      var hasConflict = lineType === 'conflict';\n\n      return {\n        id: id,\n        lineType: lineType,\n        hasConflict: hasConflict,\n        isHead: hasConflict && isHead,\n        isOrigin: hasConflict && !isHead,\n        hasMatch: lineType === 'match',\n        lineNumber: isHead ? new_line : old_line,\n        section: isHead ? 'head' : 'origin',\n        richText: rich_text,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n    getOriginHeaderLine: function getOriginHeaderLine(id) {\n      return {\n        id: id,\n        richText: ORIGIN_HEADER_TEXT,\n        buttonTitle: ORIGIN_BUTTON_TITLE,\n        type: 'old',\n        section: 'origin',\n        isHeader: true,\n        isOrigin: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n    getFilePath: function getFilePath(file) {\n      var old_path = file.old_path,\n          new_path = file.new_path;\n\n      return old_path === new_path ? new_path : old_path + ' \\u2192 ' + new_path;\n    },\n    checkLineLengths: function checkLineLengths(linesObj) {\n      var left = linesObj.left,\n          right = linesObj.right;\n\n\n      if (left.length !== right.length) {\n        if (left.length > right.length) {\n          var diff = left.length - right.length;\n          for (var i = 0; i < diff; i += 1) {\n            right.push({ lineType: 'emptyLine', richText: '' });\n          }\n        } else {\n          var _diff = right.length - left.length;\n          for (var _i = 0; _i < _diff; _i += 1) {\n            left.push({ lineType: 'emptyLine', richText: '' });\n          }\n        }\n      }\n    },\n    setPromptConfirmationState: function setPromptConfirmationState(file, state) {\n      file.promptDiscardConfirmation = state;\n    },\n    setFileResolveMode: function setFileResolveMode(file, mode) {\n      if (mode === INTERACTIVE_RESOLVE_MODE) {\n        file.showEditor = false;\n      } else if (mode === EDIT_RESOLVE_MODE) {\n        // Restore Interactive mode when switching to Edit mode\n        file.showEditor = true;\n        file.loadEditor = true;\n        file.resolutionData = {};\n\n        this.restoreFileLinesState(file);\n      }\n\n      file.resolveMode = mode;\n    },\n    restoreFileLinesState: function restoreFileLinesState(file) {\n      file.inlineLines.forEach(function (line) {\n        if (line.hasConflict || line.isHeader) {\n          line.isSelected = false;\n          line.isUnselected = false;\n        }\n      });\n\n      file.parallelLines.forEach(function (lines) {\n        var left = lines[0];\n        var right = lines[1];\n        var isLeftMatch = left.hasConflict || left.isHeader;\n        var isRightMatch = right.hasConflict || right.isHeader;\n\n        if (isLeftMatch || isRightMatch) {\n          left.isSelected = false;\n          left.isUnselected = false;\n          right.isSelected = false;\n          right.isUnselected = false;\n        }\n      });\n    },\n    isReadyToCommit: function isReadyToCommit() {\n      var files = this.state.conflictsData.files;\n      var hasCommitMessage = $.trim(this.state.conflictsData.commitMessage).length;\n      var unresolved = 0;\n\n      for (var i = 0, l = files.length; i < l; i += 1) {\n        var file = files[i];\n\n        if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n          var numberConflicts = 0;\n          var resolvedConflicts = Object.keys(file.resolutionData).length;\n\n          // We only check for conflicts type 'text'\n          // since conflicts `text_editor` can´t be resolved in interactive mode\n          if (file.type === CONFLICT_TYPES.TEXT) {\n            for (var j = 0, k = file.sections.length; j < k; j += 1) {\n              if (file.sections[j].conflict) {\n                numberConflicts += 1;\n              }\n            }\n\n            if (resolvedConflicts !== numberConflicts) {\n              unresolved += 1;\n            }\n          }\n        } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n          // Unlikely to happen since switching to Edit mode saves content automatically.\n          // Checking anyway in case the save strategy changes in the future\n          if (!file.content) {\n            unresolved += 1;\n            continue;\n          }\n        }\n      }\n\n      return !this.state.isSubmitting && hasCommitMessage && !unresolved;\n    },\n    getCommitButtonText: function getCommitButtonText() {\n      var initial = 'Commit conflict resolution';\n      var inProgress = 'Committing...';\n\n      return this.state ? this.state.isSubmitting ? inProgress : initial : initial;\n    },\n    getCommitData: function getCommitData() {\n      var commitData = {};\n\n      commitData = {\n        commit_message: this.state.conflictsData.commitMessage,\n        files: []\n      };\n\n      this.state.conflictsData.files.forEach(function (file) {\n        var addFile = {\n          old_path: file.old_path,\n          new_path: file.new_path\n        };\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          // Submit only one data for type of editing\n          if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n            addFile.sections = file.resolutionData;\n          } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n            addFile.content = file.content;\n          }\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          addFile.content = file.content;\n        }\n\n        commitData.files.push(addFile);\n      });\n\n      return commitData;\n    },\n    handleSelected: function handleSelected(file, sectionId, selection) {\n      var _this4 = this;\n\n      __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"].set(file.resolutionData, sectionId, selection);\n\n      file.inlineLines.forEach(function (line) {\n        if (line.id === sectionId && (line.hasConflict || line.isHeader)) {\n          _this4.markLine(line, selection);\n        }\n      });\n\n      file.parallelLines.forEach(function (lines) {\n        var left = lines[0];\n        var right = lines[1];\n        var hasSameId = right.id === sectionId || left.id === sectionId;\n        var isLeftMatch = left.hasConflict || left.isHeader;\n        var isRightMatch = right.hasConflict || right.isHeader;\n\n        if (hasSameId && (isLeftMatch || isRightMatch)) {\n          _this4.markLine(left, selection);\n          _this4.markLine(right, selection);\n        }\n      });\n    },\n    markLine: function markLine(line, selection) {\n      if (selection === 'head' && line.isHead) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else if (selection === 'origin' && line.isOrigin) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else {\n        line.isSelected = false;\n        line.isUnselected = true;\n      }\n    },\n    setSubmitState: function setSubmitState(state) {\n      this.state.isSubmitting = state;\n    },\n    fileTextTypePresent: function fileTextTypePresent() {\n      return this.state.conflictsData.files.some(function (f) {\n        return f.type === CONFLICT_TYPES.TEXT;\n      });\n    }\n  };\n})(window.gl || (window.gl = {}));\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./merge_conflicts/merge_conflicts_bundle.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(\"../../../node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__merge_conflict_store__ = __webpack_require__(\"./merge_conflicts/merge_conflict_store.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__merge_conflict_service__ = __webpack_require__(\"./merge_conflicts/merge_conflict_service.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__merge_conflict_service___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__merge_conflict_service__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_line_conflict_utils__ = __webpack_require__(\"./merge_conflicts/mixins/line_conflict_utils.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mixins_line_conflict_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__mixins_line_conflict_utils__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_line_conflict_actions__ = __webpack_require__(\"./merge_conflicts/mixins/line_conflict_actions.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixins_line_conflict_actions___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__mixins_line_conflict_actions__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_diff_file_editor__ = __webpack_require__(\"./merge_conflicts/components/diff_file_editor.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__components_inline_conflict_lines__ = __webpack_require__(\"./merge_conflicts/components/inline_conflict_lines.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_parallel_conflict_lines__ = __webpack_require__(\"./merge_conflicts/components/parallel_conflict_lines.js\");\n/* eslint-disable new-cap, comma-dangle, no-new */\n/* global Flash */\n\n\n\n\n\n\n\n\n\n\n$(function () {\n  var INTERACTIVE_RESOLVE_MODE = 'interactive';\n  var conflictsEl = document.querySelector('#conflicts');\n  var mergeConflictsStore = gl.mergeConflicts.mergeConflictsStore;\n  var mergeConflictsService = new gl.mergeConflicts.mergeConflictsService({\n    conflictsPath: conflictsEl.dataset.conflictsPath,\n    resolveConflictsPath: conflictsEl.dataset.resolveConflictsPath\n  });\n\n  gl.MergeConflictsResolverApp = new __WEBPACK_IMPORTED_MODULE_0_vue__[\"default\"]({\n    el: '#conflicts',\n    data: mergeConflictsStore.state,\n    components: {\n      'diff-file-editor': gl.mergeConflicts.diffFileEditor,\n      'inline-conflict-lines': gl.mergeConflicts.inlineConflictLines,\n      'parallel-conflict-lines': gl.mergeConflicts.parallelConflictLines\n    },\n    computed: {\n      conflictsCountText: function conflictsCountText() {\n        return mergeConflictsStore.getConflictsCountText();\n      },\n      readyToCommit: function readyToCommit() {\n        return mergeConflictsStore.isReadyToCommit();\n      },\n      commitButtonText: function commitButtonText() {\n        return mergeConflictsStore.getCommitButtonText();\n      },\n      showDiffViewTypeSwitcher: function showDiffViewTypeSwitcher() {\n        return mergeConflictsStore.fileTextTypePresent();\n      }\n    },\n    created: function created() {\n      var _this = this;\n\n      mergeConflictsService.fetchConflictsData().done(function (data) {\n        if (data.type === 'error') {\n          mergeConflictsStore.setFailedRequest(data.message);\n        } else {\n          mergeConflictsStore.setConflictsData(data);\n        }\n      }).error(function () {\n        mergeConflictsStore.setFailedRequest();\n      }).always(function () {\n        mergeConflictsStore.setLoadingState(false);\n\n        _this.$nextTick(function () {\n          $('.js-syntax-highlight').syntaxHighlight();\n        });\n      });\n    },\n\n    methods: {\n      handleViewTypeChange: function handleViewTypeChange(viewType) {\n        mergeConflictsStore.setViewType(viewType);\n      },\n      onClickResolveModeButton: function onClickResolveModeButton(file, mode) {\n        if (mode === INTERACTIVE_RESOLVE_MODE && file.resolveEditChanged) {\n          mergeConflictsStore.setPromptConfirmationState(file, true);\n          return;\n        }\n\n        mergeConflictsStore.setFileResolveMode(file, mode);\n      },\n      acceptDiscardConfirmation: function acceptDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n        mergeConflictsStore.setFileResolveMode(file, INTERACTIVE_RESOLVE_MODE);\n      },\n      cancelDiscardConfirmation: function cancelDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n      },\n      commit: function commit() {\n        mergeConflictsStore.setSubmitState(true);\n\n        mergeConflictsService.submitResolveConflicts(mergeConflictsStore.getCommitData()).done(function (data) {\n          window.location.href = data.redirect_to;\n        }).error(function () {\n          mergeConflictsStore.setSubmitState(false);\n          new Flash('Failed to save merge conflicts resolutions. Please try again!');\n        });\n      }\n    }\n  });\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./merge_conflicts/mixins/line_conflict_actions.js\":\n/***/ (function(module, exports) {\n\n/* eslint-disable no-param-reassign, comma-dangle */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.actions = {\n    methods: {\n      handleSelected: function handleSelected(file, sectionId, selection) {\n        gl.mergeConflicts.mergeConflictsStore.handleSelected(file, sectionId, selection);\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n/***/ }),\n\n/***/ \"./merge_conflicts/mixins/line_conflict_utils.js\":\n/***/ (function(module, exports) {\n\n/* eslint-disable no-param-reassign, quote-props, comma-dangle */\n\n(function (global) {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.utils = {\n    methods: {\n      lineCssClass: function lineCssClass(line) {\n        return {\n          'head': line.isHead,\n          'origin': line.isOrigin,\n          'match': line.hasMatch,\n          'selected': line.isSelected,\n          'unselected': line.isUnselected\n        };\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n/***/ })\n\n},[\"./merge_conflicts/merge_conflicts_bundle.js\"]);\n\n\n// WEBPACK FOOTER //\n// merge_conflicts.c7f2ef9cce11ab77b621.bundle.js","/* eslint-disable comma-dangle, quote-props, no-useless-computed-key, object-shorthand, no-new, no-param-reassign, max-len */\n/* global ace */\n/* global Flash */\n\nimport Vue from 'vue';\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.diffFileEditor = Vue.extend({\n    props: {\n      file: Object,\n      onCancelDiscardConfirmation: Function,\n      onAcceptDiscardConfirmation: Function\n    },\n    data() {\n      return {\n        saved: false,\n        loading: false,\n        fileLoaded: false,\n        originalContent: '',\n      };\n    },\n    computed: {\n      classObject() {\n        return {\n          'saved': this.saved,\n          'is-loading': this.loading\n        };\n      }\n    },\n    watch: {\n      ['file.showEditor'](val) {\n        this.resetEditorContent();\n\n        if (!val || this.fileLoaded || this.loading) {\n          return;\n        }\n\n        this.loadEditor();\n      }\n    },\n    mounted() {\n      if (this.file.loadEditor) {\n        this.loadEditor();\n      }\n    },\n    methods: {\n      loadEditor() {\n        this.loading = true;\n\n        $.get(this.file.content_path)\n          .done((file) => {\n            const content = this.$el.querySelector('pre');\n            const fileContent = document.createTextNode(file.content);\n\n            content.textContent = fileContent.textContent;\n\n            this.originalContent = file.content;\n            this.fileLoaded = true;\n            this.editor = ace.edit(content);\n            this.editor.$blockScrolling = Infinity; // Turn off annoying warning\n            this.editor.getSession().setMode(`ace/mode/${file.blob_ace_mode}`);\n            this.editor.on('change', () => {\n              this.saveDiffResolution();\n            });\n            this.saveDiffResolution();\n          })\n          .fail(() => {\n            new Flash('Failed to load the file, please try again.');\n          })\n          .always(() => {\n            this.loading = false;\n          });\n      },\n      saveDiffResolution() {\n        this.saved = true;\n\n        // This probably be better placed in the data provider\n        this.file.content = this.editor.getValue();\n        this.file.resolveEditChanged = this.file.content !== this.originalContent;\n        this.file.promptDiscardConfirmation = false;\n      },\n      resetEditorContent() {\n        if (this.fileLoaded) {\n          this.editor.setValue(this.originalContent, -1);\n        }\n      },\n      cancelDiscardConfirmation(file) {\n        this.onCancelDiscardConfirmation(file);\n      },\n      acceptDiscardConfirmation(file) {\n        this.onAcceptDiscardConfirmation(file);\n      }\n    }\n  });\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/components/diff_file_editor.js","/* eslint-disable no-param-reassign, comma-dangle */\n\nimport Vue from 'vue';\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.inlineConflictLines = Vue.extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions],\n  });\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/components/inline_conflict_lines.js","/* eslint-disable no-param-reassign, comma-dangle */\n\nimport Vue from 'vue';\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.parallelConflictLines = Vue.extend({\n    props: {\n      file: Object\n    },\n    mixins: [global.mergeConflicts.utils, global.mergeConflicts.actions],\n    template: `\n      <table>\n        <tr class=\"line_holder parallel\" v-for=\"section in file.parallelLines\">\n          <template v-for=\"line in section\">\n            <td class=\"diff-line-num header\" :class=\"lineCssClass(line)\" v-if=\"line.isHeader\"></td>\n            <td class=\"line_content header\" :class=\"lineCssClass(line)\" v-if=\"line.isHeader\">\n              <strong>{{line.richText}}</strong>\n              <button class=\"btn\" @click=\"handleSelected(file, line.id, line.section)\">{{line.buttonTitle}}</button>\n            </td>\n            <td class=\"diff-line-num old_line\" :class=\"lineCssClass(line)\" v-if=\"!line.isHeader\">{{line.lineNumber}}</td>\n            <td class=\"line_content parallel\" :class=\"lineCssClass(line)\" v-if=\"!line.isHeader\" v-html=\"line.richText\"></td>\n          </template>\n        </tr>\n      </table>\n    `,\n  });\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/components/parallel_conflict_lines.js","/* eslint-disable no-param-reassign, comma-dangle */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  class mergeConflictsService {\n    constructor(options) {\n      this.conflictsPath = options.conflictsPath;\n      this.resolveConflictsPath = options.resolveConflictsPath;\n    }\n\n    fetchConflictsData() {\n      return $.ajax({\n        dataType: 'json',\n        url: this.conflictsPath\n      });\n    }\n\n    submitResolveConflicts(data) {\n      return $.ajax({\n        url: this.resolveConflictsPath,\n        data: JSON.stringify(data),\n        contentType: 'application/json',\n        dataType: 'json',\n        method: 'POST'\n      });\n    }\n  }\n\n  global.mergeConflicts.mergeConflictsService = mergeConflictsService;\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/merge_conflict_service.js","/* eslint-disable comma-dangle, object-shorthand, no-param-reassign, camelcase, no-nested-ternary, no-continue, max-len */\n\nimport Vue from 'vue';\nimport Cookies from 'js-cookie';\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  const diffViewType = Cookies.get('diff_view');\n  const HEAD_HEADER_TEXT = 'HEAD//our changes';\n  const ORIGIN_HEADER_TEXT = 'origin//their changes';\n  const HEAD_BUTTON_TITLE = 'Use ours';\n  const ORIGIN_BUTTON_TITLE = 'Use theirs';\n  const INTERACTIVE_RESOLVE_MODE = 'interactive';\n  const EDIT_RESOLVE_MODE = 'edit';\n  const DEFAULT_RESOLVE_MODE = INTERACTIVE_RESOLVE_MODE;\n  const VIEW_TYPES = {\n    INLINE: 'inline',\n    PARALLEL: 'parallel'\n  };\n  const CONFLICT_TYPES = {\n    TEXT: 'text',\n    TEXT_EDITOR: 'text-editor'\n  };\n\n  global.mergeConflicts.mergeConflictsStore = {\n    state: {\n      isLoading: true,\n      hasError: false,\n      isSubmitting: false,\n      isParallel: diffViewType === VIEW_TYPES.PARALLEL,\n      diffViewType: diffViewType,\n      conflictsData: {}\n    },\n\n    setConflictsData(data) {\n      this.decorateFiles(data.files);\n\n      this.state.conflictsData = {\n        files: data.files,\n        commitMessage: data.commit_message,\n        sourceBranch: data.source_branch,\n        targetBranch: data.target_branch,\n        shortCommitSha: data.commit_sha.slice(0, 7),\n      };\n    },\n\n    decorateFiles(files) {\n      files.forEach((file) => {\n        file.content = '';\n        file.resolutionData = {};\n        file.promptDiscardConfirmation = false;\n        file.resolveMode = DEFAULT_RESOLVE_MODE;\n        file.filePath = this.getFilePath(file);\n        file.iconClass = `fa-${file.blob_icon}`;\n        file.blobPath = file.blob_path;\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.showEditor = false;\n          file.loadEditor = false;\n\n          this.setInlineLine(file);\n          this.setParallelLine(file);\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          file.showEditor = true;\n          file.loadEditor = true;\n        }\n      });\n    },\n\n    setInlineLine(file) {\n      file.inlineLines = [];\n\n      file.sections.forEach((section) => {\n        let currentLineType = 'new';\n        const { conflict, lines, id } = section;\n\n        if (conflict) {\n          file.inlineLines.push(this.getHeadHeaderLine(id));\n        }\n\n        lines.forEach((line) => {\n          const { type } = line;\n\n          if ((type === 'new' || type === 'old') && currentLineType !== type) {\n            currentLineType = type;\n            file.inlineLines.push({ lineType: 'emptyLine', richText: '' });\n          }\n\n          this.decorateLineForInlineView(line, id, conflict);\n          file.inlineLines.push(line);\n        });\n\n        if (conflict) {\n          file.inlineLines.push(this.getOriginHeaderLine(id));\n        }\n      });\n    },\n\n    setParallelLine(file) {\n      file.parallelLines = [];\n      const linesObj = { left: [], right: [] };\n\n      file.sections.forEach((section) => {\n        const { conflict, lines, id } = section;\n\n        if (conflict) {\n          linesObj.left.push(this.getOriginHeaderLine(id));\n          linesObj.right.push(this.getHeadHeaderLine(id));\n        }\n\n        lines.forEach((line) => {\n          const { type } = line;\n\n          if (conflict) {\n            if (type === 'old') {\n              linesObj.left.push(this.getLineForParallelView(line, id, 'conflict'));\n            } else if (type === 'new') {\n              linesObj.right.push(this.getLineForParallelView(line, id, 'conflict', true));\n            }\n          } else {\n            const lineType = type || 'context';\n\n            linesObj.left.push(this.getLineForParallelView(line, id, lineType));\n            linesObj.right.push(this.getLineForParallelView(line, id, lineType, true));\n          }\n        });\n\n        this.checkLineLengths(linesObj);\n      });\n\n      for (let i = 0, len = linesObj.left.length; i < len; i += 1) {\n        file.parallelLines.push([\n          linesObj.right[i],\n          linesObj.left[i]\n        ]);\n      }\n    },\n\n    setLoadingState(state) {\n      this.state.isLoading = state;\n    },\n\n    setErrorState(state) {\n      this.state.hasError = state;\n    },\n\n    setFailedRequest(message) {\n      this.state.hasError = true;\n      this.state.conflictsData.errorMessage = message;\n    },\n\n    getConflictsCount() {\n      if (!this.state.conflictsData.files.length) {\n        return 0;\n      }\n\n      const files = this.state.conflictsData.files;\n      let count = 0;\n\n      files.forEach((file) => {\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          file.sections.forEach((section) => {\n            if (section.conflict) {\n              count += 1;\n            }\n          });\n        } else {\n          count += 1;\n        }\n      });\n\n      return count;\n    },\n\n    getConflictsCountText() {\n      const count = this.getConflictsCount();\n      const text = count ? 'conflicts' : 'conflict';\n\n      return `${count} ${text}`;\n    },\n\n    setViewType(viewType) {\n      this.state.diffView = viewType;\n      this.state.isParallel = viewType === VIEW_TYPES.PARALLEL;\n\n      Cookies.set('diff_view', viewType);\n    },\n\n    getHeadHeaderLine(id) {\n      return {\n        id: id,\n        richText: HEAD_HEADER_TEXT,\n        buttonTitle: HEAD_BUTTON_TITLE,\n        type: 'new',\n        section: 'head',\n        isHeader: true,\n        isHead: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n\n    decorateLineForInlineView(line, id, conflict) {\n      const { type } = line;\n      line.id = id;\n      line.hasConflict = conflict;\n      line.isHead = type === 'new';\n      line.isOrigin = type === 'old';\n      line.hasMatch = type === 'match';\n      line.richText = line.rich_text;\n      line.isSelected = false;\n      line.isUnselected = false;\n    },\n\n    getLineForParallelView(line, id, lineType, isHead) {\n      const { old_line, new_line, rich_text } = line;\n      const hasConflict = lineType === 'conflict';\n\n      return {\n        id,\n        lineType,\n        hasConflict,\n        isHead: hasConflict && isHead,\n        isOrigin: hasConflict && !isHead,\n        hasMatch: lineType === 'match',\n        lineNumber: isHead ? new_line : old_line,\n        section: isHead ? 'head' : 'origin',\n        richText: rich_text,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n\n    getOriginHeaderLine(id) {\n      return {\n        id: id,\n        richText: ORIGIN_HEADER_TEXT,\n        buttonTitle: ORIGIN_BUTTON_TITLE,\n        type: 'old',\n        section: 'origin',\n        isHeader: true,\n        isOrigin: true,\n        isSelected: false,\n        isUnselected: false\n      };\n    },\n\n    getFilePath(file) {\n      const { old_path, new_path } = file;\n      return old_path === new_path ? new_path : `${old_path} → ${new_path}`;\n    },\n\n    checkLineLengths(linesObj) {\n      const { left, right } = linesObj;\n\n      if (left.length !== right.length) {\n        if (left.length > right.length) {\n          const diff = left.length - right.length;\n          for (let i = 0; i < diff; i += 1) {\n            right.push({ lineType: 'emptyLine', richText: '' });\n          }\n        } else {\n          const diff = right.length - left.length;\n          for (let i = 0; i < diff; i += 1) {\n            left.push({ lineType: 'emptyLine', richText: '' });\n          }\n        }\n      }\n    },\n\n    setPromptConfirmationState(file, state) {\n      file.promptDiscardConfirmation = state;\n    },\n\n    setFileResolveMode(file, mode) {\n      if (mode === INTERACTIVE_RESOLVE_MODE) {\n        file.showEditor = false;\n      } else if (mode === EDIT_RESOLVE_MODE) {\n        // Restore Interactive mode when switching to Edit mode\n        file.showEditor = true;\n        file.loadEditor = true;\n        file.resolutionData = {};\n\n        this.restoreFileLinesState(file);\n      }\n\n      file.resolveMode = mode;\n    },\n\n    restoreFileLinesState(file) {\n      file.inlineLines.forEach((line) => {\n        if (line.hasConflict || line.isHeader) {\n          line.isSelected = false;\n          line.isUnselected = false;\n        }\n      });\n\n      file.parallelLines.forEach((lines) => {\n        const left = lines[0];\n        const right = lines[1];\n        const isLeftMatch = left.hasConflict || left.isHeader;\n        const isRightMatch = right.hasConflict || right.isHeader;\n\n        if (isLeftMatch || isRightMatch) {\n          left.isSelected = false;\n          left.isUnselected = false;\n          right.isSelected = false;\n          right.isUnselected = false;\n        }\n      });\n    },\n\n    isReadyToCommit() {\n      const files = this.state.conflictsData.files;\n      const hasCommitMessage = $.trim(this.state.conflictsData.commitMessage).length;\n      let unresolved = 0;\n\n      for (let i = 0, l = files.length; i < l; i += 1) {\n        const file = files[i];\n\n        if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n          let numberConflicts = 0;\n          const resolvedConflicts = Object.keys(file.resolutionData).length;\n\n          // We only check for conflicts type 'text'\n          // since conflicts `text_editor` can´t be resolved in interactive mode\n          if (file.type === CONFLICT_TYPES.TEXT) {\n            for (let j = 0, k = file.sections.length; j < k; j += 1) {\n              if (file.sections[j].conflict) {\n                numberConflicts += 1;\n              }\n            }\n\n            if (resolvedConflicts !== numberConflicts) {\n              unresolved += 1;\n            }\n          }\n        } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n          // Unlikely to happen since switching to Edit mode saves content automatically.\n          // Checking anyway in case the save strategy changes in the future\n          if (!file.content) {\n            unresolved += 1;\n            continue;\n          }\n        }\n      }\n\n      return !this.state.isSubmitting && hasCommitMessage && !unresolved;\n    },\n\n    getCommitButtonText() {\n      const initial = 'Commit conflict resolution';\n      const inProgress = 'Committing...';\n\n      return this.state ? this.state.isSubmitting ? inProgress : initial : initial;\n    },\n\n    getCommitData() {\n      let commitData = {};\n\n      commitData = {\n        commit_message: this.state.conflictsData.commitMessage,\n        files: []\n      };\n\n      this.state.conflictsData.files.forEach((file) => {\n        const addFile = {\n          old_path: file.old_path,\n          new_path: file.new_path\n        };\n\n        if (file.type === CONFLICT_TYPES.TEXT) {\n          // Submit only one data for type of editing\n          if (file.resolveMode === INTERACTIVE_RESOLVE_MODE) {\n            addFile.sections = file.resolutionData;\n          } else if (file.resolveMode === EDIT_RESOLVE_MODE) {\n            addFile.content = file.content;\n          }\n        } else if (file.type === CONFLICT_TYPES.TEXT_EDITOR) {\n          addFile.content = file.content;\n        }\n\n        commitData.files.push(addFile);\n      });\n\n      return commitData;\n    },\n\n    handleSelected(file, sectionId, selection) {\n      Vue.set(file.resolutionData, sectionId, selection);\n\n      file.inlineLines.forEach((line) => {\n        if (line.id === sectionId && (line.hasConflict || line.isHeader)) {\n          this.markLine(line, selection);\n        }\n      });\n\n      file.parallelLines.forEach((lines) => {\n        const left = lines[0];\n        const right = lines[1];\n        const hasSameId = right.id === sectionId || left.id === sectionId;\n        const isLeftMatch = left.hasConflict || left.isHeader;\n        const isRightMatch = right.hasConflict || right.isHeader;\n\n        if (hasSameId && (isLeftMatch || isRightMatch)) {\n          this.markLine(left, selection);\n          this.markLine(right, selection);\n        }\n      });\n    },\n\n    markLine(line, selection) {\n      if (selection === 'head' && line.isHead) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else if (selection === 'origin' && line.isOrigin) {\n        line.isSelected = true;\n        line.isUnselected = false;\n      } else {\n        line.isSelected = false;\n        line.isUnselected = true;\n      }\n    },\n\n    setSubmitState(state) {\n      this.state.isSubmitting = state;\n    },\n\n    fileTextTypePresent() {\n      return this.state.conflictsData.files.some(f => f.type === CONFLICT_TYPES.TEXT);\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/merge_conflict_store.js","/* eslint-disable new-cap, comma-dangle, no-new */\n/* global Flash */\n\nimport Vue from 'vue';\nimport './merge_conflict_store';\nimport './merge_conflict_service';\nimport './mixins/line_conflict_utils';\nimport './mixins/line_conflict_actions';\nimport './components/diff_file_editor';\nimport './components/inline_conflict_lines';\nimport './components/parallel_conflict_lines';\n\n$(() => {\n  const INTERACTIVE_RESOLVE_MODE = 'interactive';\n  const conflictsEl = document.querySelector('#conflicts');\n  const mergeConflictsStore = gl.mergeConflicts.mergeConflictsStore;\n  const mergeConflictsService = new gl.mergeConflicts.mergeConflictsService({\n    conflictsPath: conflictsEl.dataset.conflictsPath,\n    resolveConflictsPath: conflictsEl.dataset.resolveConflictsPath\n  });\n\n  gl.MergeConflictsResolverApp = new Vue({\n    el: '#conflicts',\n    data: mergeConflictsStore.state,\n    components: {\n      'diff-file-editor': gl.mergeConflicts.diffFileEditor,\n      'inline-conflict-lines': gl.mergeConflicts.inlineConflictLines,\n      'parallel-conflict-lines': gl.mergeConflicts.parallelConflictLines\n    },\n    computed: {\n      conflictsCountText() { return mergeConflictsStore.getConflictsCountText(); },\n      readyToCommit() { return mergeConflictsStore.isReadyToCommit(); },\n      commitButtonText() { return mergeConflictsStore.getCommitButtonText(); },\n      showDiffViewTypeSwitcher() { return mergeConflictsStore.fileTextTypePresent(); }\n    },\n    created() {\n      mergeConflictsService\n        .fetchConflictsData()\n        .done((data) => {\n          if (data.type === 'error') {\n            mergeConflictsStore.setFailedRequest(data.message);\n          } else {\n            mergeConflictsStore.setConflictsData(data);\n          }\n        })\n        .error(() => {\n          mergeConflictsStore.setFailedRequest();\n        })\n        .always(() => {\n          mergeConflictsStore.setLoadingState(false);\n\n          this.$nextTick(() => {\n            $('.js-syntax-highlight').syntaxHighlight();\n          });\n        });\n    },\n    methods: {\n      handleViewTypeChange(viewType) {\n        mergeConflictsStore.setViewType(viewType);\n      },\n      onClickResolveModeButton(file, mode) {\n        if (mode === INTERACTIVE_RESOLVE_MODE && file.resolveEditChanged) {\n          mergeConflictsStore.setPromptConfirmationState(file, true);\n          return;\n        }\n\n        mergeConflictsStore.setFileResolveMode(file, mode);\n      },\n      acceptDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n        mergeConflictsStore.setFileResolveMode(file, INTERACTIVE_RESOLVE_MODE);\n      },\n      cancelDiscardConfirmation(file) {\n        mergeConflictsStore.setPromptConfirmationState(file, false);\n      },\n      commit() {\n        mergeConflictsStore.setSubmitState(true);\n\n        mergeConflictsService\n          .submitResolveConflicts(mergeConflictsStore.getCommitData())\n          .done((data) => {\n            window.location.href = data.redirect_to;\n          })\n          .error(() => {\n            mergeConflictsStore.setSubmitState(false);\n            new Flash('Failed to save merge conflicts resolutions. Please try again!');\n          });\n      }\n    }\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/merge_conflicts_bundle.js","/* eslint-disable no-param-reassign, comma-dangle */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.actions = {\n    methods: {\n      handleSelected(file, sectionId, selection) {\n        gl.mergeConflicts.mergeConflictsStore.handleSelected(file, sectionId, selection);\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/mixins/line_conflict_actions.js","/* eslint-disable no-param-reassign, quote-props, comma-dangle */\n\n((global) => {\n  global.mergeConflicts = global.mergeConflicts || {};\n\n  global.mergeConflicts.utils = {\n    methods: {\n      lineCssClass(line) {\n        return {\n          'head': line.isHead,\n          'origin': line.isOrigin,\n          'match': line.hasMatch,\n          'selected': line.isSelected,\n          'unselected': line.isUnselected\n        };\n      }\n    }\n  };\n})(window.gl || (window.gl = {}));\n\n\n\n// WEBPACK FOOTER //\n// ./merge_conflicts/mixins/line_conflict_utils.js"],"sourceRoot":""}