{"version":3,"sources":["webpack:///network.f9ea9850ef8e0d4b4f10.bundle.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raphael/raphael.js","webpack:///./network/branch_graph.js","webpack:///./network/network.js","webpack:///./network/network_bundle.js","webpack:///./network/raphael.js"],"names":["webpackJsonp","../../../node_modules/raphael/raphael.js","module","exports","__webpack_require__","root","factory","this","modules","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","R","apply","eve","first","is","on","array","_engine","create","splice","nu","add","args","Array","prototype","slice","arguments","length","f","pop","clone","obj","Object","res","constructor","key","has","repush","item","i","ii","push","cacher","scope","postprocessor","newf","arg","join","cache","count","shift","clrToString","hex","catmullRom2bezier","crp","z","d","iLen","x","y","base3","t","p1","p2","p3","p4","bezlen","x1","y1","x2","y2","x3","y3","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","math","sqrt","getTatLen","ll","l","step","t2","abs","intersect","mmax","mmin","nx","ny","denominator","px","py","px2","toFixed","py2","interHelper","bez1","bez2","justCount","bbox1","bezierBBox","bbox2","isBBoxIntersect","l1","l2","n1","n2","dots1","dots2","xy","findDotsAtSegment","concat","j","di","di1","dj","dj1","ci","cj","t1","interPathHelper","path1","path2","_path2curve","x1m","y1m","x2m","y2m","pi","jj","pj","intr","k","kk","segment1","segment2","Matrix","a","b","e","x_y_w_h","S","width","height","CubicBezierAtTime","p1x","p1y","p2x","p2y","duration","sampleCurveX","ax","bx","cx","solveCurveX","epsilon","t0","d2","cy","by","ay","Animation","anim","ms","percents","newAnim","times","attr","toFloat","sort","sortByNumber","top","runAnimation","element","percent","status","totalOrigin","params","isInAnim","isInAnimSet","next","prev","timestamp","from","to","diff","animationElements","el","initstatus","start","Date","availableAnimAttrs","paper","customAttributes","availableAttrs","getRGB","toColour","r","g","pathes","path2curve","toPath","_","eq","equaliseTransform","real","matrix","to2","transform","getBBox","extractTransform","values","Str","split","separator","from2","easing","easyeasy","easing_formulas","match","bezierrg","curve","pipe","del","stop","callback","repeat","origin","animation","requestAnimFrame","stopAnimation","version","paperproto","elements","circle","rect","path","ellipse","text","image","formatrg","doc","document","win","window","oldRaphael","was","Raphael","Paper","ca","supportsTouch","DocumentTouch","E","String","events","touchMap","mousedown","mousemove","mouseup","lowerCase","toLowerCase","Math","max","min","pow","PI","objectToString","toString","colourRegExp","_ISURL","isnan","NaN","Infinity","-Infinity","round","parseFloat","toInt","parseInt","upperCase","toUpperCase","_availableAttrs","arrow-end","arrow-start","blur","clip-rect","cursor","fill","fill-opacity","font","font-family","font-size","font-style","font-weight","gradient","href","letter-spacing","opacity","rx","ry","src","stroke","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","target","text-anchor","title","class","_availableAnimAttrs","commaSpaces","hsrg","hs","rg","p2s","pathCommand","tCommand","pathValues","eldata","_radial_gradient","rectPath","_rectPath","w","h","ellipsePath","getPath","_getPath","attrs","bbox","_getBBox","set","mapPath","pathi","_g","type","SVGAngle","implementation","hasFeature","createElement","innerHTML","firstChild","style","behavior","adj","svg","vml","_Paper","fn","_id","o","isArray","angle","atan2","rad","deg","snapTo","value","tolerance","rem","createUUID","uuidRegEx","uuidReplacer","replace","random","setWindow","newwin","initWin","toHex","color","bod","trim","docum","ActiveXObject","write","close","body","createPopup","range","createTextRange","queryCommandValue","display","appendChild","defaultView","getComputedStyle","getPropertyValue","hsbtoString","s","hsltoString","rgbtoString","prepareRGB","clr","packageRGB","rgb","hsb2rgb","hsl2rgb","rgb2hsl","rgb2hsb","v","G","B","X","C","H","V","L","M","_path2string","_preload","img","cssText","onload","removeChild","onerror","colour","indexOf","error","substring","charAt","red","green","blue","hsb","hsl","getColor","reset","parsePathString","pathString","pth","paths","arr","pathClone","paramCounts","q","data","name","parseTransformString","TString","ps","sleep","setTimeout","c1x","c1y","c2x","c2y","t13","t12","t3","mx","my","alpha","n","end","curveDim","isPointInsideBBox","pathIntersection","pathIntersectionNumber","isPointInsidePath","pathBBox","_removedFactory","methodname","pathDimensions","Y","dim","xmin","ymin","xmax","ymax","bb","pathArray","pathToRelative","_pathToRelative","rel","pa","len","pathToAbsolute","_pathToAbsolute","crz","dots","l2c","q2c","a2c","large_arc_flag","sweep_flag","recursive","_120","rotate","cos","sin","f1","f2","rx2","ry2","asin","df","f2old","x2old","y2old","c1","s1","c2","s2","tan","hx","hy","m1","m2","m3","m4","newres","findDotAtSegment","dot","qx","qy","attrs2","processPath","pcom","tq","T","Q","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","tear","_parseDots","par","offset","_tear","bottom","toMatrix","_tofront","_toback","_insertafter","el2","_insertbefore","transformPath","_extractTransform","tstr","tdata","dx","dy","sx","sy","tlen","command","absolute","inver","invert","translate","scale","dirtyT","getEmpty","_equaliseTransform","tt1","tt2","maxlength","_getContainer","container","getElementById","tagName","pixelWidth","offsetWidth","pixelHeight","offsetHeight","matrixproto","norm","normalize","mag","out","me","get","fromCharCode","toFilter","row","scalex","shear","scaley","acos","isSimple","isSuperSimple","noRotation","toTransformString","shorter","preventDefault","returnValue","preventTouch","originalEvent","stopPropagation","cancelBubble","stopTouch","getEventPosition","scrollY","documentElement","scrollTop","scrollX","scrollLeft","clientX","clientY","addEvent","addEventListener","pos","_f","olde","targetTouches","removeEventListener","attachEvent","event","detachEvent","drag","dragMove","dragi","touches","touch","identifier","_drag","node","nextSibling","parent","parentNode","opera","getElementByPoint","insertBefore","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","elproto","eventName","unbind","shape","removeData","getData","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","onDragOver","undrag","unmousedown","__set__","format","itemsArray","Set","setStart","setFinish","getSize","canvas","setSize","setViewBox","fit","raphael","getOffset","elem","box","getBoundingClientRect","ownerDocument","docElem","clientTop","clientLeft","pageYOffset","left","pageXOffset","elementFromPoint","so","sr","createSVGRect","hits","getIntersectionList","getById","raphaelid","getElementsByBBox","forEach","bot","thisArg","getElementsByPoint","isPointInside","rp","realPath","isWithoutTransform","removed","dirty","bboxwt","glow","offsetx","offsety","getPointAtSegmentLength","getLengthFactory","istotal","subpath","onlystart","point","sp","subpaths","getTotalLength","getPointAtLength","getSubpathsAtLength","getSubpath","ef","linear","<",">","<>","backIn","backOut","elastic","bounce","easeIn","easeOut","easeInOut","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Now","paused","now","time","that","init","upto255","animateWith","onAnimation","delay","floor","json","100","lastKey","animate","setTime","pause","resume","items","setproto","method","clear","index","insertion","tail","todel","arglen","exclude","collector","insertAfter","glowConfig","ret","shape2","index2","registerFont","face","fonts","fontcopy","glyphs","family","prop","glyph","getFont","weight","stretch","normal","bold","lighter","bolder","RegExp","fontName","test","thefont","print","string","size","letter_spacing","line_spacing","letters","notfirst","lineHeight","shifty","descent","curr","token","str","fullfill","tokenRegex","objNotationRegex","replacer","all","quote","quotedName","isFunc","ninja","st","isLoaded","readyState","glob","current_event","comaseparator","numsort","firstDefined","lastDefined","objtos","ar","oldstop","listeners","indexed","queue","ce","zIndex","_events","nes","names","es","sep","exist","hasOwnProperty","nt","subname","cur","nts","off","funcs","once","xlink","markers","block","classic","diamond","open","oval","markerCounter","$","setAttributeNS","setAttribute","createElementNS","webkitTapHighlightColor","addGradientFill","fx","fy","SVG","_fx","_fy","dir","isNaN","vector","defs","gradientTransform","stop-color","stop-opacity","isFinite","fillurl","fillOpacity","isIE9or10","mode","documentMode","location","protocol","host","pathname","search","updatePosition","pattern","patternTransform","addArrow","isEnd","refX","se","arrows","endPath","endMarker","startPath","startMarker","pathId","markerId","use","marker","getElementsByTagName","markerHeight","markerWidth","orient","refY","xlink:href","delta","startdx","enddx","dasharray","-",".","-.","-..",". ","- ","--","- .","--.","--..","addDashes","butt","square","dashes","setFillAndStroke","vis","visibility","att","nodeValue","val","createTextNode","pn","hl","clip","rc","clip-path","getAttribute","startString","endString","isURL","ig","patternUnits","stops","cssrule","tuneText","fontSize","tspan","texts","tspans","dif","getRealNode","Element","sw","hide","show","remove","containerStyle","canvasHidden","parentElement","clientWidth","clientHeight","def","subkey","toFront","toBack","afterNode","beforeNode","fltr","stdDeviation","_blur","filter","removeAttribute","preserveAspectRatio","_viewBox","con","Error","isFloating","cnvs","css","xmlns","xmlns:xlink","_left","_top","renderfix","vb","paperSize","aspectRatio","_vbSize","viewBox","getScreenCTM","createSVGMatrix","desc","map","Z","bites","blurregexp","cssDot","zoom","pathTypes","ovalTypes","path2vml","total","vals","isMove","compensation","setCoords","fillpos","flip","kx","ky","coordsize","rotation","coordorigin","fillsize","position","newpath","isOval","div","clipRect","dstyle","textpath","textpathStyle","fontFamily","fontWeight","fontStyle","createNode","newstroke","strokeColor","joinstyle","miterlimit","endcap","dashstyle","span","brect","W","right","dirtyattrs","dd","bbx","fxfy","color2","clrs","colors","focus","focussize","focusposition","_oid","oldt","vbs","_viewBoxShift","vbt","skew","isGrad","isPatt","bbt","auxGetBBox","runtimeStyle","margin","Path","textpathok","cs","styleSheets","createStyleSheet","addRule","namespaces","rvml","./network/branch_graph.js","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__raphael__","BranchGraph","element1","options1","options","bind","scrollBottom","scrollRight","scrollUp","scrollDown","preparedCommits","mtime","mspace","parents","offsetX","offsetY","unitTime","unitSpace","prev_start","load","ajax","url","dataType","success","proxy","prepareData","days","commits","buildGraph","ch","cw","ref","collectParents","graphHeight","graphWidth","barHeight","isParent","markCommit","collectColors","results","space","len1","ref1","results1","cuday","cumonth","day","mm","renderPartialGraph","bindEvents","commit","isGraphEdge","hasDrawn","drawDot","drawLines","appendLabel","appendAnchor","scroll","_this","find","label","shortrefs","textbox","refs","substr","anchor","click","commit_url","tooltip","commitTooltip","avatar_box_x","avatar_box_y","author","icon","message","arrow","parentCommit","parentX1","parentX2","parentY","route","commit_id","./network/network.js","__WEBPACK_IMPORTED_MODULE_0__branch_graph__","Network","opts","vph","closest","submit","branch_graph","./network/network_bundle.js","defineProperty","__WEBPACK_IMPORTED_MODULE_0__network__","network_graph","ShortcutsNetwork","./network/raphael.js","__WEBPACK_IMPORTED_MODULE_0_raphael_raphael__","__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default","gon","relative_url_root","nameText","idText","messageText","textSet","textWrap","boxWidth","content","abc","letterWidth","words","word"],"mappings":"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","file":"network.f9ea9850ef8e0d4b4f10.bundle.js","sourcesContent":["webpackJsonp([\"network\"],{\n\n/***/ \"../../../node_modules/raphael/raphael.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n/***/ }),\n\n/***/ \"./network/branch_graph.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__raphael__ = __webpack_require__(\"./network/raphael.js\");\n/* eslint-disable func-names, space-before-function-paren, no-var, wrap-iife, quotes, comma-dangle, one-var, one-var-declaration-per-line, no-mixed-operators, no-loop-func, no-floating-decimal, consistent-return, no-unused-vars, prefer-template, prefer-arrow-callback, camelcase, max-len */\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ((function () {\n  function BranchGraph(element1, options1) {\n    this.element = element1;\n    this.options = options1;\n    this.scrollTop = this.scrollTop.bind(this);\n    this.scrollBottom = this.scrollBottom.bind(this);\n    this.scrollRight = this.scrollRight.bind(this);\n    this.scrollLeft = this.scrollLeft.bind(this);\n    this.scrollUp = this.scrollUp.bind(this);\n    this.scrollDown = this.scrollDown.bind(this);\n    this.preparedCommits = {};\n    this.mtime = 0;\n    this.mspace = 0;\n    this.parents = {};\n    this.colors = [\"#000\"];\n    this.offsetX = 150;\n    this.offsetY = 20;\n    this.unitTime = 30;\n    this.unitSpace = 10;\n    this.prev_start = -1;\n    this.load();\n  }\n\n  BranchGraph.prototype.load = function () {\n    return $.ajax({\n      url: this.options.url,\n      method: \"get\",\n      dataType: \"json\",\n      success: $.proxy(function (data) {\n        $(\".loading\", this.element).hide();\n        this.prepareData(data.days, data.commits);\n        return this.buildGraph();\n      }, this)\n    });\n  };\n\n  BranchGraph.prototype.prepareData = function (days, commits) {\n    var c, ch, cw, j, len, ref;\n    this.days = days;\n    this.commits = commits;\n    this.collectParents();\n    this.graphHeight = $(this.element).height();\n    this.graphWidth = $(this.element).width();\n    ch = Math.max(this.graphHeight, this.offsetY + this.unitTime * this.mtime + 150);\n    cw = Math.max(this.graphWidth, this.offsetX + this.unitSpace * this.mspace + 300);\n    this.r = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */])(this.element.get(0), cw, ch);\n    this.top = this.r.set();\n    this.barHeight = Math.max(this.graphHeight, this.unitTime * this.days.length + 320);\n    ref = this.commits;\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      if (c.id in this.parents) {\n        c.isParent = true;\n      }\n      this.preparedCommits[c.id] = c;\n      this.markCommit(c);\n    }\n    return this.collectColors();\n  };\n\n  BranchGraph.prototype.collectParents = function () {\n    var c, j, len, p, ref, results;\n    ref = this.commits;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      this.mtime = Math.max(this.mtime, c.time);\n      this.mspace = Math.max(this.mspace, c.space);\n      results.push(function () {\n        var l, len1, ref1, results1;\n        ref1 = c.parents;\n        results1 = [];\n        for (l = 0, len1 = ref1.length; l < len1; l += 1) {\n          p = ref1[l];\n          this.parents[p[0]] = true;\n          results1.push(this.mspace = Math.max(this.mspace, p[1]));\n        }\n        return results1;\n      }.call(this));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.collectColors = function () {\n    var k, results;\n    k = 0;\n    results = [];\n    while (k < this.mspace) {\n      this.colors.push(__WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor(.8));\n      // Skipping a few colors in the spectrum to get more contrast between colors\n      __WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor();\n      __WEBPACK_IMPORTED_MODULE_0__raphael__[\"a\" /* default */].getColor();\n      results.push(k += 1);\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.buildGraph = function () {\n    var cuday, cumonth, day, j, len, mm, r, ref;\n    r = this.r;\n    cuday = 0;\n    cumonth = \"\";\n    r.rect(0, 0, 40, this.barHeight).attr({\n      fill: \"#222\"\n    });\n    r.rect(40, 0, 30, this.barHeight).attr({\n      fill: \"#444\"\n    });\n    ref = this.days;\n    for (mm = j = 0, len = ref.length; j < len; mm = j += 1) {\n      day = ref[mm];\n      if (cuday !== day[0] || cumonth !== day[1]) {\n        // Dates\n        r.text(55, this.offsetY + this.unitTime * mm, day[0]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#BBB\"\n        });\n        cuday = day[0];\n      }\n      if (cumonth !== day[1]) {\n        // Months\n        r.text(20, this.offsetY + this.unitTime * mm, day[1]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#EEE\"\n        });\n        cumonth = day[1];\n      }\n    }\n    this.renderPartialGraph();\n    return this.bindEvents();\n  };\n\n  BranchGraph.prototype.renderPartialGraph = function () {\n    var commit, end, i, isGraphEdge, start, x, y;\n    start = Math.floor((this.element.scrollTop() - this.offsetY) / this.unitTime) - 10;\n    if (start < 0) {\n      isGraphEdge = true;\n      start = 0;\n    }\n    end = start + 40;\n    if (this.commits.length < end) {\n      isGraphEdge = true;\n      end = this.commits.length;\n    }\n    if (this.prev_start === -1 || Math.abs(this.prev_start - start) > 10 || isGraphEdge) {\n      i = start;\n      this.prev_start = start;\n      while (i < end) {\n        commit = this.commits[i];\n        i += 1;\n        if (commit.hasDrawn !== true) {\n          x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n          y = this.offsetY + this.unitTime * commit.time;\n          this.drawDot(x, y, commit);\n          this.drawLines(x, y, commit);\n          this.appendLabel(x, y, commit);\n          this.appendAnchor(x, y, commit);\n          commit.hasDrawn = true;\n        }\n      }\n      return this.top.toFront();\n    }\n  };\n\n  BranchGraph.prototype.bindEvents = function () {\n    var element;\n    element = this.element;\n    return $(element).scroll(function (_this) {\n      return function (event) {\n        return _this.renderPartialGraph();\n      };\n    }(this));\n  };\n\n  BranchGraph.prototype.scrollDown = function () {\n    this.element.scrollTop(this.element.scrollTop() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollUp = function () {\n    this.element.scrollTop(this.element.scrollTop() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollLeft = function () {\n    this.element.scrollLeft(this.element.scrollLeft() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollRight = function () {\n    this.element.scrollLeft(this.element.scrollLeft() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollBottom = function () {\n    return this.element.scrollTop(this.element.find('svg').height());\n  };\n\n  BranchGraph.prototype.scrollTop = function () {\n    return this.element.scrollTop(0);\n  };\n\n  BranchGraph.prototype.appendLabel = function (x, y, commit) {\n    var label, r, rect, shortrefs, text, textbox, triangle;\n    if (!commit.refs) {\n      return;\n    }\n    r = this.r;\n    shortrefs = commit.refs;\n    // Truncate if longer than 15 chars\n    if (shortrefs.length > 17) {\n      shortrefs = shortrefs.substr(0, 15) + \"…\";\n    }\n    text = r.text(x + 4, y, shortrefs).attr({\n      \"text-anchor\": \"start\",\n      font: \"10px Monaco, monospace\",\n      fill: \"#FFF\",\n      title: commit.refs\n    });\n    textbox = text.getBBox();\n    // Create rectangle based on the size of the textbox\n    rect = r.rect(x, y - 7, textbox.width + 5, textbox.height + 5, 4).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    triangle = r.path([\"M\", x - 5, y, \"L\", x - 15, y - 4, \"L\", x - 15, y + 4, \"Z\"]).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    label = r.set(rect, text);\n    label.transform([\"t\", -rect.getBBox().width - 15, 0]);\n    // Set text to front\n    return text.toFront();\n  };\n\n  BranchGraph.prototype.appendAnchor = function (x, y, commit) {\n    var anchor, options, r, top;\n    r = this.r;\n    top = this.top;\n    options = this.options;\n    anchor = r.circle(x, y, 10).attr({\n      fill: \"#000\",\n      opacity: 0,\n      cursor: \"pointer\"\n    }).click(function () {\n      return window.open(options.commit_url.replace(\"%s\", commit.id), \"_blank\");\n    }).hover(function () {\n      this.tooltip = r.commitTooltip(x + 5, y, commit);\n      return top.push(this.tooltip.insertBefore(this));\n    }, function () {\n      return this.tooltip && this.tooltip.remove() && delete this.tooltip;\n    });\n    return top.push(anchor);\n  };\n\n  BranchGraph.prototype.drawDot = function (x, y, commit) {\n    var avatar_box_x, avatar_box_y, r;\n    r = this.r;\n    r.circle(x, y, 3).attr({\n      fill: this.colors[commit.space],\n      stroke: \"none\"\n    });\n    avatar_box_x = this.offsetX + this.unitSpace * this.mspace + 10;\n    avatar_box_y = y - 10;\n    r.rect(avatar_box_x, avatar_box_y, 20, 20).attr({\n      stroke: this.colors[commit.space],\n      \"stroke-width\": 2\n    });\n    r.image(commit.author.icon, avatar_box_x, avatar_box_y, 20, 20);\n    return r.text(this.offsetX + this.unitSpace * this.mspace + 35, y, commit.message.split(\"\\n\")[0]).attr({\n      \"text-anchor\": \"start\",\n      font: \"14px Monaco, monospace\"\n    });\n  };\n\n  BranchGraph.prototype.drawLines = function (x, y, commit) {\n    var arrow, color, i, j, len, offset, parent, parentCommit, parentX1, parentX2, parentY, r, ref, results, route;\n    r = this.r;\n    ref = commit.parents;\n    results = [];\n    for (i = j = 0, len = ref.length; j < len; i = j += 1) {\n      parent = ref[i];\n      parentCommit = this.preparedCommits[parent[0]];\n      parentY = this.offsetY + this.unitTime * parentCommit.time;\n      parentX1 = this.offsetX + this.unitSpace * (this.mspace - parentCommit.space);\n      parentX2 = this.offsetX + this.unitSpace * (this.mspace - parent[1]);\n      // Set line color\n      if (parentCommit.space <= commit.space) {\n        color = this.colors[commit.space];\n      } else {\n        color = this.colors[parentCommit.space];\n      }\n      // Build line shape\n      if (parent[1] === commit.space) {\n        offset = [0, 5];\n        arrow = \"l-2,5,4,0,-2,-5,0,5\";\n      } else if (parent[1] < commit.space) {\n        offset = [3, 3];\n        arrow = \"l5,0,-2,4,-3,-4,4,2\";\n      } else {\n        offset = [-3, 3];\n        arrow = \"l-5,0,2,4,3,-4,-4,2\";\n      }\n      // Start point\n      route = [\"M\", x + offset[0], y + offset[1]];\n      // Add arrow if not first parent\n      if (i > 0) {\n        route.push(arrow);\n      }\n      // Circumvent if overlap\n      if (commit.space !== parentCommit.space || commit.space !== parent[1]) {\n        route.push(\"L\", parentX2, y + 10, \"L\", parentX2, parentY - 5);\n      }\n      // End point\n      route.push(\"L\", parentX1, parentY);\n      results.push(r.path(route).attr({\n        stroke: color,\n        \"stroke-width\": 2\n      }));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.markCommit = function (commit) {\n    var r, x, y;\n    if (commit.id === this.options.commit_id) {\n      r = this.r;\n      x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n      y = this.offsetY + this.unitTime * commit.time;\n      r.path([\"M\", x + 5, y, \"L\", x + 15, y + 4, \"L\", x + 15, y - 4, \"Z\"]).attr({\n        fill: \"#000\",\n        \"fill-opacity\": .5,\n        stroke: \"none\"\n      });\n      // Displayed in the center\n      return this.element.scrollTop(y - this.graphHeight / 2);\n    }\n  };\n\n  return BranchGraph;\n})());\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./network/network.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__branch_graph__ = __webpack_require__(\"./network/branch_graph.js\");\n/* eslint-disable func-names, space-before-function-paren, wrap-iife, no-var, quotes, quote-props, prefer-template, comma-dangle, max-len */\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ((function () {\n  function Network(opts) {\n    var vph;\n    $(\"#filter_ref\").click(function () {\n      return $(this).closest('form').submit();\n    });\n    this.branch_graph = new __WEBPACK_IMPORTED_MODULE_0__branch_graph__[\"a\" /* default */]($(\".network-graph\"), opts);\n    vph = $(window).height() - 250;\n    $('.network-graph').css({\n      'height': vph + 'px'\n    });\n  }\n\n  return Network;\n})());\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./network/network_bundle.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__network__ = __webpack_require__(\"./network/network.js\");\n/* eslint-disable func-names, space-before-function-paren, prefer-arrow-callback, quotes, no-var, vars-on-top, camelcase, comma-dangle, consistent-return, max-len */\n/* global ShortcutsNetwork */\n\n\n\n$(function () {\n  if (!$(\".network-graph\").length) return;\n\n  var network_graph;\n  network_graph = new __WEBPACK_IMPORTED_MODULE_0__network__[\"a\" /* default */]({\n    url: $(\".network-graph\").attr('data-url'),\n    commit_url: $(\".network-graph\").attr('data-commit-url'),\n    ref: $(\".network-graph\").attr('data-ref'),\n    commit_id: $(\".network-graph\").attr('data-commit-id')\n  });\n  return new ShortcutsNetwork(network_graph.branch_graph);\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\")))\n\n/***/ }),\n\n/***/ \"./network/raphael.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raphael_raphael__ = __webpack_require__(\"../../../node_modules/raphael/raphael.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_raphael_raphael__);\n\n\n__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a.prototype.commitTooltip = function commitTooltip(x, y, commit) {\n  var boxWidth = 300;\n  var icon = this.image(gon.relative_url_root + commit.author.icon, x, y, 20, 20);\n  var nameText = this.text(x + 25, y + 10, commit.author.name);\n  var idText = this.text(x, y + 35, commit.id);\n  var messageText = this.text(x, y + 50, commit.message.replace(/\\r?\\n/g, ' \\n '));\n  var textSet = this.set(icon, nameText, idText, messageText).attr({\n    'text-anchor': 'start',\n    font: '12px Monaco, monospace'\n  });\n  nameText.attr({\n    font: '14px Arial',\n    'font-weight': 'bold'\n  });\n  idText.attr({\n    fill: '#AAA'\n  });\n  messageText.node.style['white-space'] = 'pre';\n  this.textWrap(messageText, boxWidth - 50);\n  var rect = this.rect(x - 10, y - 10, boxWidth, 100, 4).attr({\n    fill: '#FFF',\n    stroke: '#000',\n    'stroke-linecap': 'round',\n    'stroke-width': 2\n  });\n  var tooltip = this.set(rect, textSet);\n  rect.attr({\n    height: tooltip.getBBox().height + 10,\n    width: tooltip.getBBox().width + 10\n  });\n  tooltip.transform(['t', 20, 20]);\n  return tooltip;\n};\n\n__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a.prototype.textWrap = function testWrap(t, width) {\n  var content = t.attr('text');\n  var abc = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  t.attr({\n    text: abc\n  });\n  var letterWidth = t.getBBox().width / abc.length;\n  t.attr({\n    text: content\n  });\n  var words = content.split(' ');\n  var x = 0;\n  var s = [];\n  for (var j = 0, len = words.length; j < len; j += 1) {\n    var word = words[j];\n    if (x + word.length * letterWidth > width) {\n      s.push('\\n');\n      x = 0;\n    }\n    if (word === '\\n') {\n      s.push('\\n');\n      x = 0;\n    } else {\n      s.push(word + ' ');\n      x += word.length * letterWidth;\n    }\n  }\n  t.attr({\n    text: s.join('').trim()\n  });\n  var b = t.getBBox();\n  var h = Math.abs(b.y2) + 1;\n  return t.attr({\n    y: h\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_0_raphael_raphael___default.a);\n\n/***/ })\n\n},[\"./network/network_bundle.js\"]);\n\n\n// WEBPACK FOOTER //\n// network.f9ea9850ef8e0d4b4f10.bundle.js","// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raphael/raphael.js\n// module id = ../../../node_modules/raphael/raphael.js\n// module chunks = network","/* eslint-disable func-names, space-before-function-paren, no-var, wrap-iife, quotes, comma-dangle, one-var, one-var-declaration-per-line, no-mixed-operators, no-loop-func, no-floating-decimal, consistent-return, no-unused-vars, prefer-template, prefer-arrow-callback, camelcase, max-len */\n\nimport Raphael from './raphael';\n\nexport default (function() {\n  function BranchGraph(element1, options1) {\n    this.element = element1;\n    this.options = options1;\n    this.scrollTop = this.scrollTop.bind(this);\n    this.scrollBottom = this.scrollBottom.bind(this);\n    this.scrollRight = this.scrollRight.bind(this);\n    this.scrollLeft = this.scrollLeft.bind(this);\n    this.scrollUp = this.scrollUp.bind(this);\n    this.scrollDown = this.scrollDown.bind(this);\n    this.preparedCommits = {};\n    this.mtime = 0;\n    this.mspace = 0;\n    this.parents = {};\n    this.colors = [\"#000\"];\n    this.offsetX = 150;\n    this.offsetY = 20;\n    this.unitTime = 30;\n    this.unitSpace = 10;\n    this.prev_start = -1;\n    this.load();\n  }\n\n  BranchGraph.prototype.load = function() {\n    return $.ajax({\n      url: this.options.url,\n      method: \"get\",\n      dataType: \"json\",\n      success: $.proxy(function(data) {\n        $(\".loading\", this.element).hide();\n        this.prepareData(data.days, data.commits);\n        return this.buildGraph();\n      }, this)\n    });\n  };\n\n  BranchGraph.prototype.prepareData = function(days, commits) {\n    var c, ch, cw, j, len, ref;\n    this.days = days;\n    this.commits = commits;\n    this.collectParents();\n    this.graphHeight = $(this.element).height();\n    this.graphWidth = $(this.element).width();\n    ch = Math.max(this.graphHeight, this.offsetY + this.unitTime * this.mtime + 150);\n    cw = Math.max(this.graphWidth, this.offsetX + this.unitSpace * this.mspace + 300);\n    this.r = Raphael(this.element.get(0), cw, ch);\n    this.top = this.r.set();\n    this.barHeight = Math.max(this.graphHeight, this.unitTime * this.days.length + 320);\n    ref = this.commits;\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      if (c.id in this.parents) {\n        c.isParent = true;\n      }\n      this.preparedCommits[c.id] = c;\n      this.markCommit(c);\n    }\n    return this.collectColors();\n  };\n\n  BranchGraph.prototype.collectParents = function() {\n    var c, j, len, p, ref, results;\n    ref = this.commits;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j += 1) {\n      c = ref[j];\n      this.mtime = Math.max(this.mtime, c.time);\n      this.mspace = Math.max(this.mspace, c.space);\n      results.push((function() {\n        var l, len1, ref1, results1;\n        ref1 = c.parents;\n        results1 = [];\n        for (l = 0, len1 = ref1.length; l < len1; l += 1) {\n          p = ref1[l];\n          this.parents[p[0]] = true;\n          results1.push(this.mspace = Math.max(this.mspace, p[1]));\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.collectColors = function() {\n    var k, results;\n    k = 0;\n    results = [];\n    while (k < this.mspace) {\n      this.colors.push(Raphael.getColor(.8));\n      // Skipping a few colors in the spectrum to get more contrast between colors\n      Raphael.getColor();\n      Raphael.getColor();\n      results.push(k += 1);\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.buildGraph = function() {\n    var cuday, cumonth, day, j, len, mm, r, ref;\n    r = this.r;\n    cuday = 0;\n    cumonth = \"\";\n    r.rect(0, 0, 40, this.barHeight).attr({\n      fill: \"#222\"\n    });\n    r.rect(40, 0, 30, this.barHeight).attr({\n      fill: \"#444\"\n    });\n    ref = this.days;\n    for (mm = j = 0, len = ref.length; j < len; mm = (j += 1)) {\n      day = ref[mm];\n      if (cuday !== day[0] || cumonth !== day[1]) {\n        // Dates\n        r.text(55, this.offsetY + this.unitTime * mm, day[0]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#BBB\"\n        });\n        cuday = day[0];\n      }\n      if (cumonth !== day[1]) {\n        // Months\n        r.text(20, this.offsetY + this.unitTime * mm, day[1]).attr({\n          font: \"12px Monaco, monospace\",\n          fill: \"#EEE\"\n        });\n        cumonth = day[1];\n      }\n    }\n    this.renderPartialGraph();\n    return this.bindEvents();\n  };\n\n  BranchGraph.prototype.renderPartialGraph = function() {\n    var commit, end, i, isGraphEdge, start, x, y;\n    start = Math.floor((this.element.scrollTop() - this.offsetY) / this.unitTime) - 10;\n    if (start < 0) {\n      isGraphEdge = true;\n      start = 0;\n    }\n    end = start + 40;\n    if (this.commits.length < end) {\n      isGraphEdge = true;\n      end = this.commits.length;\n    }\n    if (this.prev_start === -1 || Math.abs(this.prev_start - start) > 10 || isGraphEdge) {\n      i = start;\n      this.prev_start = start;\n      while (i < end) {\n        commit = this.commits[i];\n        i += 1;\n        if (commit.hasDrawn !== true) {\n          x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n          y = this.offsetY + this.unitTime * commit.time;\n          this.drawDot(x, y, commit);\n          this.drawLines(x, y, commit);\n          this.appendLabel(x, y, commit);\n          this.appendAnchor(x, y, commit);\n          commit.hasDrawn = true;\n        }\n      }\n      return this.top.toFront();\n    }\n  };\n\n  BranchGraph.prototype.bindEvents = function() {\n    var element;\n    element = this.element;\n    return $(element).scroll((function(_this) {\n      return function(event) {\n        return _this.renderPartialGraph();\n      };\n    })(this));\n  };\n\n  BranchGraph.prototype.scrollDown = function() {\n    this.element.scrollTop(this.element.scrollTop() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollUp = function() {\n    this.element.scrollTop(this.element.scrollTop() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollLeft = function() {\n    this.element.scrollLeft(this.element.scrollLeft() - 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollRight = function() {\n    this.element.scrollLeft(this.element.scrollLeft() + 50);\n    return this.renderPartialGraph();\n  };\n\n  BranchGraph.prototype.scrollBottom = function() {\n    return this.element.scrollTop(this.element.find('svg').height());\n  };\n\n  BranchGraph.prototype.scrollTop = function() {\n    return this.element.scrollTop(0);\n  };\n\n  BranchGraph.prototype.appendLabel = function(x, y, commit) {\n    var label, r, rect, shortrefs, text, textbox, triangle;\n    if (!commit.refs) {\n      return;\n    }\n    r = this.r;\n    shortrefs = commit.refs;\n    // Truncate if longer than 15 chars\n    if (shortrefs.length > 17) {\n      shortrefs = shortrefs.substr(0, 15) + \"…\";\n    }\n    text = r.text(x + 4, y, shortrefs).attr({\n      \"text-anchor\": \"start\",\n      font: \"10px Monaco, monospace\",\n      fill: \"#FFF\",\n      title: commit.refs\n    });\n    textbox = text.getBBox();\n    // Create rectangle based on the size of the textbox\n    rect = r.rect(x, y - 7, textbox.width + 5, textbox.height + 5, 4).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    triangle = r.path([\"M\", x - 5, y, \"L\", x - 15, y - 4, \"L\", x - 15, y + 4, \"Z\"]).attr({\n      fill: \"#000\",\n      \"fill-opacity\": .5,\n      stroke: \"none\"\n    });\n    label = r.set(rect, text);\n    label.transform([\"t\", -rect.getBBox().width - 15, 0]);\n    // Set text to front\n    return text.toFront();\n  };\n\n  BranchGraph.prototype.appendAnchor = function(x, y, commit) {\n    var anchor, options, r, top;\n    r = this.r;\n    top = this.top;\n    options = this.options;\n    anchor = r.circle(x, y, 10).attr({\n      fill: \"#000\",\n      opacity: 0,\n      cursor: \"pointer\"\n    }).click(function() {\n      return window.open(options.commit_url.replace(\"%s\", commit.id), \"_blank\");\n    }).hover(function() {\n      this.tooltip = r.commitTooltip(x + 5, y, commit);\n      return top.push(this.tooltip.insertBefore(this));\n    }, function() {\n      return this.tooltip && this.tooltip.remove() && delete this.tooltip;\n    });\n    return top.push(anchor);\n  };\n\n  BranchGraph.prototype.drawDot = function(x, y, commit) {\n    var avatar_box_x, avatar_box_y, r;\n    r = this.r;\n    r.circle(x, y, 3).attr({\n      fill: this.colors[commit.space],\n      stroke: \"none\"\n    });\n    avatar_box_x = this.offsetX + this.unitSpace * this.mspace + 10;\n    avatar_box_y = y - 10;\n    r.rect(avatar_box_x, avatar_box_y, 20, 20).attr({\n      stroke: this.colors[commit.space],\n      \"stroke-width\": 2\n    });\n    r.image(commit.author.icon, avatar_box_x, avatar_box_y, 20, 20);\n    return r.text(this.offsetX + this.unitSpace * this.mspace + 35, y, commit.message.split(\"\\n\")[0]).attr({\n      \"text-anchor\": \"start\",\n      font: \"14px Monaco, monospace\"\n    });\n  };\n\n  BranchGraph.prototype.drawLines = function(x, y, commit) {\n    var arrow, color, i, j, len, offset, parent, parentCommit, parentX1, parentX2, parentY, r, ref, results, route;\n    r = this.r;\n    ref = commit.parents;\n    results = [];\n    for (i = j = 0, len = ref.length; j < len; i = (j += 1)) {\n      parent = ref[i];\n      parentCommit = this.preparedCommits[parent[0]];\n      parentY = this.offsetY + this.unitTime * parentCommit.time;\n      parentX1 = this.offsetX + this.unitSpace * (this.mspace - parentCommit.space);\n      parentX2 = this.offsetX + this.unitSpace * (this.mspace - parent[1]);\n      // Set line color\n      if (parentCommit.space <= commit.space) {\n        color = this.colors[commit.space];\n      } else {\n        color = this.colors[parentCommit.space];\n      }\n      // Build line shape\n      if (parent[1] === commit.space) {\n        offset = [0, 5];\n        arrow = \"l-2,5,4,0,-2,-5,0,5\";\n      } else if (parent[1] < commit.space) {\n        offset = [3, 3];\n        arrow = \"l5,0,-2,4,-3,-4,4,2\";\n      } else {\n        offset = [-3, 3];\n        arrow = \"l-5,0,2,4,3,-4,-4,2\";\n      }\n      // Start point\n      route = [\"M\", x + offset[0], y + offset[1]];\n      // Add arrow if not first parent\n      if (i > 0) {\n        route.push(arrow);\n      }\n      // Circumvent if overlap\n      if (commit.space !== parentCommit.space || commit.space !== parent[1]) {\n        route.push(\"L\", parentX2, y + 10, \"L\", parentX2, parentY - 5);\n      }\n      // End point\n      route.push(\"L\", parentX1, parentY);\n      results.push(r.path(route).attr({\n        stroke: color,\n        \"stroke-width\": 2\n      }));\n    }\n    return results;\n  };\n\n  BranchGraph.prototype.markCommit = function(commit) {\n    var r, x, y;\n    if (commit.id === this.options.commit_id) {\n      r = this.r;\n      x = this.offsetX + this.unitSpace * (this.mspace - commit.space);\n      y = this.offsetY + this.unitTime * commit.time;\n      r.path([\"M\", x + 5, y, \"L\", x + 15, y + 4, \"L\", x + 15, y - 4, \"Z\"]).attr({\n        fill: \"#000\",\n        \"fill-opacity\": .5,\n        stroke: \"none\"\n      });\n      // Displayed in the center\n      return this.element.scrollTop(y - this.graphHeight / 2);\n    }\n  };\n\n  return BranchGraph;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./network/branch_graph.js","/* eslint-disable func-names, space-before-function-paren, wrap-iife, no-var, quotes, quote-props, prefer-template, comma-dangle, max-len */\n\nimport BranchGraph from './branch_graph';\n\nexport default (function() {\n  function Network(opts) {\n    var vph;\n    $(\"#filter_ref\").click(function() {\n      return $(this).closest('form').submit();\n    });\n    this.branch_graph = new BranchGraph($(\".network-graph\"), opts);\n    vph = $(window).height() - 250;\n    $('.network-graph').css({\n      'height': vph + 'px'\n    });\n  }\n\n  return Network;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./network/network.js","/* eslint-disable func-names, space-before-function-paren, prefer-arrow-callback, quotes, no-var, vars-on-top, camelcase, comma-dangle, consistent-return, max-len */\n/* global ShortcutsNetwork */\n\nimport Network from './network';\n\n$(function() {\n  if (!$(\".network-graph\").length) return;\n\n  var network_graph;\n  network_graph = new Network({\n    url: $(\".network-graph\").attr('data-url'),\n    commit_url: $(\".network-graph\").attr('data-commit-url'),\n    ref: $(\".network-graph\").attr('data-ref'),\n    commit_id: $(\".network-graph\").attr('data-commit-id')\n  });\n  return new ShortcutsNetwork(network_graph.branch_graph);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./network/network_bundle.js","import Raphael from 'raphael/raphael';\n\nRaphael.prototype.commitTooltip = function commitTooltip(x, y, commit) {\n  const boxWidth = 300;\n  const icon = this.image(gon.relative_url_root + commit.author.icon, x, y, 20, 20);\n  const nameText = this.text(x + 25, y + 10, commit.author.name);\n  const idText = this.text(x, y + 35, commit.id);\n  const messageText = this.text(x, y + 50, commit.message.replace(/\\r?\\n/g, ' \\n '));\n  const textSet = this.set(icon, nameText, idText, messageText).attr({\n    'text-anchor': 'start',\n    font: '12px Monaco, monospace',\n  });\n  nameText.attr({\n    font: '14px Arial',\n    'font-weight': 'bold',\n  });\n  idText.attr({\n    fill: '#AAA',\n  });\n  messageText.node.style['white-space'] = 'pre';\n  this.textWrap(messageText, boxWidth - 50);\n  const rect = this.rect(x - 10, y - 10, boxWidth, 100, 4).attr({\n    fill: '#FFF',\n    stroke: '#000',\n    'stroke-linecap': 'round',\n    'stroke-width': 2,\n  });\n  const tooltip = this.set(rect, textSet);\n  rect.attr({\n    height: tooltip.getBBox().height + 10,\n    width: tooltip.getBBox().width + 10,\n  });\n  tooltip.transform(['t', 20, 20]);\n  return tooltip;\n};\n\nRaphael.prototype.textWrap = function testWrap(t, width) {\n  const content = t.attr('text');\n  const abc = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  t.attr({\n    text: abc,\n  });\n  const letterWidth = t.getBBox().width / abc.length;\n  t.attr({\n    text: content,\n  });\n  const words = content.split(' ');\n  let x = 0;\n  const s = [];\n  for (let j = 0, len = words.length; j < len; j += 1) {\n    const word = words[j];\n    if (x + (word.length * letterWidth) > width) {\n      s.push('\\n');\n      x = 0;\n    }\n    if (word === '\\n') {\n      s.push('\\n');\n      x = 0;\n    } else {\n      s.push(`${word} `);\n      x += word.length * letterWidth;\n    }\n  }\n  t.attr({\n    text: s.join('').trim(),\n  });\n  const b = t.getBBox();\n  const h = Math.abs(b.y2) + 1;\n  return t.attr({\n    y: h,\n  });\n};\n\nexport default Raphael;\n\n\n\n// WEBPACK FOOTER //\n// ./network/raphael.js"],"sourceRoot":""}