{"version":3,"sources":["webpack:///raven.61375d9168165e89d174.bundle.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raven-js/src/configError.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raven-js/src/console.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raven-js/src/raven.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raven-js/src/singleton.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raven-js/src/utils.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raven-js/vendor/TraceKit/tracekit.js","webpack:////var/cache/omnibus/src/gitlab-rails/~/raven-js/vendor/json-stringify-safe/stringify.js","webpack:///./raven/index.js","webpack:///./raven/raven_config.js"],"names":["webpackJsonp","../../../node_modules/raven-js/src/configError.js","module","exports","__webpack_require__","RavenConfigError","message","this","name","prototype","Error","constructor","../../../node_modules/raven-js/src/console.js","wrapMethod","console","level","callback","originalConsoleLevel","originalConsole","sentryLevel","args","slice","call","arguments","msg","join","data","logger","extra","Function","apply","../../../node_modules/raven-js/src/raven.js","global","now","Date","Raven","_hasJSON","JSON","stringify","_hasDocument","isUndefined","_document","_hasNavigator","_navigator","_lastCapturedException","_lastData","_lastEventId","_globalServer","_globalKey","_globalProject","_globalContext","_globalOptions","ignoreErrors","ignoreUrls","whitelistUrls","includePaths","crossOrigin","collectWindowErrors","maxMessageLength","maxUrlLength","stackTraceLimit","autoBreadcrumbs","sampleRate","_ignoreOnError","_isRavenInstalled","_originalErrorStackTraceLimit","_originalConsole","_window","_originalConsoleMethods","_plugins","_startTime","_wrappedBuiltIns","_breadcrumbs","_lastCapturedEvent","_keypressTimeout","_location","location","_lastHref","href","_resetBackoff","method","what","isFunction","isString","objectPrototype","toString","isEmptyObject","_","each","obj","i","j","length","hasKey","objectMerge","obj1","obj2","key","value","truncate","str","max","substr","object","hasOwnProperty","joinRegExp","patterns","pattern","sources","len","push","replace","source","RegExp","urlencode","o","pairs","encodeURIComponent","parseUrl","url","match","query","fragment","protocol","host","path","relative","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","c","r","Math","random","htmlTreeAsString","elem","nextStr","out","height","sepLength","htmlElementAsString","parentNode","reverse","className","classes","attr","tagName","toLowerCase","id","split","attrWhitelist","getAttribute","isOnlyOneTruthy","a","b","isSameException","ex1","ex2","values","type","isSameStacktrace","stacktrace","stack1","stack2","frames1","frames","frames2","filename","lineno","colno","fill","replacement","track","orig","TraceKit","utils","isError","isObject","wrapConsoleMethod","dsnKeys","dsnPattern","window","self","document","navigator","VERSION","debug","config","dsn","options","_logDebug","globalOptions","setDSN","maxBreadcrumbs","min","autoBreadcrumbDefaults","xhr","dom","install","isSetup","report","subscribe","_handleOnErrorStackInfo","_instrumentTryCatch","_instrumentBreadcrumbs","_drainPlugins","uri","_parseDSN","lastSlash","lastIndexOf","_dsn","user","_globalSecret","pass","_getGlobalServer","_globalEndpoint","context","func","undefined","wrap","_before","wrapped","deep","e","_ignoreNextOnError","captureException","__raven__","__raven_wrapper__","property","__inner__","uninstall","_restoreBuiltIns","ex","captureMessage","trimHeadFrames","stack","computeStackTrace","_handleStackInfo","test","fingerprint","_prepareFrames","_send","captureBreadcrumb","crumb","timestamp","breadcrumbCallback","result","shift","addPlugin","plugin","pluginArgs","setUserContext","setExtraContext","_mergeContext","setTagsContext","tags","clearContext","getContext","parse","setEnvironment","environment","setRelease","release","setDataCallback","original","dataCallback","setBreadcrumbCallback","setShouldSendCallback","shouldSendCallback","setTransport","transport","lastException","lastEventId","ravenNotConfiguredError","afterLoad","RavenConfig","showReportDialog","eventId","encode","qs","email","globalServer","script","createElement","async","src","head","body","appendChild","setTimeout","_triggerEvent","eventType","evt","toUpperCase","createEvent","initEvent","createEventObject","dispatchEvent","fireEvent","_breadcrumbEventHandler","evtName","target","category","_keypressEventHandler","isContentEditable","timeout","clearTimeout","_captureUrlChange","from","to","parsedLoc","parsedTo","parsedFrom","wrapTimeFn","fn","t","Array","originalCallback","wrappedBuiltIns","requestAnimationFrame","cb","eventTargets","proto","capture","secure","handleEvent","err","before","clickHandler","keypressHandler","wrapProp","prop","xhrproto","XMLHttpRequest","origOpen","indexOf","__raven_xhr","status_code","origSend","onreadystatechangeHandler","readyState","status","props","onreadystatechange","origFetch","fetchData","then","response","addEventListener","attachEvent","chrome","isChromePackagedApp","app","runtime","hasPushState","history","pushState","oldOnPopState","onpopstate","currentHref","origPushState","log","consoleMethodCallback","builtin","installer","concat","m","exec","allowSecretKey","port","stackInfo","_processException","frame","_normalizeFrame","in_app","normalized","line","column","function","fileurl","exception","culprit","_trimPacket","request","Referer","breadcrumbs","_trimBreadcrumbs","urlprops","_getHttpData","httpData","userAgent","headers","User-Agent","referrer","_backoffDuration","_backoffStart","_shouldBackoff","_isRepeatData","current","last","_setBackoffState","retry","getResponseHeader","parseInt","baseData","project","platform","serverName","server_name","_sendProcessedPayload","_getUuid","event_id","allowDuplicates","auth","sentry_version","sentry_client","sentry_key","sentry_secret","_makeRequest","onSuccess","onError","error","opts","XDomainRequest","onload","onerror","open","send","Object","__DEV__","setUser","setReleaseContext","../../../node_modules/raven-js/src/singleton.js","RavenConstructor","_Raven","noConflict","../../../node_modules/raven-js/src/utils.js","../../../node_modules/raven-js/vendor/TraceKit/tracekit.js","getLocationHref","_slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","handler","installGlobalHandler","handlers","unsubscribe","splice","unsubscribeAll","uninstallGlobalHandler","notifyHandlers","isWindowError","inner","traceKitWindowOnError","lineNo","colNo","lastExceptionStack","augmentStackTraceWithInitialElement","processLastException","groups","_oldOnerrorHandler","_onErrorHandlerInstalled","_lastExceptionStack","_lastArgs","lastArgs","rethrow","incomplete","computeStackTraceFromStackProp","submatch","parts","element","gecko","winjs","geckoEval","chromeEval","lines","isNative","isEval","columnNumber","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","item","functionName","funcs","recursion","curr","caller","input","substring","sourceURL","fileName","lineNumber","description","../../../node_modules/raven-js/vendor/json-stringify-safe/stringify.js","haystack","needle","replacer","spaces","cycleReplacer","serializer","keys","thisPos","Infinity","getSerialize","./raven/index.js","__webpack_exports__","defineProperty","__WEBPACK_IMPORTED_MODULE_0__raven_config__","index","init","sentryDsn","gon","sentry_dsn","currentUserId","current_user_id","gitlab_url","isProduction","revision","./raven/raven_config.js","__WEBPACK_IMPORTED_MODULE_0_raven_js__","__WEBPACK_IMPORTED_MODULE_0_raven_js___default","n","__WEBPACK_IMPORTED_MODULE_1_jquery__","__WEBPACK_IMPORTED_MODULE_1_jquery___default","IGNORE_ERRORS","IGNORE_URLS","SAMPLE_RATE","configure","bindRavenErrors","shouldSendSample","bind","on","handleRavenErrors","event","req","statusText","responseText"],"mappings":"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","file":"raven.61375d9168165e89d174.bundle.js","sourcesContent":["webpackJsonp([\"raven\"],{\n\n/***/ \"../../../node_modules/raven-js/src/configError.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction RavenConfigError(message) {\n    this.name = 'RavenConfigError';\n    this.message = message;\n}\nRavenConfigError.prototype = new Error();\nRavenConfigError.prototype.constructor = RavenConfigError;\n\nmodule.exports = RavenConfigError;\n\n\n/***/ }),\n\n/***/ \"../../../node_modules/raven-js/src/console.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar wrapMethod = function(console, level, callback) {\n    var originalConsoleLevel = console[level];\n    var originalConsole = console;\n\n    if (!(level in console)) {\n        return;\n    }\n\n    var sentryLevel = level === 'warn'\n        ? 'warning'\n        : level;\n\n    console[level] = function () {\n        var args = [].slice.call(arguments);\n\n        var msg = '' + args.join(' ');\n        var data = {level: sentryLevel, logger: 'console', extra: {'arguments': args}};\n        callback && callback(msg, data);\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n            // IE9 doesn't allow calling apply on console functions directly\n            // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193\n            Function.prototype.apply.call(\n                originalConsoleLevel,\n                originalConsole,\n                args\n            );\n        }\n    };\n};\n\nmodule.exports = {\n    wrapMethod: wrapMethod\n};\n\n\n/***/ }),\n\n/***/ \"../../../node_modules/raven-js/src/raven.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*global XDomainRequest:false, __DEV__:false*/\n\n\nvar TraceKit = __webpack_require__(\"../../../node_modules/raven-js/vendor/TraceKit/tracekit.js\");\nvar stringify = __webpack_require__(\"../../../node_modules/raven-js/vendor/json-stringify-safe/stringify.js\");\nvar RavenConfigError = __webpack_require__(\"../../../node_modules/raven-js/src/configError.js\");\nvar utils = __webpack_require__(\"../../../node_modules/raven-js/src/utils.js\");\n\nvar isError = utils.isError,\n    isObject = utils.isObject;\n\nvar wrapConsoleMethod = __webpack_require__(\"../../../node_modules/raven-js/src/console.js\").wrapMethod;\n\nvar dsnKeys = 'source protocol user pass host port path'.split(' '),\n    dsnPattern = /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w\\.-]+)(?::(\\d+))?(\\/.*)/;\n\nfunction now() {\n    return +new Date();\n}\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window\n            : typeof global !== 'undefined' ? global\n            : typeof self !== 'undefined' ? self\n            : {};\nvar _document = _window.document;\nvar _navigator = _window.navigator;\n\n// First, check for JSON support\n// If there is no JSON, we no-op the core features of Raven\n// since JSON is required to encode the payload\nfunction Raven() {\n    this._hasJSON = !!(typeof JSON === 'object' && JSON.stringify);\n    // Raven can run in contexts where there's no document (react-native)\n    this._hasDocument = !isUndefined(_document);\n    this._hasNavigator = !isUndefined(_navigator);\n    this._lastCapturedException = null;\n    this._lastData = null;\n    this._lastEventId = null;\n    this._globalServer = null;\n    this._globalKey = null;\n    this._globalProject = null;\n    this._globalContext = {};\n    this._globalOptions = {\n        logger: 'javascript',\n        ignoreErrors: [],\n        ignoreUrls: [],\n        whitelistUrls: [],\n        includePaths: [],\n        crossOrigin: 'anonymous',\n        collectWindowErrors: true,\n        maxMessageLength: 0,\n\n        // By default, truncates URL values to 250 chars\n        maxUrlLength: 250,\n        stackTraceLimit: 50,\n        autoBreadcrumbs: true,\n        sampleRate: 1\n    };\n    this._ignoreOnError = 0;\n    this._isRavenInstalled = false;\n    this._originalErrorStackTraceLimit = Error.stackTraceLimit;\n    // capture references to window.console *and* all its methods first\n    // before the console plugin has a chance to monkey patch\n    this._originalConsole = _window.console || {};\n    this._originalConsoleMethods = {};\n    this._plugins = [];\n    this._startTime = now();\n    this._wrappedBuiltIns = [];\n    this._breadcrumbs = [];\n    this._lastCapturedEvent = null;\n    this._keypressTimeout;\n    this._location = _window.location;\n    this._lastHref = this._location && this._location.href;\n    this._resetBackoff();\n\n    for (var method in this._originalConsole) {  // eslint-disable-line guard-for-in\n      this._originalConsoleMethods[method] = this._originalConsole[method];\n    }\n}\n\n/*\n * The core Raven singleton\n *\n * @this {Raven}\n */\n\nRaven.prototype = {\n    // Hardcode version string so that raven source can be loaded directly via\n    // webpack (using a build step causes webpack #1617). Grunt verifies that\n    // this value matches package.json during build.\n    //   See: https://github.com/getsentry/raven-js/issues/465\n    VERSION: '3.14.0',\n\n    debug: false,\n\n    TraceKit: TraceKit, // alias to TraceKit\n\n    /*\n     * Configure Raven with a DSN and extra options\n     *\n     * @param {string} dsn The public Sentry DSN\n     * @param {object} options Optional set of of global options [optional]\n     * @return {Raven}\n     */\n    config: function(dsn, options) {\n        var self = this;\n\n        if (self._globalServer) {\n                this._logDebug('error', 'Error: Raven has already been configured');\n            return self;\n        }\n        if (!dsn) return self;\n\n        var globalOptions = self._globalOptions;\n\n        // merge in options\n        if (options) {\n            each(options, function(key, value){\n                // tags and extra are special and need to be put into context\n                if (key === 'tags' || key === 'extra' || key === 'user') {\n                    self._globalContext[key] = value;\n                } else {\n                    globalOptions[key] = value;\n                }\n            });\n        }\n\n        self.setDSN(dsn);\n\n        // \"Script error.\" is hard coded into browsers for errors that it can't read.\n        // this is the result of a script being pulled in from an external domain and CORS.\n        globalOptions.ignoreErrors.push(/^Script error\\.?$/);\n        globalOptions.ignoreErrors.push(/^Javascript error: Script error\\.? on line 0$/);\n\n        // join regexp rules into one big rule\n        globalOptions.ignoreErrors = joinRegExp(globalOptions.ignoreErrors);\n        globalOptions.ignoreUrls = globalOptions.ignoreUrls.length ? joinRegExp(globalOptions.ignoreUrls) : false;\n        globalOptions.whitelistUrls = globalOptions.whitelistUrls.length ? joinRegExp(globalOptions.whitelistUrls) : false;\n        globalOptions.includePaths = joinRegExp(globalOptions.includePaths);\n        globalOptions.maxBreadcrumbs = Math.max(0, Math.min(globalOptions.maxBreadcrumbs || 100, 100)); // default and hard limit is 100\n\n        var autoBreadcrumbDefaults = {\n            xhr: true,\n            console: true,\n            dom: true,\n            location: true\n        };\n\n        var autoBreadcrumbs = globalOptions.autoBreadcrumbs;\n        if ({}.toString.call(autoBreadcrumbs) === '[object Object]') {\n            autoBreadcrumbs = objectMerge(autoBreadcrumbDefaults, autoBreadcrumbs);\n        } else if (autoBreadcrumbs !== false) {\n            autoBreadcrumbs = autoBreadcrumbDefaults;\n        }\n        globalOptions.autoBreadcrumbs = autoBreadcrumbs;\n\n        TraceKit.collectWindowErrors = !!globalOptions.collectWindowErrors;\n\n        // return for chaining\n        return self;\n    },\n\n    /*\n     * Installs a global window.onerror error handler\n     * to capture and report uncaught exceptions.\n     * At this point, install() is required to be called due\n     * to the way TraceKit is set up.\n     *\n     * @return {Raven}\n     */\n    install: function() {\n        var self = this;\n        if (self.isSetup() && !self._isRavenInstalled) {\n            TraceKit.report.subscribe(function () {\n                self._handleOnErrorStackInfo.apply(self, arguments);\n            });\n            self._instrumentTryCatch();\n            if (self._globalOptions.autoBreadcrumbs)\n                self._instrumentBreadcrumbs();\n\n            // Install all of the plugins\n            self._drainPlugins();\n\n            self._isRavenInstalled = true;\n        }\n\n        Error.stackTraceLimit = self._globalOptions.stackTraceLimit;\n        return this;\n    },\n\n    /*\n     * Set the DSN (can be called multiple time unlike config)\n     *\n     * @param {string} dsn The public Sentry DSN\n     */\n    setDSN: function(dsn) {\n        var self = this,\n            uri = self._parseDSN(dsn),\n          lastSlash = uri.path.lastIndexOf('/'),\n          path = uri.path.substr(1, lastSlash);\n\n        self._dsn = dsn;\n        self._globalKey = uri.user;\n        self._globalSecret = uri.pass && uri.pass.substr(1);\n        self._globalProject = uri.path.substr(lastSlash + 1);\n\n        self._globalServer = self._getGlobalServer(uri);\n\n        self._globalEndpoint = self._globalServer +\n            '/' + path + 'api/' + self._globalProject + '/store/';\n\n        // Reset backoff state since we may be pointing at a\n        // new project/server\n        this._resetBackoff();\n    },\n\n    /*\n     * Wrap code within a context so Raven can capture errors\n     * reliably across domains that is executed immediately.\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The callback to be immediately executed within the context\n     * @param {array} args An array of arguments to be called with the callback [optional]\n     */\n    context: function(options, func, args) {\n        if (isFunction(options)) {\n            args = func || [];\n            func = options;\n            options = undefined;\n        }\n\n        return this.wrap(options, func).apply(this, args);\n    },\n\n    /*\n     * Wrap code within a context and returns back a new function to be executed\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The function to be wrapped in a new context\n     * @param {function} func A function to call before the try/catch wrapper [optional, private]\n     * @return {function} The newly wrapped functions with a context\n     */\n    wrap: function(options, func, _before) {\n        var self = this;\n        // 1 argument has been passed, and it's not a function\n        // so just return it\n        if (isUndefined(func) && !isFunction(options)) {\n            return options;\n        }\n\n        // options is optional\n        if (isFunction(options)) {\n            func = options;\n            options = undefined;\n        }\n\n        // At this point, we've passed along 2 arguments, and the second one\n        // is not a function either, so we'll just return the second argument.\n        if (!isFunction(func)) {\n            return func;\n        }\n\n        // We don't wanna wrap it twice!\n        try {\n            if (func.__raven__) {\n                return func;\n            }\n\n            // If this has already been wrapped in the past, return that\n            if (func.__raven_wrapper__ ){\n                return func.__raven_wrapper__ ;\n            }\n        } catch (e) {\n            // Just accessing custom props in some Selenium environments\n            // can cause a \"Permission denied\" exception (see raven-js#495).\n            // Bail on wrapping and return the function as-is (defers to window.onerror).\n            return func;\n        }\n\n        function wrapped() {\n            var args = [], i = arguments.length,\n                deep = !options || options && options.deep !== false;\n\n            if (_before && isFunction(_before)) {\n                _before.apply(this, arguments);\n            }\n\n            // Recursively wrap all of a function's arguments that are\n            // functions themselves.\n            while(i--) args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n\n            try {\n                // Attempt to invoke user-land function\n                // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n                //       means Raven caught an error invoking your application code. This is\n                //       expected behavior and NOT indicative of a bug with Raven.js.\n                return func.apply(this, args);\n            } catch(e) {\n                self._ignoreNextOnError();\n                self.captureException(e, options);\n                throw e;\n            }\n        }\n\n        // copy over properties of the old function\n        for (var property in func) {\n            if (hasKey(func, property)) {\n                wrapped[property] = func[property];\n            }\n        }\n        wrapped.prototype = func.prototype;\n\n        func.__raven_wrapper__ = wrapped;\n        // Signal that this function has been wrapped already\n        // for both debugging and to prevent it to being wrapped twice\n        wrapped.__raven__ = true;\n        wrapped.__inner__ = func;\n\n        return wrapped;\n    },\n\n    /*\n     * Uninstalls the global error handler.\n     *\n     * @return {Raven}\n     */\n    uninstall: function() {\n        TraceKit.report.uninstall();\n\n        this._restoreBuiltIns();\n\n        Error.stackTraceLimit = this._originalErrorStackTraceLimit;\n        this._isRavenInstalled = false;\n\n        return this;\n    },\n\n    /*\n     * Manually capture an exception and send it over to Sentry\n     *\n     * @param {error} ex An exception to be logged\n     * @param {object} options A specific set of options for this error [optional]\n     * @return {Raven}\n     */\n    captureException: function(ex, options) {\n        // If not an Error is passed through, recall as a message instead\n        if (!isError(ex)) {\n            return this.captureMessage(ex, objectMerge({\n                trimHeadFrames: 1,\n                stacktrace: true // if we fall back to captureMessage, default to attempting a new trace\n            }, options));\n        }\n\n        // Store the raw exception object for potential debugging and introspection\n        this._lastCapturedException = ex;\n\n        // TraceKit.report will re-raise any exception passed to it,\n        // which means you have to wrap it in try/catch. Instead, we\n        // can wrap it here and only re-raise if TraceKit.report\n        // raises an exception different from the one we asked to\n        // report on.\n        try {\n            var stack = TraceKit.computeStackTrace(ex);\n            this._handleStackInfo(stack, options);\n        } catch(ex1) {\n            if(ex !== ex1) {\n                throw ex1;\n            }\n        }\n\n        return this;\n    },\n\n    /*\n     * Manually send a message to Sentry\n     *\n     * @param {string} msg A plain message to be captured in Sentry\n     * @param {object} options A specific set of options for this message [optional]\n     * @return {Raven}\n     */\n    captureMessage: function(msg, options) {\n        // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an\n        // early call; we'll error on the side of logging anything called before configuration since it's\n        // probably something you should see:\n        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(msg)) {\n            return;\n        }\n\n        options = options || {};\n\n        var data = objectMerge({\n            message: msg + ''  // Make sure it's actually a string\n        }, options);\n\n        if (this._globalOptions.stacktrace || (options && options.stacktrace)) {\n            var ex;\n            // Generate a \"synthetic\" stack trace from this point.\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it is NOT indicative\n            //       of a bug with Raven.js. Sentry generates synthetic traces either by configuration,\n            //       or if it catches a thrown object without a \"stack\" property.\n            try {\n                throw new Error(msg);\n            } catch (ex1) {\n                ex = ex1;\n            }\n\n            // null exception name so `Error` isn't prefixed to msg\n            ex.name = null;\n\n            options = objectMerge({\n                // fingerprint on msg, not stack trace (legacy behavior, could be\n                // revisited)\n                fingerprint: msg,\n                // since we know this is a synthetic trace, the top N-most frames\n                // MUST be from Raven.js, so mark them as in_app later by setting\n                // trimHeadFrames\n                trimHeadFrames: (options.trimHeadFrames || 0) + 1\n            }, options);\n\n            var stack = TraceKit.computeStackTrace(ex);\n            var frames = this._prepareFrames(stack, options);\n            data.stacktrace = {\n                // Sentry expects frames oldest to newest\n                frames: frames.reverse()\n            }\n        }\n\n        // Fire away!\n        this._send(data);\n\n        return this;\n    },\n\n    captureBreadcrumb: function (obj) {\n        var crumb = objectMerge({\n            timestamp: now() / 1000\n        }, obj);\n\n        if (isFunction(this._globalOptions.breadcrumbCallback)) {\n            var result = this._globalOptions.breadcrumbCallback(crumb);\n\n            if (isObject(result) && !isEmptyObject(result)) {\n                crumb = result;\n            } else if (result === false) {\n                return this;\n            }\n        }\n\n        this._breadcrumbs.push(crumb);\n        if (this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) {\n            this._breadcrumbs.shift();\n        }\n        return this;\n    },\n\n    addPlugin: function(plugin /*arg1, arg2, ... argN*/) {\n        var pluginArgs = [].slice.call(arguments, 1);\n\n        this._plugins.push([plugin, pluginArgs]);\n        if (this._isRavenInstalled) {\n            this._drainPlugins();\n        }\n\n        return this;\n    },\n\n    /*\n     * Set/clear a user to be sent along with the payload.\n     *\n     * @param {object} user An object representing user data [optional]\n     * @return {Raven}\n     */\n    setUserContext: function(user) {\n        // Intentionally do not merge here since that's an unexpected behavior.\n        this._globalContext.user = user;\n\n        return this;\n    },\n\n    /*\n     * Merge extra attributes to be sent along with the payload.\n     *\n     * @param {object} extra An object representing extra data [optional]\n     * @return {Raven}\n     */\n    setExtraContext: function(extra) {\n        this._mergeContext('extra', extra);\n\n        return this;\n    },\n\n    /*\n     * Merge tags to be sent along with the payload.\n     *\n     * @param {object} tags An object representing tags [optional]\n     * @return {Raven}\n     */\n    setTagsContext: function(tags) {\n        this._mergeContext('tags', tags);\n\n        return this;\n    },\n\n    /*\n     * Clear all of the context.\n     *\n     * @return {Raven}\n     */\n    clearContext: function() {\n        this._globalContext = {};\n\n        return this;\n    },\n\n    /*\n     * Get a copy of the current context. This cannot be mutated.\n     *\n     * @return {object} copy of context\n     */\n    getContext: function() {\n        // lol javascript\n        return JSON.parse(stringify(this._globalContext));\n    },\n\n\n    /*\n     * Set environment of application\n     *\n     * @param {string} environment Typically something like 'production'.\n     * @return {Raven}\n     */\n    setEnvironment: function(environment) {\n        this._globalOptions.environment = environment;\n\n        return this;\n    },\n\n    /*\n     * Set release version of application\n     *\n     * @param {string} release Typically something like a git SHA to identify version\n     * @return {Raven}\n     */\n    setRelease: function(release) {\n        this._globalOptions.release = release;\n\n        return this;\n    },\n\n    /*\n     * Set the dataCallback option\n     *\n     * @param {function} callback The callback to run which allows the\n     *                            data blob to be mutated before sending\n     * @return {Raven}\n     */\n    setDataCallback: function(callback) {\n        var original = this._globalOptions.dataCallback;\n        this._globalOptions.dataCallback = isFunction(callback)\n          ? function (data) { return callback(data, original); }\n          : callback;\n\n        return this;\n    },\n\n    /*\n     * Set the breadcrumbCallback option\n     *\n     * @param {function} callback The callback to run which allows filtering\n     *                            or mutating breadcrumbs\n     * @return {Raven}\n     */\n    setBreadcrumbCallback: function(callback) {\n        var original = this._globalOptions.breadcrumbCallback;\n        this._globalOptions.breadcrumbCallback = isFunction(callback)\n          ? function (data) { return callback(data, original); }\n          : callback;\n\n        return this;\n    },\n\n    /*\n     * Set the shouldSendCallback option\n     *\n     * @param {function} callback The callback to run which allows\n     *                            introspecting the blob before sending\n     * @return {Raven}\n     */\n    setShouldSendCallback: function(callback) {\n        var original = this._globalOptions.shouldSendCallback;\n        this._globalOptions.shouldSendCallback = isFunction(callback)\n            ? function (data) { return callback(data, original); }\n            : callback;\n\n        return this;\n    },\n\n    /**\n     * Override the default HTTP transport mechanism that transmits data\n     * to the Sentry server.\n     *\n     * @param {function} transport Function invoked instead of the default\n     *                             `makeRequest` handler.\n     *\n     * @return {Raven}\n     */\n    setTransport: function(transport) {\n        this._globalOptions.transport = transport;\n\n        return this;\n    },\n\n    /*\n     * Get the latest raw exception that was captured by Raven.\n     *\n     * @return {error}\n     */\n    lastException: function() {\n        return this._lastCapturedException;\n    },\n\n    /*\n     * Get the last event id\n     *\n     * @return {string}\n     */\n    lastEventId: function() {\n        return this._lastEventId;\n    },\n\n    /*\n     * Determine if Raven is setup and ready to go.\n     *\n     * @return {boolean}\n     */\n    isSetup: function() {\n        if (!this._hasJSON) return false;  // needs JSON support\n        if (!this._globalServer) {\n            if (!this.ravenNotConfiguredError) {\n              this.ravenNotConfiguredError = true;\n              this._logDebug('error', 'Error: Raven has not been configured.');\n            }\n            return false;\n        }\n        return true;\n    },\n\n    afterLoad: function () {\n        // TODO: remove window dependence?\n\n        // Attempt to initialize Raven on load\n        var RavenConfig = _window.RavenConfig;\n        if (RavenConfig) {\n            this.config(RavenConfig.dsn, RavenConfig.config).install();\n        }\n    },\n\n    showReportDialog: function (options) {\n        if (!_document) // doesn't work without a document (React native)\n            return;\n\n        options = options || {};\n\n        var lastEventId = options.eventId || this.lastEventId();\n        if (!lastEventId) {\n            throw new RavenConfigError('Missing eventId');\n        }\n\n        var dsn = options.dsn || this._dsn;\n        if (!dsn) {\n            throw new RavenConfigError('Missing DSN');\n        }\n\n        var encode = encodeURIComponent;\n        var qs = '';\n        qs += '?eventId=' + encode(lastEventId);\n        qs += '&dsn=' + encode(dsn);\n\n        var user = options.user || this._globalContext.user;\n        if (user) {\n            if (user.name)  qs += '&name=' + encode(user.name);\n            if (user.email) qs += '&email=' + encode(user.email);\n        }\n\n        var globalServer = this._getGlobalServer(this._parseDSN(dsn));\n\n        var script = _document.createElement('script');\n        script.async = true;\n        script.src = globalServer + '/api/embed/error-page/' + qs;\n        (_document.head || _document.body).appendChild(script);\n    },\n\n    /**** Private functions ****/\n    _ignoreNextOnError: function () {\n        var self = this;\n        this._ignoreOnError += 1;\n        setTimeout(function () {\n            // onerror should trigger before setTimeout\n            self._ignoreOnError -= 1;\n        });\n    },\n\n    _triggerEvent: function(eventType, options) {\n        // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it\n        var evt, key;\n\n        if (!this._hasDocument)\n            return;\n\n        options = options || {};\n\n        eventType = 'raven' + eventType.substr(0,1).toUpperCase() + eventType.substr(1);\n\n        if (_document.createEvent) {\n            evt = _document.createEvent('HTMLEvents');\n            evt.initEvent(eventType, true, true);\n        } else {\n            evt = _document.createEventObject();\n            evt.eventType = eventType;\n        }\n\n        for (key in options) if (hasKey(options, key)) {\n            evt[key] = options[key];\n        }\n\n        if (_document.createEvent) {\n            // IE9 if standards\n            _document.dispatchEvent(evt);\n        } else {\n            // IE8 regardless of Quirks or Standards\n            // IE9 if quirks\n            try {\n                _document.fireEvent('on' + evt.eventType.toLowerCase(), evt);\n            } catch(e) {\n                // Do nothing\n            }\n        }\n    },\n\n    /**\n     * Wraps addEventListener to capture UI breadcrumbs\n     * @param evtName the event name (e.g. \"click\")\n     * @returns {Function}\n     * @private\n     */\n    _breadcrumbEventHandler: function(evtName) {\n        var self = this;\n        return function (evt) {\n            // reset keypress timeout; e.g. triggering a 'click' after\n            // a 'keypress' will reset the keypress debounce so that a new\n            // set of keypresses can be recorded\n            self._keypressTimeout = null;\n\n            // It's possible this handler might trigger multiple times for the same\n            // event (e.g. event propagation through node ancestors). Ignore if we've\n            // already captured the event.\n            if (self._lastCapturedEvent === evt)\n                return;\n\n            self._lastCapturedEvent = evt;\n\n            // try/catch both:\n            // - accessing evt.target (see getsentry/raven-js#838, #768)\n            // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n            //   can throw an exception in some circumstances.\n            var target;\n            try {\n                target = htmlTreeAsString(evt.target);\n            } catch (e) {\n                target = '<unknown>';\n            }\n\n            self.captureBreadcrumb({\n                category: 'ui.' + evtName, // e.g. ui.click, ui.input\n                message: target\n            });\n        };\n    },\n\n    /**\n     * Wraps addEventListener to capture keypress UI events\n     * @returns {Function}\n     * @private\n     */\n    _keypressEventHandler: function() {\n        var self = this,\n            debounceDuration = 1000; // milliseconds\n\n        // TODO: if somehow user switches keypress target before\n        //       debounce timeout is triggered, we will only capture\n        //       a single breadcrumb from the FIRST target (acceptable?)\n        return function (evt) {\n            var target;\n            try {\n                target = evt.target;\n            } catch (e) {\n                // just accessing event properties can throw an exception in some rare circumstances\n                // see: https://github.com/getsentry/raven-js/issues/838\n                return;\n            }\n            var tagName = target && target.tagName;\n\n            // only consider keypress events on actual input elements\n            // this will disregard keypresses targeting body (e.g. tabbing\n            // through elements, hotkeys, etc)\n            if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable)\n                return;\n\n            // record first keypress in a series, but ignore subsequent\n            // keypresses until debounce clears\n            var timeout = self._keypressTimeout;\n            if (!timeout) {\n                self._breadcrumbEventHandler('input')(evt);\n            }\n            clearTimeout(timeout);\n            self._keypressTimeout = setTimeout(function () {\n                self._keypressTimeout = null;\n            }, debounceDuration);\n        };\n    },\n\n    /**\n     * Captures a breadcrumb of type \"navigation\", normalizing input URLs\n     * @param to the originating URL\n     * @param from the target URL\n     * @private\n     */\n    _captureUrlChange: function(from, to) {\n        var parsedLoc = parseUrl(this._location.href);\n        var parsedTo = parseUrl(to);\n        var parsedFrom = parseUrl(from);\n\n        // because onpopstate only tells you the \"new\" (to) value of location.href, and\n        // not the previous (from) value, we need to track the value of the current URL\n        // state ourselves\n        this._lastHref = to;\n\n        // Use only the path component of the URL if the URL matches the current\n        // document (almost all the time when using pushState)\n        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host)\n            to = parsedTo.relative;\n        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host)\n            from = parsedFrom.relative;\n\n        this.captureBreadcrumb({\n            category: 'navigation',\n            data: {\n                to: to,\n                from: from\n            }\n        });\n    },\n\n    /**\n     * Install any queued plugins\n     */\n    _instrumentTryCatch: function() {\n        var self = this;\n\n        var wrappedBuiltIns = self._wrappedBuiltIns;\n\n        function wrapTimeFn(orig) {\n            return function (fn, t) { // preserve arity\n                // Make a copy of the arguments to prevent deoptimization\n                // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n                var args = new Array(arguments.length);\n                for(var i = 0; i < args.length; ++i) {\n                    args[i] = arguments[i];\n                }\n                var originalCallback = args[0];\n                if (isFunction(originalCallback)) {\n                    args[0] = self.wrap(originalCallback);\n                }\n\n                // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n                // also supports only two arguments and doesn't care what this is, so we\n                // can just call the original function directly.\n                if (orig.apply) {\n                    return orig.apply(this, args);\n                } else {\n                    return orig(args[0], args[1]);\n                }\n            };\n        }\n\n        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n        function wrapEventTarget(global) {\n            var proto = _window[global] && _window[global].prototype;\n            if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n                fill(proto, 'addEventListener', function(orig) {\n                    return function (evtName, fn, capture, secure) { // preserve arity\n                        try {\n                            if (fn && fn.handleEvent) {\n                                fn.handleEvent = self.wrap(fn.handleEvent);\n                            }\n                        } catch (err) {\n                            // can sometimes get 'Permission denied to access property \"handle Event'\n                        }\n\n                        // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n                        // so that we don't have more than one wrapper function\n                        var before,\n                            clickHandler,\n                            keypressHandler;\n\n                        if (autoBreadcrumbs && autoBreadcrumbs.dom && (global === 'EventTarget' || global === 'Node')) {\n                            // NOTE: generating multiple handlers per addEventListener invocation, should\n                            //       revisit and verify we can just use one (almost certainly)\n                            clickHandler = self._breadcrumbEventHandler('click');\n                            keypressHandler = self._keypressEventHandler();\n                            before = function (evt) {\n                                // need to intercept every DOM event in `before` argument, in case that\n                                // same wrapped method is re-used for different events (e.g. mousemove THEN click)\n                                // see #724\n                                if (!evt) return;\n\n                                var eventType;\n                                try {\n                                    eventType = evt.type\n                                } catch (e) {\n                                    // just accessing event properties can throw an exception in some rare circumstances\n                                    // see: https://github.com/getsentry/raven-js/issues/838\n                                    return;\n                                }\n                                if (eventType === 'click')\n                                    return clickHandler(evt);\n                                else if (eventType === 'keypress')\n                                    return keypressHandler(evt);\n                            };\n                        }\n                        return orig.call(this, evtName, self.wrap(fn, undefined, before), capture, secure);\n                    };\n                }, wrappedBuiltIns);\n                fill(proto, 'removeEventListener', function (orig) {\n                    return function (evt, fn, capture, secure) {\n                        try {\n                            fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__  : fn);\n                        } catch (e) {\n                            // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n                        }\n                        return orig.call(this, evt, fn, capture, secure);\n                    };\n                }, wrappedBuiltIns);\n            }\n        }\n\n        fill(_window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n        fill(_window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n        if (_window.requestAnimationFrame) {\n            fill(_window, 'requestAnimationFrame', function (orig) {\n                return function (cb) {\n                    return orig(self.wrap(cb));\n                };\n            }, wrappedBuiltIns);\n        }\n\n        // event targets borrowed from bugsnag-js:\n        // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n        var eventTargets = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n        for (var i = 0; i < eventTargets.length; i++) {\n            wrapEventTarget(eventTargets[i]);\n        }\n    },\n\n\n    /**\n     * Instrument browser built-ins w/ breadcrumb capturing\n     *  - XMLHttpRequests\n     *  - DOM interactions (click/typing)\n     *  - window.location changes\n     *  - console\n     *\n     * Can be disabled or individually configured via the `autoBreadcrumbs` config option\n     */\n    _instrumentBreadcrumbs: function () {\n        var self = this;\n        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n        var wrappedBuiltIns = self._wrappedBuiltIns;\n\n        function wrapProp(prop, xhr) {\n            if (prop in xhr && isFunction(xhr[prop])) {\n                fill(xhr, prop, function (orig) {\n                    return self.wrap(orig);\n                }); // intentionally don't track filled methods on XHR instances\n            }\n        }\n\n        if (autoBreadcrumbs.xhr && 'XMLHttpRequest' in _window) {\n            var xhrproto = XMLHttpRequest.prototype;\n            fill(xhrproto, 'open', function(origOpen) {\n                return function (method, url) { // preserve arity\n\n                    // if Sentry key appears in URL, don't capture\n                    if (isString(url) && url.indexOf(self._globalKey) === -1) {\n                        this.__raven_xhr = {\n                            method: method,\n                            url: url,\n                            status_code: null\n                        };\n                    }\n\n                    return origOpen.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n\n            fill(xhrproto, 'send', function(origSend) {\n                return function (data) { // preserve arity\n                    var xhr = this;\n\n                    function onreadystatechangeHandler() {\n                        if (xhr.__raven_xhr && (xhr.readyState === 1 || xhr.readyState === 4)) {\n                            try {\n                                // touching statusCode in some platforms throws\n                                // an exception\n                                xhr.__raven_xhr.status_code = xhr.status;\n                            } catch (e) { /* do nothing */ }\n                            self.captureBreadcrumb({\n                                type: 'http',\n                                category: 'xhr',\n                                data: xhr.__raven_xhr\n                            });\n                        }\n                    }\n\n                    var props = ['onload', 'onerror', 'onprogress'];\n                    for (var j = 0; j < props.length; j++) {\n                        wrapProp(props[j], xhr);\n                    }\n\n                    if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {\n                        fill(xhr, 'onreadystatechange', function (orig) {\n                            return self.wrap(orig, undefined, onreadystatechangeHandler);\n                        } /* intentionally don't track this instrumentation */);\n                    } else {\n                        // if onreadystatechange wasn't actually set by the page on this xhr, we\n                        // are free to set our own and capture the breadcrumb\n                        xhr.onreadystatechange = onreadystatechangeHandler;\n                    }\n\n                    return origSend.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n        }\n\n        if (autoBreadcrumbs.xhr && 'fetch' in _window) {\n            fill(_window, 'fetch', function(origFetch) {\n                return function (fn, t) { // preserve arity\n                    // Make a copy of the arguments to prevent deoptimization\n                    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n                    var args = new Array(arguments.length);\n                    for(var i = 0; i < args.length; ++i) {\n                        args[i] = arguments[i];\n                    }\n\n                    var method = 'GET';\n\n                    if (args[1] && args[1].method) {\n                        method = args[1].method;\n                    }\n\n                    var fetchData = {\n                        method: method,\n                        url: args[0],\n                        status_code: null\n                    };\n\n                    self.captureBreadcrumb({\n                        type: 'http',\n                        category: 'fetch',\n                        data: fetchData\n                    });\n\n                    return origFetch.apply(this, args).then(function (response) {\n                        fetchData.status_code = response.status;\n\n                        return response;\n                    });\n                };\n            }, wrappedBuiltIns);\n        }\n\n        // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n        // to the document. Do this before we instrument addEventListener.\n        if (autoBreadcrumbs.dom && this._hasDocument) {\n            if (_document.addEventListener) {\n                _document.addEventListener('click', self._breadcrumbEventHandler('click'), false);\n                _document.addEventListener('keypress', self._keypressEventHandler(), false);\n            }\n            else {\n                // IE8 Compatibility\n                _document.attachEvent('onclick', self._breadcrumbEventHandler('click'));\n                _document.attachEvent('onkeypress', self._keypressEventHandler());\n            }\n        }\n\n        // record navigation (URL) changes\n        // NOTE: in Chrome App environment, touching history.pushState, *even inside\n        //       a try/catch block*, will cause Chrome to output an error to console.error\n        // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n        var chrome = _window.chrome;\n        var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n        var hasPushState = !isChromePackagedApp && _window.history && history.pushState;\n        if (autoBreadcrumbs.location && hasPushState) {\n            // TODO: remove onpopstate handler on uninstall()\n            var oldOnPopState = _window.onpopstate;\n            _window.onpopstate = function () {\n                var currentHref = self._location.href;\n                self._captureUrlChange(self._lastHref, currentHref);\n\n                if (oldOnPopState) {\n                    return oldOnPopState.apply(this, arguments);\n                }\n            };\n\n            fill(history, 'pushState', function (origPushState) {\n                // note history.pushState.length is 0; intentionally not declaring\n                // params to preserve 0 arity\n                return function (/* state, title, url */) {\n                    var url = arguments.length > 2 ? arguments[2] : undefined;\n\n                    // url argument is optional\n                    if (url) {\n                        // coerce to string (this is what pushState does)\n                        self._captureUrlChange(self._lastHref, url + '');\n                    }\n\n                    return origPushState.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n        }\n\n        if (autoBreadcrumbs.console && 'console' in _window && console.log) {\n            // console\n            var consoleMethodCallback = function (msg, data) {\n                self.captureBreadcrumb({\n                    message: msg,\n                    level: data.level,\n                    category: 'console'\n                });\n            };\n\n            each(['debug', 'info', 'warn', 'error', 'log'], function (_, level) {\n                wrapConsoleMethod(console, level, consoleMethodCallback);\n            });\n        }\n\n    },\n\n    _restoreBuiltIns: function () {\n        // restore any wrapped builtins\n        var builtin;\n        while (this._wrappedBuiltIns.length) {\n            builtin = this._wrappedBuiltIns.shift();\n\n            var obj = builtin[0],\n              name = builtin[1],\n              orig = builtin[2];\n\n            obj[name] = orig;\n        }\n    },\n\n    _drainPlugins: function() {\n        var self = this;\n\n        // FIX ME TODO\n        each(this._plugins, function(_, plugin) {\n            var installer = plugin[0];\n            var args = plugin[1];\n            installer.apply(self, [self].concat(args));\n        });\n    },\n\n    _parseDSN: function(str) {\n        var m = dsnPattern.exec(str),\n            dsn = {},\n            i = 7;\n\n        try {\n            while (i--) dsn[dsnKeys[i]] = m[i] || '';\n        } catch(e) {\n            throw new RavenConfigError('Invalid DSN: ' + str);\n        }\n\n        if (dsn.pass && !this._globalOptions.allowSecretKey) {\n            throw new RavenConfigError('Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key');\n        }\n\n        return dsn;\n    },\n\n    _getGlobalServer: function(uri) {\n        // assemble the endpoint from the uri pieces\n        var globalServer = '//' + uri.host +\n            (uri.port ? ':' + uri.port : '');\n\n        if (uri.protocol) {\n            globalServer = uri.protocol + ':' + globalServer;\n        }\n        return globalServer;\n    },\n\n    _handleOnErrorStackInfo: function() {\n        // if we are intentionally ignoring errors via onerror, bail out\n        if (!this._ignoreOnError) {\n            this._handleStackInfo.apply(this, arguments);\n        }\n    },\n\n    _handleStackInfo: function(stackInfo, options) {\n        var frames = this._prepareFrames(stackInfo, options);\n\n        this._triggerEvent('handle', {\n            stackInfo: stackInfo,\n            options: options\n        });\n\n        this._processException(\n            stackInfo.name,\n            stackInfo.message,\n            stackInfo.url,\n            stackInfo.lineno,\n            frames,\n            options\n        );\n    },\n\n    _prepareFrames: function(stackInfo, options) {\n        var self = this;\n        var frames = [];\n        if (stackInfo.stack && stackInfo.stack.length) {\n            each(stackInfo.stack, function(i, stack) {\n                var frame = self._normalizeFrame(stack);\n                if (frame) {\n                    frames.push(frame);\n                }\n            });\n\n            // e.g. frames captured via captureMessage throw\n            if (options && options.trimHeadFrames) {\n                for (var j = 0; j < options.trimHeadFrames && j < frames.length; j++) {\n                    frames[j].in_app = false;\n                }\n            }\n        }\n        frames = frames.slice(0, this._globalOptions.stackTraceLimit);\n        return frames;\n    },\n\n\n    _normalizeFrame: function(frame) {\n        if (!frame.url) return;\n\n        // normalize the frames data\n        var normalized = {\n            filename:   frame.url,\n            lineno:     frame.line,\n            colno:      frame.column,\n            'function': frame.func || '?'\n        };\n\n        normalized.in_app = !( // determine if an exception came from outside of our app\n            // first we check the global includePaths list.\n            !!this._globalOptions.includePaths.test && !this._globalOptions.includePaths.test(normalized.filename) ||\n            // Now we check for fun, if the function name is Raven or TraceKit\n            /(Raven|TraceKit)\\./.test(normalized['function']) ||\n            // finally, we do a last ditch effort and check for raven.min.js\n            /raven\\.(min\\.)?js$/.test(normalized.filename)\n        );\n\n        return normalized;\n    },\n\n    _processException: function(type, message, fileurl, lineno, frames, options) {\n        var stacktrace;\n        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(message)) return;\n\n        message += '';\n\n        if (frames && frames.length) {\n            fileurl = frames[0].filename || fileurl;\n            // Sentry expects frames oldest to newest\n            // and JS sends them as newest to oldest\n            frames.reverse();\n            stacktrace = {frames: frames};\n        } else if (fileurl) {\n            stacktrace = {\n                frames: [{\n                    filename: fileurl,\n                    lineno: lineno,\n                    in_app: true\n                }]\n            };\n        }\n\n        if (!!this._globalOptions.ignoreUrls.test && this._globalOptions.ignoreUrls.test(fileurl)) return;\n        if (!!this._globalOptions.whitelistUrls.test && !this._globalOptions.whitelistUrls.test(fileurl)) return;\n\n        var data = objectMerge({\n            // sentry.interfaces.Exception\n            exception: {\n                values: [{\n                    type: type,\n                    value: message,\n                    stacktrace: stacktrace\n                }]\n            },\n            culprit: fileurl\n        }, options);\n\n        // Fire away!\n        this._send(data);\n    },\n\n    _trimPacket: function(data) {\n        // For now, we only want to truncate the two different messages\n        // but this could/should be expanded to just trim everything\n        var max = this._globalOptions.maxMessageLength;\n        if (data.message) {\n            data.message = truncate(data.message, max);\n        }\n        if (data.exception) {\n            var exception = data.exception.values[0];\n            exception.value = truncate(exception.value, max);\n        }\n\n        var request = data.request;\n        if (request) {\n            if (request.url) {\n                request.url = truncate(request.url, this._globalOptions.maxUrlLength);\n            }\n            if (request.Referer) {\n                request.Referer = truncate(request.Referer, this._globalOptions.maxUrlLength);\n            }\n        }\n\n        if (data.breadcrumbs && data.breadcrumbs.values)\n            this._trimBreadcrumbs(data.breadcrumbs);\n\n        return data;\n    },\n\n    /**\n     * Truncate breadcrumb values (right now just URLs)\n     */\n    _trimBreadcrumbs: function (breadcrumbs) {\n        // known breadcrumb properties with urls\n        // TODO: also consider arbitrary prop values that start with (https?)?://\n        var urlprops = {to: 1, from: 1, url: 1},\n            crumb,\n            data;\n\n        for (var i = 0; i < breadcrumbs.values.length; i++) {\n            crumb = breadcrumbs.values[i];\n            if (!crumb.hasOwnProperty('data'))\n                continue;\n\n            data = crumb.data;\n            for (var prop in urlprops) {\n                if (data.hasOwnProperty(prop)) {\n                    data[prop] = truncate(data[prop], this._globalOptions.maxUrlLength);\n                }\n            }\n        }\n    },\n\n    _getHttpData: function() {\n        if (!this._hasNavigator && !this._hasDocument) return;\n        var httpData = {};\n\n        if (this._hasNavigator && _navigator.userAgent) {\n            httpData.headers = {\n              'User-Agent': navigator.userAgent\n            };\n        }\n\n        if (this._hasDocument) {\n            if (_document.location && _document.location.href) {\n                httpData.url = _document.location.href;\n            }\n            if (_document.referrer) {\n                if (!httpData.headers) httpData.headers = {};\n                httpData.headers.Referer = _document.referrer;\n            }\n        }\n\n        return httpData;\n    },\n\n    _resetBackoff: function() {\n        this._backoffDuration = 0;\n        this._backoffStart = null;\n    },\n\n    _shouldBackoff: function() {\n        return this._backoffDuration && now() - this._backoffStart < this._backoffDuration;\n    },\n\n    /**\n     * Returns true if the in-process data payload matches the signature\n     * of the previously-sent data\n     *\n     * NOTE: This has to be done at this level because TraceKit can generate\n     *       data from window.onerror WITHOUT an exception object (IE8, IE9,\n     *       other old browsers). This can take the form of an \"exception\"\n     *       data object with a single frame (derived from the onerror args).\n     */\n    _isRepeatData: function (current) {\n        var last = this._lastData;\n\n        if (!last ||\n            current.message !== last.message || // defined for captureMessage\n            current.culprit !== last.culprit)   // defined for captureException/onerror\n            return false;\n\n        // Stacktrace interface (i.e. from captureMessage)\n        if (current.stacktrace || last.stacktrace) {\n            return isSameStacktrace(current.stacktrace, last.stacktrace);\n        }\n        // Exception interface (i.e. from captureException/onerror)\n        else if (current.exception || last.exception) {\n            return isSameException(current.exception, last.exception);\n        }\n\n        return true;\n    },\n\n    _setBackoffState: function(request) {\n        // If we are already in a backoff state, don't change anything\n        if (this._shouldBackoff()) {\n            return;\n        }\n\n        var status = request.status;\n\n        // 400 - project_id doesn't exist or some other fatal\n        // 401 - invalid/revoked dsn\n        // 429 - too many requests\n        if (!(status === 400 || status === 401 || status === 429))\n            return;\n\n        var retry;\n        try {\n            // If Retry-After is not in Access-Control-Expose-Headers, most\n            // browsers will throw an exception trying to access it\n            retry = request.getResponseHeader('Retry-After');\n            retry = parseInt(retry, 10) * 1000; // Retry-After is returned in seconds\n        } catch (e) {\n            /* eslint no-empty:0 */\n        }\n\n\n        this._backoffDuration = retry\n            // If Sentry server returned a Retry-After value, use it\n            ? retry\n            // Otherwise, double the last backoff duration (starts at 1 sec)\n            : this._backoffDuration * 2 || 1000;\n\n        this._backoffStart = now();\n    },\n\n    _send: function(data) {\n        var globalOptions = this._globalOptions;\n\n        var baseData = {\n            project: this._globalProject,\n            logger: globalOptions.logger,\n            platform: 'javascript'\n        }, httpData = this._getHttpData();\n\n        if (httpData) {\n            baseData.request = httpData;\n        }\n\n        // HACK: delete `trimHeadFrames` to prevent from appearing in outbound payload\n        if (data.trimHeadFrames) delete data.trimHeadFrames;\n\n        data = objectMerge(baseData, data);\n\n        // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge\n        data.tags = objectMerge(objectMerge({}, this._globalContext.tags), data.tags);\n        data.extra = objectMerge(objectMerge({}, this._globalContext.extra), data.extra);\n\n        // Send along our own collected metadata with extra\n        data.extra['session:duration'] = now() - this._startTime;\n\n        if (this._breadcrumbs && this._breadcrumbs.length > 0) {\n            // intentionally make shallow copy so that additions\n            // to breadcrumbs aren't accidentally sent in this request\n            data.breadcrumbs = {\n                values: [].slice.call(this._breadcrumbs, 0)\n            };\n        }\n\n        // If there are no tags/extra, strip the key from the payload alltogther.\n        if (isEmptyObject(data.tags)) delete data.tags;\n\n        if (this._globalContext.user) {\n            // sentry.interfaces.User\n            data.user = this._globalContext.user;\n        }\n\n        // Include the environment if it's defined in globalOptions\n        if (globalOptions.environment) data.environment = globalOptions.environment;\n\n        // Include the release if it's defined in globalOptions\n        if (globalOptions.release) data.release = globalOptions.release;\n\n        // Include server_name if it's defined in globalOptions\n        if (globalOptions.serverName) data.server_name = globalOptions.serverName;\n\n        if (isFunction(globalOptions.dataCallback)) {\n            data = globalOptions.dataCallback(data) || data;\n        }\n\n        // Why??????????\n        if (!data || isEmptyObject(data)) {\n            return;\n        }\n\n        // Check if the request should be filtered or not\n        if (isFunction(globalOptions.shouldSendCallback) && !globalOptions.shouldSendCallback(data)) {\n            return;\n        }\n\n        // Backoff state: Sentry server previously responded w/ an error (e.g. 429 - too many requests),\n        // so drop requests until \"cool-off\" period has elapsed.\n        if (this._shouldBackoff()) {\n            this._logDebug('warn', 'Raven dropped error due to backoff: ', data);\n            return;\n        }\n\n        if (typeof globalOptions.sampleRate === 'number') {\n            if (Math.random() < globalOptions.sampleRate) {\n                this._sendProcessedPayload(data);\n            }\n        } else {\n            this._sendProcessedPayload(data);\n        }\n    },\n\n    _getUuid: function () {\n      return uuid4();\n    },\n\n    _sendProcessedPayload: function(data, callback) {\n        var self = this;\n        var globalOptions = this._globalOptions;\n\n        if (!this.isSetup()) return;\n\n        // Send along an event_id if not explicitly passed.\n        // This event_id can be used to reference the error within Sentry itself.\n        // Set lastEventId after we know the error should actually be sent\n        this._lastEventId = data.event_id || (data.event_id = this._getUuid());\n\n        // Try and clean up the packet before sending by truncating long values\n        data = this._trimPacket(data);\n\n        // ideally duplicate error testing should occur *before* dataCallback/shouldSendCallback,\n        // but this would require copying an un-truncated copy of the data packet, which can be\n        // arbitrarily deep (extra_data) -- could be worthwhile? will revisit\n        if (!this._globalOptions.allowDuplicates && this._isRepeatData(data)) {\n            this._logDebug('warn', 'Raven dropped repeat event: ', data);\n            return;\n        }\n\n        // Store outbound payload after trim\n        this._lastData = data;\n\n        this._logDebug('debug', 'Raven about to send:', data);\n\n        var auth = {\n            sentry_version: '7',\n            sentry_client: 'raven-js/' + this.VERSION,\n            sentry_key: this._globalKey\n        };\n        if (this._globalSecret) {\n            auth.sentry_secret = this._globalSecret;\n        }\n\n        var exception = data.exception && data.exception.values[0];\n        this.captureBreadcrumb({\n            category: 'sentry',\n            message: exception\n                ? (exception.type ? exception.type + ': ' : '') + exception.value\n                : data.message,\n            event_id: data.event_id,\n            level: data.level || 'error' // presume error unless specified\n        });\n\n        var url = this._globalEndpoint;\n        (globalOptions.transport || this._makeRequest).call(this, {\n            url: url,\n            auth: auth,\n            data: data,\n            options: globalOptions,\n            onSuccess: function success() {\n                self._resetBackoff();\n\n                self._triggerEvent('success', {\n                    data: data,\n                    src: url\n                });\n                callback && callback();\n            },\n            onError: function failure(error) {\n                self._logDebug('error', 'Raven transport failed to send: ', error);\n\n                if (error.request) {\n                    self._setBackoffState(error.request);\n                }\n\n                self._triggerEvent('failure', {\n                    data: data,\n                    src: url\n                });\n                error = error || new Error('Raven send failed (no additional details provided)');\n                callback && callback(error);\n            }\n        });\n    },\n\n    _makeRequest: function(opts) {\n        var request = new XMLHttpRequest();\n\n        // if browser doesn't support CORS (e.g. IE7), we are out of luck\n        var hasCORS =\n            'withCredentials' in request ||\n            typeof XDomainRequest !== 'undefined';\n\n        if (!hasCORS) return;\n\n        var url = opts.url;\n\n        if ('withCredentials' in request) {\n            request.onreadystatechange = function () {\n                if (request.readyState !== 4) {\n                    return;\n                } else if (request.status === 200) {\n                    opts.onSuccess && opts.onSuccess();\n                } else if (opts.onError) {\n                    var err = new Error('Sentry error code: ' + request.status);\n                    err.request = request;\n                    opts.onError(err);\n                }\n            };\n        } else {\n            request = new XDomainRequest();\n            // xdomainrequest cannot go http -> https (or vice versa),\n            // so always use protocol relative\n            url = url.replace(/^https?:/, '');\n\n            // onreadystatechange not supported by XDomainRequest\n            if (opts.onSuccess) {\n                request.onload = opts.onSuccess;\n            }\n            if (opts.onError) {\n                request.onerror = function () {\n                    var err = new Error('Sentry error code: XDomainRequest');\n                    err.request = request;\n                    opts.onError(err);\n                }\n            }\n        }\n\n        // NOTE: auth is intentionally sent as part of query string (NOT as custom\n        //       HTTP header) so as to avoid preflight CORS requests\n        request.open('POST', url + '?' + urlencode(opts.auth));\n        request.send(stringify(opts.data));\n    },\n\n    _logDebug: function(level) {\n        if (this._originalConsoleMethods[level] && this.debug) {\n            // In IE<10 console methods do not have their own 'apply' method\n            Function.prototype.apply.call(\n                this._originalConsoleMethods[level],\n                this._originalConsole,\n                [].slice.call(arguments, 1)\n            );\n        }\n    },\n\n    _mergeContext: function(key, context) {\n        if (isUndefined(context)) {\n            delete this._globalContext[key];\n        } else {\n            this._globalContext[key] = objectMerge(this._globalContext[key] || {}, context);\n        }\n    }\n};\n\n/*------------------------------------------------\n * utils\n *\n * conditionally exported for test via Raven.utils\n =================================================\n */\nvar objectPrototype = Object.prototype;\n\nfunction isUndefined(what) {\n    return what === void 0;\n}\n\nfunction isFunction(what) {\n    return typeof what === 'function';\n}\n\nfunction isString(what) {\n    return objectPrototype.toString.call(what) === '[object String]';\n}\n\n\nfunction isEmptyObject(what) {\n    for (var _ in what) return false;  // eslint-disable-line guard-for-in, no-unused-vars\n    return true;\n}\n\nfunction each(obj, callback) {\n    var i, j;\n\n    if (isUndefined(obj.length)) {\n        for (i in obj) {\n            if (hasKey(obj, i)) {\n                callback.call(null, i, obj[i]);\n            }\n        }\n    } else {\n        j = obj.length;\n        if (j) {\n            for (i = 0; i < j; i++) {\n                callback.call(null, i, obj[i]);\n            }\n        }\n    }\n}\n\nfunction objectMerge(obj1, obj2) {\n    if (!obj2) {\n        return obj1;\n    }\n    each(obj2, function(key, value){\n        obj1[key] = value;\n    });\n    return obj1;\n}\n\nfunction truncate(str, max) {\n    return !max || str.length <= max ? str : str.substr(0, max) + '\\u2026';\n}\n\n/**\n * hasKey, a better form of hasOwnProperty\n * Example: hasKey(MainHostObject, property) === true/false\n *\n * @param {Object} host object to check property\n * @param {string} key to check\n */\nfunction hasKey(object, key) {\n    return objectPrototype.hasOwnProperty.call(object, key);\n}\n\nfunction joinRegExp(patterns) {\n    // Combine an array of regular expressions and strings into one large regexp\n    // Be mad.\n    var sources = [],\n        i = 0, len = patterns.length,\n        pattern;\n\n    for (; i < len; i++) {\n        pattern = patterns[i];\n        if (isString(pattern)) {\n            // If it's a string, we need to escape it\n            // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n            sources.push(pattern.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'));\n        } else if (pattern && pattern.source) {\n            // If it's a regexp already, we want to extract the source\n            sources.push(pattern.source);\n        }\n        // Intentionally skip other cases\n    }\n    return new RegExp(sources.join('|'), 'i');\n}\n\nfunction urlencode(o) {\n    var pairs = [];\n    each(o, function(key, value) {\n        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    });\n    return pairs.join('&');\n}\n\n// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n// intentionally using regex and not <a/> href parsing trick because React Native and other\n// environments where DOM might not be available\nfunction parseUrl(url) {\n    var match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) return {};\n\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    var query = match[6] || '';\n    var fragment = match[8] || '';\n    return {\n        protocol: match[2],\n        host: match[4],\n        path: match[5],\n        relative: match[5] + query + fragment // everything minus origin\n    };\n}\nfunction uuid4() {\n    var crypto = _window.crypto || _window.msCrypto;\n\n    if (!isUndefined(crypto) && crypto.getRandomValues) {\n        // Use window.crypto API if available\n        var arr = new Uint16Array(8);\n        crypto.getRandomValues(arr);\n\n        // set 4 in byte 7\n        arr[3] = arr[3] & 0xFFF | 0x4000;\n        // set 2 most significant bits of byte 9 to '10'\n        arr[4] = arr[4] & 0x3FFF | 0x8000;\n\n        var pad = function(num) {\n            var v = num.toString(16);\n            while (v.length < 4) {\n                v = '0' + v;\n            }\n            return v;\n        };\n\n        return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) +\n        pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n    } else {\n        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0,\n                v = c === 'x' ? r : r&0x3|0x8;\n            return v.toString(16);\n        });\n    }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @param elem\n * @returns {string}\n */\nfunction htmlTreeAsString(elem) {\n    /* eslint no-extra-parens:0*/\n    var MAX_TRAVERSE_HEIGHT = 5,\n        MAX_OUTPUT_LEN = 80,\n        out = [],\n        height = 0,\n        len = 0,\n        separator = ' > ',\n        sepLength = separator.length,\n        nextStr;\n\n    while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n\n        nextStr = htmlElementAsString(elem);\n        // bail out if\n        // - nextStr is the 'html' element\n        // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n        //   (ignore this limit if we are on the first iteration)\n        if (nextStr === 'html' || height > 1 && len + (out.length * sepLength) + nextStr.length >= MAX_OUTPUT_LEN) {\n            break;\n        }\n\n        out.push(nextStr);\n\n        len += nextStr.length;\n        elem = elem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @param HTMLElement\n * @returns {string}\n */\nfunction htmlElementAsString(elem) {\n    var out = [],\n        className,\n        classes,\n        key,\n        attr,\n        i;\n\n    if (!elem || !elem.tagName) {\n        return '';\n    }\n\n    out.push(elem.tagName.toLowerCase());\n    if (elem.id) {\n        out.push('#' + elem.id);\n    }\n\n    className = elem.className;\n    if (className && isString(className)) {\n        classes = className.split(/\\s+/);\n        for (i = 0; i < classes.length; i++) {\n            out.push('.' + classes[i]);\n        }\n    }\n    var attrWhitelist = ['type', 'name', 'title', 'alt'];\n    for (i = 0; i < attrWhitelist.length; i++) {\n        key = attrWhitelist[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push('[' + key + '=\"' + attr + '\"]');\n        }\n    }\n    return out.join('');\n}\n\n/**\n * Returns true if either a OR b is truthy, but not both\n */\nfunction isOnlyOneTruthy(a, b) {\n    return !!(!!a ^ !!b);\n}\n\n/**\n * Returns true if the two input exception interfaces have the same content\n */\nfunction isSameException(ex1, ex2) {\n    if (isOnlyOneTruthy(ex1, ex2))\n        return false;\n\n    ex1 = ex1.values[0];\n    ex2 = ex2.values[0];\n\n    if (ex1.type !== ex2.type ||\n        ex1.value !== ex2.value)\n        return false;\n\n    return isSameStacktrace(ex1.stacktrace, ex2.stacktrace);\n}\n\n/**\n * Returns true if the two input stack trace interfaces have the same content\n */\nfunction isSameStacktrace(stack1, stack2) {\n    if (isOnlyOneTruthy(stack1, stack2))\n        return false;\n\n    var frames1 = stack1.frames;\n    var frames2 = stack2.frames;\n\n    // Exit early if frame count differs\n    if (frames1.length !== frames2.length)\n        return false;\n\n    // Iterate through every frame; bail out if anything differs\n    var a, b;\n    for (var i = 0; i < frames1.length; i++) {\n        a = frames1[i];\n        b = frames2[i];\n        if (a.filename !== b.filename ||\n            a.lineno !== b.lineno ||\n            a.colno !== b.colno ||\n            a['function'] !== b['function'])\n            return false;\n    }\n    return true;\n}\n\n/**\n * Polyfill a method\n * @param obj object e.g. `document`\n * @param name method name present on object e.g. `addEventListener`\n * @param replacement replacement function\n * @param track {optional} record instrumentation to an array\n */\nfunction fill(obj, name, replacement, track) {\n    var orig = obj[name];\n    obj[name] = replacement(orig);\n    if (track) {\n        track.push([obj, name, orig]);\n    }\n}\n\nif (typeof __DEV__ !== 'undefined' && __DEV__) {\n    Raven.utils = {\n        isUndefined: isUndefined,\n        isFunction: isFunction,\n        isString: isString,\n        isObject: isObject,\n        isEmptyObject: isEmptyObject,\n        isError: isError,\n        each: each,\n        objectMerge: objectMerge,\n        truncate: truncate,\n        hasKey: hasKey,\n        joinRegExp: joinRegExp,\n        urlencode: urlencode,\n        uuid4: uuid4,\n        htmlTreeAsString: htmlTreeAsString,\n        htmlElementAsString: htmlElementAsString,\n        parseUrl: parseUrl,\n        fill: fill\n    };\n};\n\n// Deprecations\nRaven.prototype.setUser = Raven.prototype.setUserContext;\nRaven.prototype.setReleaseContext = Raven.prototype.setRelease;\n\nmodule.exports = Raven;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"../../../node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"../../../node_modules/raven-js/src/singleton.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * Enforces a single instance of the Raven client, and the\n * main entry point for Raven. If you are a consumer of the\n * Raven library, you SHOULD load this file (vs raven.js).\n **/\n\n\n\nvar RavenConstructor = __webpack_require__(\"../../../node_modules/raven-js/src/raven.js\");\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window\n            : typeof global !== 'undefined' ? global\n            : typeof self !== 'undefined' ? self\n            : {};\nvar _Raven = _window.Raven;\n\nvar Raven = new RavenConstructor();\n\n/*\n * Allow multiple versions of Raven to be installed.\n * Strip Raven from the global context and returns the instance.\n *\n * @return {Raven}\n */\nRaven.noConflict = function () {\n\t_window.Raven = _Raven;\n\treturn Raven;\n};\n\nRaven.afterLoad();\n\nmodule.exports = Raven;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"../../../node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"../../../node_modules/raven-js/src/utils.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction isObject(what) {\n    return typeof what === 'object' && what !== null;\n}\n\n// Sorta yanked from https://github.com/joyent/node/blob/aa3b4b4/lib/util.js#L560\n// with some tiny modifications\nfunction isError(what) {\n    var toString = {}.toString.call(what);\n    return isObject(what) &&\n        toString === '[object Error]' ||\n        toString === '[object Exception]' || // Firefox NS_ERROR_FAILURE Exceptions\n        what instanceof Error;\n}\n\nmodule.exports = {\n    isObject: isObject,\n    isError: isError\n};\n\n/***/ }),\n\n/***/ \"../../../node_modules/raven-js/vendor/TraceKit/tracekit.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nvar utils = __webpack_require__(\"../../../node_modules/raven-js/src/utils.js\");\n\n/*\n TraceKit - Cross brower stack traces\n\n This was originally forked from github.com/occ/TraceKit, but has since been\n largely re-written and is now maintained as part of raven-js.  Tests for\n this are in test/vendor.\n\n MIT license\n*/\n\nvar TraceKit = {\n    collectWindowErrors: true,\n    debug: false\n};\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window\n            : typeof global !== 'undefined' ? global\n            : typeof self !== 'undefined' ? self\n            : {};\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\nfunction getLocationHref() {\n    if (typeof document === 'undefined' || typeof document.location === 'undefined')\n        return '';\n\n    return document.location.href;\n}\n\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Remove all crash handlers.\n     */\n    function unsubscribeAll() {\n        uninstallGlobalHandler();\n        handlers = [];\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (handlers.hasOwnProperty(i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} colNo The column number at which the error\n     * occurred.\n     * @param {?Error} ex The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, colNo, ex) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n            processLastException();\n        } else if (ex && utils.isError(ex)) {\n            // non-string `ex` arg; attempt to extract stack trace\n\n            // New chrome and blink send along a real error object\n            // Let's just report that like a normal error.\n            // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n            stack = TraceKit.computeStackTrace(ex);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n                'url': url,\n                'line': lineNo,\n                'column': colNo\n            };\n\n            var name = undefined;\n            var msg = message; // must be new var or will modify original `arguments`\n            var groups;\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = UNKNOWN_FUNCTION;\n\n            stack = {\n                'name': name,\n                'message': msg,\n                'url': getLocationHref(),\n                'stack': [location]\n            };\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler ()\n    {\n        if (_onErrorHandlerInstalled) {\n            return;\n        }\n        _oldOnerrorHandler = _window.onerror;\n        _window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function uninstallGlobalHandler ()\n    {\n        if (!_onErrorHandlerInstalled) {\n            return;\n        }\n        _window.onerror = _oldOnerrorHandler;\n        _onErrorHandlerInstalled = false;\n        _oldOnerrorHandler = undefined;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @param {?boolean} rethrow If false, do not re-throw the exception.\n     * Only used for window.onerror to not cause an infinite loop of\n     * rethrowing.\n     */\n    function report(ex, rethrow) {\n        var args = _slice.call(arguments, 1);\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = args;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        if (rethrow !== false) {\n            throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n        }\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    report.uninstall = unsubscribeAll;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (typeof ex.stack === 'undefined' || !ex.stack) return;\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && typeof ex.columnNumber !== 'undefined') {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = UNKNOWN_FUNCTION;\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = UNKNOWN_FUNCTION;\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref()\n        };\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\n    return computeStackTrace;\n}());\n\nmodule.exports = TraceKit;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"../../../node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"../../../node_modules/raven-js/vendor/json-stringify-safe/stringify.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*\n json-stringify-safe\n Like JSON.stringify, but doesn't throw on circular references.\n\n Originally forked from https://github.com/isaacs/json-stringify-safe\n version 5.0.1 on 3/8/2017 and modified for IE8 compatibility.\n Tests for this are in test/vendor.\n\n ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE\n*/\n\nexports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction indexOf(haystack, needle) {\n  for (var i = 0; i < haystack.length; ++i) {\n    if (haystack[i] === needle) return i;\n  }\n  return -1;\n}\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return '[Circular ~]'\n    return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']'\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = indexOf(stack, this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~indexOf(stack, value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n\n\n/***/ }),\n\n/***/ \"./raven/index.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__raven_config__ = __webpack_require__(\"./raven/raven_config.js\");\n\n\nvar index = function index() {\n  __WEBPACK_IMPORTED_MODULE_0__raven_config__[\"a\" /* default */].init({\n    sentryDsn: gon.sentry_dsn,\n    currentUserId: gon.current_user_id,\n    whitelistUrls: [gon.gitlab_url],\n    isProduction: \"production\",\n    release: gon.revision,\n    tags: {\n      revision: gon.revision\n    }\n  });\n\n  return __WEBPACK_IMPORTED_MODULE_0__raven_config__[\"a\" /* default */];\n};\n\nindex();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n\n/***/ }),\n\n/***/ \"./raven/raven_config.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raven_js__ = __webpack_require__(\"../../../node_modules/raven-js/src/singleton.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raven_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_raven_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(\"../../../node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);\n\n\n\nvar IGNORE_ERRORS = [\n// Random plugins/extensions\n'top.GLOBALS',\n// See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error. html\n'originalCreateNotification', 'canvas.contentDocument', 'MyApp_RemoveAllHighlights', 'http://tt.epicplay.com', 'Can\\'t find variable: ZiteReader', 'jigsaw is not defined', 'ComboSearch is not defined', 'http://loading.retry.widdit.com/', 'atomicFindClose',\n// Facebook borked\n'fb_xd_fragment',\n// ISP \"optimizing\" proxy - `Cache-Control: no-transform` seems to\n// reduce this. (thanks @acdha)\n// See http://stackoverflow.com/questions/4113268\n'bmi_SafeAddOnload', 'EBCallBackMessageReceived',\n// See http://toolbar.conduit.com/Developer/HtmlAndGadget/Methods/JSInjection.aspx\n'conduitPage'];\n\nvar IGNORE_URLS = [\n// Facebook flakiness\n/graph\\.facebook\\.com/i,\n// Facebook blocked\n/connect\\.facebook\\.net\\/en_US\\/all\\.js/i,\n// Woopra flakiness\n/eatdifferent\\.com\\.woopra-ns\\.com/i, /static\\.woopra\\.com\\/js\\/woopra\\.js/i,\n// Chrome extensions\n/extensions\\//i, /^chrome:\\/\\//i,\n// Other plugins\n/127\\.0\\.0\\.1:4001\\/isrunning/i, // Cacaoweb\n/webappstoolbarba\\.texthelp\\.com\\//i, /metrics\\.itunes\\.apple\\.com\\.edgesuite\\.net\\//i];\n\nvar SAMPLE_RATE = 95;\n\nvar RavenConfig = {\n  IGNORE_ERRORS: IGNORE_ERRORS,\n  IGNORE_URLS: IGNORE_URLS,\n  SAMPLE_RATE: SAMPLE_RATE,\n  init: function init() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.options = options;\n\n    this.configure();\n    this.bindRavenErrors();\n    if (this.options.currentUserId) this.setUser();\n  },\n  configure: function configure() {\n    __WEBPACK_IMPORTED_MODULE_0_raven_js___default.a.config(this.options.sentryDsn, {\n      release: this.options.release,\n      tags: this.options.tags,\n      whitelistUrls: this.options.whitelistUrls,\n      environment: this.options.isProduction ? 'production' : 'development',\n      ignoreErrors: this.IGNORE_ERRORS,\n      ignoreUrls: this.IGNORE_URLS,\n      shouldSendCallback: this.shouldSendSample.bind(this)\n    }).install();\n  },\n  setUser: function setUser() {\n    __WEBPACK_IMPORTED_MODULE_0_raven_js___default.a.setUserContext({\n      id: this.options.currentUserId\n    });\n  },\n  bindRavenErrors: function bindRavenErrors() {\n    __WEBPACK_IMPORTED_MODULE_1_jquery___default()(document).on('ajaxError.raven', this.handleRavenErrors);\n  },\n  handleRavenErrors: function handleRavenErrors(event, req, config, err) {\n    var error = err || req.statusText;\n    var responseText = req.responseText || 'Unknown response text';\n\n    __WEBPACK_IMPORTED_MODULE_0_raven_js___default.a.captureMessage(error, {\n      extra: {\n        type: config.type,\n        url: config.url,\n        data: config.data,\n        status: req.status,\n        response: responseText,\n        error: error,\n        event: event\n      }\n    });\n  },\n  shouldSendSample: function shouldSendSample() {\n    return Math.random() * 100 <= this.SAMPLE_RATE;\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RavenConfig);\n\n/***/ })\n\n},[\"./raven/index.js\"]);\n\n\n// WEBPACK FOOTER //\n// raven.61375d9168165e89d174.bundle.js","'use strict';\n\nfunction RavenConfigError(message) {\n    this.name = 'RavenConfigError';\n    this.message = message;\n}\nRavenConfigError.prototype = new Error();\nRavenConfigError.prototype.constructor = RavenConfigError;\n\nmodule.exports = RavenConfigError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raven-js/src/configError.js\n// module id = ../../../node_modules/raven-js/src/configError.js\n// module chunks = raven","'use strict';\n\nvar wrapMethod = function(console, level, callback) {\n    var originalConsoleLevel = console[level];\n    var originalConsole = console;\n\n    if (!(level in console)) {\n        return;\n    }\n\n    var sentryLevel = level === 'warn'\n        ? 'warning'\n        : level;\n\n    console[level] = function () {\n        var args = [].slice.call(arguments);\n\n        var msg = '' + args.join(' ');\n        var data = {level: sentryLevel, logger: 'console', extra: {'arguments': args}};\n        callback && callback(msg, data);\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n            // IE9 doesn't allow calling apply on console functions directly\n            // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193\n            Function.prototype.apply.call(\n                originalConsoleLevel,\n                originalConsole,\n                args\n            );\n        }\n    };\n};\n\nmodule.exports = {\n    wrapMethod: wrapMethod\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raven-js/src/console.js\n// module id = ../../../node_modules/raven-js/src/console.js\n// module chunks = raven","/*global XDomainRequest:false, __DEV__:false*/\n'use strict';\n\nvar TraceKit = require('../vendor/TraceKit/tracekit');\nvar stringify = require('../vendor/json-stringify-safe/stringify');\nvar RavenConfigError = require('./configError');\nvar utils = require('./utils');\n\nvar isError = utils.isError,\n    isObject = utils.isObject;\n\nvar wrapConsoleMethod = require('./console').wrapMethod;\n\nvar dsnKeys = 'source protocol user pass host port path'.split(' '),\n    dsnPattern = /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w\\.-]+)(?::(\\d+))?(\\/.*)/;\n\nfunction now() {\n    return +new Date();\n}\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window\n            : typeof global !== 'undefined' ? global\n            : typeof self !== 'undefined' ? self\n            : {};\nvar _document = _window.document;\nvar _navigator = _window.navigator;\n\n// First, check for JSON support\n// If there is no JSON, we no-op the core features of Raven\n// since JSON is required to encode the payload\nfunction Raven() {\n    this._hasJSON = !!(typeof JSON === 'object' && JSON.stringify);\n    // Raven can run in contexts where there's no document (react-native)\n    this._hasDocument = !isUndefined(_document);\n    this._hasNavigator = !isUndefined(_navigator);\n    this._lastCapturedException = null;\n    this._lastData = null;\n    this._lastEventId = null;\n    this._globalServer = null;\n    this._globalKey = null;\n    this._globalProject = null;\n    this._globalContext = {};\n    this._globalOptions = {\n        logger: 'javascript',\n        ignoreErrors: [],\n        ignoreUrls: [],\n        whitelistUrls: [],\n        includePaths: [],\n        crossOrigin: 'anonymous',\n        collectWindowErrors: true,\n        maxMessageLength: 0,\n\n        // By default, truncates URL values to 250 chars\n        maxUrlLength: 250,\n        stackTraceLimit: 50,\n        autoBreadcrumbs: true,\n        sampleRate: 1\n    };\n    this._ignoreOnError = 0;\n    this._isRavenInstalled = false;\n    this._originalErrorStackTraceLimit = Error.stackTraceLimit;\n    // capture references to window.console *and* all its methods first\n    // before the console plugin has a chance to monkey patch\n    this._originalConsole = _window.console || {};\n    this._originalConsoleMethods = {};\n    this._plugins = [];\n    this._startTime = now();\n    this._wrappedBuiltIns = [];\n    this._breadcrumbs = [];\n    this._lastCapturedEvent = null;\n    this._keypressTimeout;\n    this._location = _window.location;\n    this._lastHref = this._location && this._location.href;\n    this._resetBackoff();\n\n    for (var method in this._originalConsole) {  // eslint-disable-line guard-for-in\n      this._originalConsoleMethods[method] = this._originalConsole[method];\n    }\n}\n\n/*\n * The core Raven singleton\n *\n * @this {Raven}\n */\n\nRaven.prototype = {\n    // Hardcode version string so that raven source can be loaded directly via\n    // webpack (using a build step causes webpack #1617). Grunt verifies that\n    // this value matches package.json during build.\n    //   See: https://github.com/getsentry/raven-js/issues/465\n    VERSION: '3.14.0',\n\n    debug: false,\n\n    TraceKit: TraceKit, // alias to TraceKit\n\n    /*\n     * Configure Raven with a DSN and extra options\n     *\n     * @param {string} dsn The public Sentry DSN\n     * @param {object} options Optional set of of global options [optional]\n     * @return {Raven}\n     */\n    config: function(dsn, options) {\n        var self = this;\n\n        if (self._globalServer) {\n                this._logDebug('error', 'Error: Raven has already been configured');\n            return self;\n        }\n        if (!dsn) return self;\n\n        var globalOptions = self._globalOptions;\n\n        // merge in options\n        if (options) {\n            each(options, function(key, value){\n                // tags and extra are special and need to be put into context\n                if (key === 'tags' || key === 'extra' || key === 'user') {\n                    self._globalContext[key] = value;\n                } else {\n                    globalOptions[key] = value;\n                }\n            });\n        }\n\n        self.setDSN(dsn);\n\n        // \"Script error.\" is hard coded into browsers for errors that it can't read.\n        // this is the result of a script being pulled in from an external domain and CORS.\n        globalOptions.ignoreErrors.push(/^Script error\\.?$/);\n        globalOptions.ignoreErrors.push(/^Javascript error: Script error\\.? on line 0$/);\n\n        // join regexp rules into one big rule\n        globalOptions.ignoreErrors = joinRegExp(globalOptions.ignoreErrors);\n        globalOptions.ignoreUrls = globalOptions.ignoreUrls.length ? joinRegExp(globalOptions.ignoreUrls) : false;\n        globalOptions.whitelistUrls = globalOptions.whitelistUrls.length ? joinRegExp(globalOptions.whitelistUrls) : false;\n        globalOptions.includePaths = joinRegExp(globalOptions.includePaths);\n        globalOptions.maxBreadcrumbs = Math.max(0, Math.min(globalOptions.maxBreadcrumbs || 100, 100)); // default and hard limit is 100\n\n        var autoBreadcrumbDefaults = {\n            xhr: true,\n            console: true,\n            dom: true,\n            location: true\n        };\n\n        var autoBreadcrumbs = globalOptions.autoBreadcrumbs;\n        if ({}.toString.call(autoBreadcrumbs) === '[object Object]') {\n            autoBreadcrumbs = objectMerge(autoBreadcrumbDefaults, autoBreadcrumbs);\n        } else if (autoBreadcrumbs !== false) {\n            autoBreadcrumbs = autoBreadcrumbDefaults;\n        }\n        globalOptions.autoBreadcrumbs = autoBreadcrumbs;\n\n        TraceKit.collectWindowErrors = !!globalOptions.collectWindowErrors;\n\n        // return for chaining\n        return self;\n    },\n\n    /*\n     * Installs a global window.onerror error handler\n     * to capture and report uncaught exceptions.\n     * At this point, install() is required to be called due\n     * to the way TraceKit is set up.\n     *\n     * @return {Raven}\n     */\n    install: function() {\n        var self = this;\n        if (self.isSetup() && !self._isRavenInstalled) {\n            TraceKit.report.subscribe(function () {\n                self._handleOnErrorStackInfo.apply(self, arguments);\n            });\n            self._instrumentTryCatch();\n            if (self._globalOptions.autoBreadcrumbs)\n                self._instrumentBreadcrumbs();\n\n            // Install all of the plugins\n            self._drainPlugins();\n\n            self._isRavenInstalled = true;\n        }\n\n        Error.stackTraceLimit = self._globalOptions.stackTraceLimit;\n        return this;\n    },\n\n    /*\n     * Set the DSN (can be called multiple time unlike config)\n     *\n     * @param {string} dsn The public Sentry DSN\n     */\n    setDSN: function(dsn) {\n        var self = this,\n            uri = self._parseDSN(dsn),\n          lastSlash = uri.path.lastIndexOf('/'),\n          path = uri.path.substr(1, lastSlash);\n\n        self._dsn = dsn;\n        self._globalKey = uri.user;\n        self._globalSecret = uri.pass && uri.pass.substr(1);\n        self._globalProject = uri.path.substr(lastSlash + 1);\n\n        self._globalServer = self._getGlobalServer(uri);\n\n        self._globalEndpoint = self._globalServer +\n            '/' + path + 'api/' + self._globalProject + '/store/';\n\n        // Reset backoff state since we may be pointing at a\n        // new project/server\n        this._resetBackoff();\n    },\n\n    /*\n     * Wrap code within a context so Raven can capture errors\n     * reliably across domains that is executed immediately.\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The callback to be immediately executed within the context\n     * @param {array} args An array of arguments to be called with the callback [optional]\n     */\n    context: function(options, func, args) {\n        if (isFunction(options)) {\n            args = func || [];\n            func = options;\n            options = undefined;\n        }\n\n        return this.wrap(options, func).apply(this, args);\n    },\n\n    /*\n     * Wrap code within a context and returns back a new function to be executed\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The function to be wrapped in a new context\n     * @param {function} func A function to call before the try/catch wrapper [optional, private]\n     * @return {function} The newly wrapped functions with a context\n     */\n    wrap: function(options, func, _before) {\n        var self = this;\n        // 1 argument has been passed, and it's not a function\n        // so just return it\n        if (isUndefined(func) && !isFunction(options)) {\n            return options;\n        }\n\n        // options is optional\n        if (isFunction(options)) {\n            func = options;\n            options = undefined;\n        }\n\n        // At this point, we've passed along 2 arguments, and the second one\n        // is not a function either, so we'll just return the second argument.\n        if (!isFunction(func)) {\n            return func;\n        }\n\n        // We don't wanna wrap it twice!\n        try {\n            if (func.__raven__) {\n                return func;\n            }\n\n            // If this has already been wrapped in the past, return that\n            if (func.__raven_wrapper__ ){\n                return func.__raven_wrapper__ ;\n            }\n        } catch (e) {\n            // Just accessing custom props in some Selenium environments\n            // can cause a \"Permission denied\" exception (see raven-js#495).\n            // Bail on wrapping and return the function as-is (defers to window.onerror).\n            return func;\n        }\n\n        function wrapped() {\n            var args = [], i = arguments.length,\n                deep = !options || options && options.deep !== false;\n\n            if (_before && isFunction(_before)) {\n                _before.apply(this, arguments);\n            }\n\n            // Recursively wrap all of a function's arguments that are\n            // functions themselves.\n            while(i--) args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n\n            try {\n                // Attempt to invoke user-land function\n                // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n                //       means Raven caught an error invoking your application code. This is\n                //       expected behavior and NOT indicative of a bug with Raven.js.\n                return func.apply(this, args);\n            } catch(e) {\n                self._ignoreNextOnError();\n                self.captureException(e, options);\n                throw e;\n            }\n        }\n\n        // copy over properties of the old function\n        for (var property in func) {\n            if (hasKey(func, property)) {\n                wrapped[property] = func[property];\n            }\n        }\n        wrapped.prototype = func.prototype;\n\n        func.__raven_wrapper__ = wrapped;\n        // Signal that this function has been wrapped already\n        // for both debugging and to prevent it to being wrapped twice\n        wrapped.__raven__ = true;\n        wrapped.__inner__ = func;\n\n        return wrapped;\n    },\n\n    /*\n     * Uninstalls the global error handler.\n     *\n     * @return {Raven}\n     */\n    uninstall: function() {\n        TraceKit.report.uninstall();\n\n        this._restoreBuiltIns();\n\n        Error.stackTraceLimit = this._originalErrorStackTraceLimit;\n        this._isRavenInstalled = false;\n\n        return this;\n    },\n\n    /*\n     * Manually capture an exception and send it over to Sentry\n     *\n     * @param {error} ex An exception to be logged\n     * @param {object} options A specific set of options for this error [optional]\n     * @return {Raven}\n     */\n    captureException: function(ex, options) {\n        // If not an Error is passed through, recall as a message instead\n        if (!isError(ex)) {\n            return this.captureMessage(ex, objectMerge({\n                trimHeadFrames: 1,\n                stacktrace: true // if we fall back to captureMessage, default to attempting a new trace\n            }, options));\n        }\n\n        // Store the raw exception object for potential debugging and introspection\n        this._lastCapturedException = ex;\n\n        // TraceKit.report will re-raise any exception passed to it,\n        // which means you have to wrap it in try/catch. Instead, we\n        // can wrap it here and only re-raise if TraceKit.report\n        // raises an exception different from the one we asked to\n        // report on.\n        try {\n            var stack = TraceKit.computeStackTrace(ex);\n            this._handleStackInfo(stack, options);\n        } catch(ex1) {\n            if(ex !== ex1) {\n                throw ex1;\n            }\n        }\n\n        return this;\n    },\n\n    /*\n     * Manually send a message to Sentry\n     *\n     * @param {string} msg A plain message to be captured in Sentry\n     * @param {object} options A specific set of options for this message [optional]\n     * @return {Raven}\n     */\n    captureMessage: function(msg, options) {\n        // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an\n        // early call; we'll error on the side of logging anything called before configuration since it's\n        // probably something you should see:\n        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(msg)) {\n            return;\n        }\n\n        options = options || {};\n\n        var data = objectMerge({\n            message: msg + ''  // Make sure it's actually a string\n        }, options);\n\n        if (this._globalOptions.stacktrace || (options && options.stacktrace)) {\n            var ex;\n            // Generate a \"synthetic\" stack trace from this point.\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it is NOT indicative\n            //       of a bug with Raven.js. Sentry generates synthetic traces either by configuration,\n            //       or if it catches a thrown object without a \"stack\" property.\n            try {\n                throw new Error(msg);\n            } catch (ex1) {\n                ex = ex1;\n            }\n\n            // null exception name so `Error` isn't prefixed to msg\n            ex.name = null;\n\n            options = objectMerge({\n                // fingerprint on msg, not stack trace (legacy behavior, could be\n                // revisited)\n                fingerprint: msg,\n                // since we know this is a synthetic trace, the top N-most frames\n                // MUST be from Raven.js, so mark them as in_app later by setting\n                // trimHeadFrames\n                trimHeadFrames: (options.trimHeadFrames || 0) + 1\n            }, options);\n\n            var stack = TraceKit.computeStackTrace(ex);\n            var frames = this._prepareFrames(stack, options);\n            data.stacktrace = {\n                // Sentry expects frames oldest to newest\n                frames: frames.reverse()\n            }\n        }\n\n        // Fire away!\n        this._send(data);\n\n        return this;\n    },\n\n    captureBreadcrumb: function (obj) {\n        var crumb = objectMerge({\n            timestamp: now() / 1000\n        }, obj);\n\n        if (isFunction(this._globalOptions.breadcrumbCallback)) {\n            var result = this._globalOptions.breadcrumbCallback(crumb);\n\n            if (isObject(result) && !isEmptyObject(result)) {\n                crumb = result;\n            } else if (result === false) {\n                return this;\n            }\n        }\n\n        this._breadcrumbs.push(crumb);\n        if (this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) {\n            this._breadcrumbs.shift();\n        }\n        return this;\n    },\n\n    addPlugin: function(plugin /*arg1, arg2, ... argN*/) {\n        var pluginArgs = [].slice.call(arguments, 1);\n\n        this._plugins.push([plugin, pluginArgs]);\n        if (this._isRavenInstalled) {\n            this._drainPlugins();\n        }\n\n        return this;\n    },\n\n    /*\n     * Set/clear a user to be sent along with the payload.\n     *\n     * @param {object} user An object representing user data [optional]\n     * @return {Raven}\n     */\n    setUserContext: function(user) {\n        // Intentionally do not merge here since that's an unexpected behavior.\n        this._globalContext.user = user;\n\n        return this;\n    },\n\n    /*\n     * Merge extra attributes to be sent along with the payload.\n     *\n     * @param {object} extra An object representing extra data [optional]\n     * @return {Raven}\n     */\n    setExtraContext: function(extra) {\n        this._mergeContext('extra', extra);\n\n        return this;\n    },\n\n    /*\n     * Merge tags to be sent along with the payload.\n     *\n     * @param {object} tags An object representing tags [optional]\n     * @return {Raven}\n     */\n    setTagsContext: function(tags) {\n        this._mergeContext('tags', tags);\n\n        return this;\n    },\n\n    /*\n     * Clear all of the context.\n     *\n     * @return {Raven}\n     */\n    clearContext: function() {\n        this._globalContext = {};\n\n        return this;\n    },\n\n    /*\n     * Get a copy of the current context. This cannot be mutated.\n     *\n     * @return {object} copy of context\n     */\n    getContext: function() {\n        // lol javascript\n        return JSON.parse(stringify(this._globalContext));\n    },\n\n\n    /*\n     * Set environment of application\n     *\n     * @param {string} environment Typically something like 'production'.\n     * @return {Raven}\n     */\n    setEnvironment: function(environment) {\n        this._globalOptions.environment = environment;\n\n        return this;\n    },\n\n    /*\n     * Set release version of application\n     *\n     * @param {string} release Typically something like a git SHA to identify version\n     * @return {Raven}\n     */\n    setRelease: function(release) {\n        this._globalOptions.release = release;\n\n        return this;\n    },\n\n    /*\n     * Set the dataCallback option\n     *\n     * @param {function} callback The callback to run which allows the\n     *                            data blob to be mutated before sending\n     * @return {Raven}\n     */\n    setDataCallback: function(callback) {\n        var original = this._globalOptions.dataCallback;\n        this._globalOptions.dataCallback = isFunction(callback)\n          ? function (data) { return callback(data, original); }\n          : callback;\n\n        return this;\n    },\n\n    /*\n     * Set the breadcrumbCallback option\n     *\n     * @param {function} callback The callback to run which allows filtering\n     *                            or mutating breadcrumbs\n     * @return {Raven}\n     */\n    setBreadcrumbCallback: function(callback) {\n        var original = this._globalOptions.breadcrumbCallback;\n        this._globalOptions.breadcrumbCallback = isFunction(callback)\n          ? function (data) { return callback(data, original); }\n          : callback;\n\n        return this;\n    },\n\n    /*\n     * Set the shouldSendCallback option\n     *\n     * @param {function} callback The callback to run which allows\n     *                            introspecting the blob before sending\n     * @return {Raven}\n     */\n    setShouldSendCallback: function(callback) {\n        var original = this._globalOptions.shouldSendCallback;\n        this._globalOptions.shouldSendCallback = isFunction(callback)\n            ? function (data) { return callback(data, original); }\n            : callback;\n\n        return this;\n    },\n\n    /**\n     * Override the default HTTP transport mechanism that transmits data\n     * to the Sentry server.\n     *\n     * @param {function} transport Function invoked instead of the default\n     *                             `makeRequest` handler.\n     *\n     * @return {Raven}\n     */\n    setTransport: function(transport) {\n        this._globalOptions.transport = transport;\n\n        return this;\n    },\n\n    /*\n     * Get the latest raw exception that was captured by Raven.\n     *\n     * @return {error}\n     */\n    lastException: function() {\n        return this._lastCapturedException;\n    },\n\n    /*\n     * Get the last event id\n     *\n     * @return {string}\n     */\n    lastEventId: function() {\n        return this._lastEventId;\n    },\n\n    /*\n     * Determine if Raven is setup and ready to go.\n     *\n     * @return {boolean}\n     */\n    isSetup: function() {\n        if (!this._hasJSON) return false;  // needs JSON support\n        if (!this._globalServer) {\n            if (!this.ravenNotConfiguredError) {\n              this.ravenNotConfiguredError = true;\n              this._logDebug('error', 'Error: Raven has not been configured.');\n            }\n            return false;\n        }\n        return true;\n    },\n\n    afterLoad: function () {\n        // TODO: remove window dependence?\n\n        // Attempt to initialize Raven on load\n        var RavenConfig = _window.RavenConfig;\n        if (RavenConfig) {\n            this.config(RavenConfig.dsn, RavenConfig.config).install();\n        }\n    },\n\n    showReportDialog: function (options) {\n        if (!_document) // doesn't work without a document (React native)\n            return;\n\n        options = options || {};\n\n        var lastEventId = options.eventId || this.lastEventId();\n        if (!lastEventId) {\n            throw new RavenConfigError('Missing eventId');\n        }\n\n        var dsn = options.dsn || this._dsn;\n        if (!dsn) {\n            throw new RavenConfigError('Missing DSN');\n        }\n\n        var encode = encodeURIComponent;\n        var qs = '';\n        qs += '?eventId=' + encode(lastEventId);\n        qs += '&dsn=' + encode(dsn);\n\n        var user = options.user || this._globalContext.user;\n        if (user) {\n            if (user.name)  qs += '&name=' + encode(user.name);\n            if (user.email) qs += '&email=' + encode(user.email);\n        }\n\n        var globalServer = this._getGlobalServer(this._parseDSN(dsn));\n\n        var script = _document.createElement('script');\n        script.async = true;\n        script.src = globalServer + '/api/embed/error-page/' + qs;\n        (_document.head || _document.body).appendChild(script);\n    },\n\n    /**** Private functions ****/\n    _ignoreNextOnError: function () {\n        var self = this;\n        this._ignoreOnError += 1;\n        setTimeout(function () {\n            // onerror should trigger before setTimeout\n            self._ignoreOnError -= 1;\n        });\n    },\n\n    _triggerEvent: function(eventType, options) {\n        // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it\n        var evt, key;\n\n        if (!this._hasDocument)\n            return;\n\n        options = options || {};\n\n        eventType = 'raven' + eventType.substr(0,1).toUpperCase() + eventType.substr(1);\n\n        if (_document.createEvent) {\n            evt = _document.createEvent('HTMLEvents');\n            evt.initEvent(eventType, true, true);\n        } else {\n            evt = _document.createEventObject();\n            evt.eventType = eventType;\n        }\n\n        for (key in options) if (hasKey(options, key)) {\n            evt[key] = options[key];\n        }\n\n        if (_document.createEvent) {\n            // IE9 if standards\n            _document.dispatchEvent(evt);\n        } else {\n            // IE8 regardless of Quirks or Standards\n            // IE9 if quirks\n            try {\n                _document.fireEvent('on' + evt.eventType.toLowerCase(), evt);\n            } catch(e) {\n                // Do nothing\n            }\n        }\n    },\n\n    /**\n     * Wraps addEventListener to capture UI breadcrumbs\n     * @param evtName the event name (e.g. \"click\")\n     * @returns {Function}\n     * @private\n     */\n    _breadcrumbEventHandler: function(evtName) {\n        var self = this;\n        return function (evt) {\n            // reset keypress timeout; e.g. triggering a 'click' after\n            // a 'keypress' will reset the keypress debounce so that a new\n            // set of keypresses can be recorded\n            self._keypressTimeout = null;\n\n            // It's possible this handler might trigger multiple times for the same\n            // event (e.g. event propagation through node ancestors). Ignore if we've\n            // already captured the event.\n            if (self._lastCapturedEvent === evt)\n                return;\n\n            self._lastCapturedEvent = evt;\n\n            // try/catch both:\n            // - accessing evt.target (see getsentry/raven-js#838, #768)\n            // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n            //   can throw an exception in some circumstances.\n            var target;\n            try {\n                target = htmlTreeAsString(evt.target);\n            } catch (e) {\n                target = '<unknown>';\n            }\n\n            self.captureBreadcrumb({\n                category: 'ui.' + evtName, // e.g. ui.click, ui.input\n                message: target\n            });\n        };\n    },\n\n    /**\n     * Wraps addEventListener to capture keypress UI events\n     * @returns {Function}\n     * @private\n     */\n    _keypressEventHandler: function() {\n        var self = this,\n            debounceDuration = 1000; // milliseconds\n\n        // TODO: if somehow user switches keypress target before\n        //       debounce timeout is triggered, we will only capture\n        //       a single breadcrumb from the FIRST target (acceptable?)\n        return function (evt) {\n            var target;\n            try {\n                target = evt.target;\n            } catch (e) {\n                // just accessing event properties can throw an exception in some rare circumstances\n                // see: https://github.com/getsentry/raven-js/issues/838\n                return;\n            }\n            var tagName = target && target.tagName;\n\n            // only consider keypress events on actual input elements\n            // this will disregard keypresses targeting body (e.g. tabbing\n            // through elements, hotkeys, etc)\n            if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable)\n                return;\n\n            // record first keypress in a series, but ignore subsequent\n            // keypresses until debounce clears\n            var timeout = self._keypressTimeout;\n            if (!timeout) {\n                self._breadcrumbEventHandler('input')(evt);\n            }\n            clearTimeout(timeout);\n            self._keypressTimeout = setTimeout(function () {\n                self._keypressTimeout = null;\n            }, debounceDuration);\n        };\n    },\n\n    /**\n     * Captures a breadcrumb of type \"navigation\", normalizing input URLs\n     * @param to the originating URL\n     * @param from the target URL\n     * @private\n     */\n    _captureUrlChange: function(from, to) {\n        var parsedLoc = parseUrl(this._location.href);\n        var parsedTo = parseUrl(to);\n        var parsedFrom = parseUrl(from);\n\n        // because onpopstate only tells you the \"new\" (to) value of location.href, and\n        // not the previous (from) value, we need to track the value of the current URL\n        // state ourselves\n        this._lastHref = to;\n\n        // Use only the path component of the URL if the URL matches the current\n        // document (almost all the time when using pushState)\n        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host)\n            to = parsedTo.relative;\n        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host)\n            from = parsedFrom.relative;\n\n        this.captureBreadcrumb({\n            category: 'navigation',\n            data: {\n                to: to,\n                from: from\n            }\n        });\n    },\n\n    /**\n     * Install any queued plugins\n     */\n    _instrumentTryCatch: function() {\n        var self = this;\n\n        var wrappedBuiltIns = self._wrappedBuiltIns;\n\n        function wrapTimeFn(orig) {\n            return function (fn, t) { // preserve arity\n                // Make a copy of the arguments to prevent deoptimization\n                // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n                var args = new Array(arguments.length);\n                for(var i = 0; i < args.length; ++i) {\n                    args[i] = arguments[i];\n                }\n                var originalCallback = args[0];\n                if (isFunction(originalCallback)) {\n                    args[0] = self.wrap(originalCallback);\n                }\n\n                // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n                // also supports only two arguments and doesn't care what this is, so we\n                // can just call the original function directly.\n                if (orig.apply) {\n                    return orig.apply(this, args);\n                } else {\n                    return orig(args[0], args[1]);\n                }\n            };\n        }\n\n        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n        function wrapEventTarget(global) {\n            var proto = _window[global] && _window[global].prototype;\n            if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n                fill(proto, 'addEventListener', function(orig) {\n                    return function (evtName, fn, capture, secure) { // preserve arity\n                        try {\n                            if (fn && fn.handleEvent) {\n                                fn.handleEvent = self.wrap(fn.handleEvent);\n                            }\n                        } catch (err) {\n                            // can sometimes get 'Permission denied to access property \"handle Event'\n                        }\n\n                        // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n                        // so that we don't have more than one wrapper function\n                        var before,\n                            clickHandler,\n                            keypressHandler;\n\n                        if (autoBreadcrumbs && autoBreadcrumbs.dom && (global === 'EventTarget' || global === 'Node')) {\n                            // NOTE: generating multiple handlers per addEventListener invocation, should\n                            //       revisit and verify we can just use one (almost certainly)\n                            clickHandler = self._breadcrumbEventHandler('click');\n                            keypressHandler = self._keypressEventHandler();\n                            before = function (evt) {\n                                // need to intercept every DOM event in `before` argument, in case that\n                                // same wrapped method is re-used for different events (e.g. mousemove THEN click)\n                                // see #724\n                                if (!evt) return;\n\n                                var eventType;\n                                try {\n                                    eventType = evt.type\n                                } catch (e) {\n                                    // just accessing event properties can throw an exception in some rare circumstances\n                                    // see: https://github.com/getsentry/raven-js/issues/838\n                                    return;\n                                }\n                                if (eventType === 'click')\n                                    return clickHandler(evt);\n                                else if (eventType === 'keypress')\n                                    return keypressHandler(evt);\n                            };\n                        }\n                        return orig.call(this, evtName, self.wrap(fn, undefined, before), capture, secure);\n                    };\n                }, wrappedBuiltIns);\n                fill(proto, 'removeEventListener', function (orig) {\n                    return function (evt, fn, capture, secure) {\n                        try {\n                            fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__  : fn);\n                        } catch (e) {\n                            // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n                        }\n                        return orig.call(this, evt, fn, capture, secure);\n                    };\n                }, wrappedBuiltIns);\n            }\n        }\n\n        fill(_window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n        fill(_window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n        if (_window.requestAnimationFrame) {\n            fill(_window, 'requestAnimationFrame', function (orig) {\n                return function (cb) {\n                    return orig(self.wrap(cb));\n                };\n            }, wrappedBuiltIns);\n        }\n\n        // event targets borrowed from bugsnag-js:\n        // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n        var eventTargets = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n        for (var i = 0; i < eventTargets.length; i++) {\n            wrapEventTarget(eventTargets[i]);\n        }\n    },\n\n\n    /**\n     * Instrument browser built-ins w/ breadcrumb capturing\n     *  - XMLHttpRequests\n     *  - DOM interactions (click/typing)\n     *  - window.location changes\n     *  - console\n     *\n     * Can be disabled or individually configured via the `autoBreadcrumbs` config option\n     */\n    _instrumentBreadcrumbs: function () {\n        var self = this;\n        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n        var wrappedBuiltIns = self._wrappedBuiltIns;\n\n        function wrapProp(prop, xhr) {\n            if (prop in xhr && isFunction(xhr[prop])) {\n                fill(xhr, prop, function (orig) {\n                    return self.wrap(orig);\n                }); // intentionally don't track filled methods on XHR instances\n            }\n        }\n\n        if (autoBreadcrumbs.xhr && 'XMLHttpRequest' in _window) {\n            var xhrproto = XMLHttpRequest.prototype;\n            fill(xhrproto, 'open', function(origOpen) {\n                return function (method, url) { // preserve arity\n\n                    // if Sentry key appears in URL, don't capture\n                    if (isString(url) && url.indexOf(self._globalKey) === -1) {\n                        this.__raven_xhr = {\n                            method: method,\n                            url: url,\n                            status_code: null\n                        };\n                    }\n\n                    return origOpen.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n\n            fill(xhrproto, 'send', function(origSend) {\n                return function (data) { // preserve arity\n                    var xhr = this;\n\n                    function onreadystatechangeHandler() {\n                        if (xhr.__raven_xhr && (xhr.readyState === 1 || xhr.readyState === 4)) {\n                            try {\n                                // touching statusCode in some platforms throws\n                                // an exception\n                                xhr.__raven_xhr.status_code = xhr.status;\n                            } catch (e) { /* do nothing */ }\n                            self.captureBreadcrumb({\n                                type: 'http',\n                                category: 'xhr',\n                                data: xhr.__raven_xhr\n                            });\n                        }\n                    }\n\n                    var props = ['onload', 'onerror', 'onprogress'];\n                    for (var j = 0; j < props.length; j++) {\n                        wrapProp(props[j], xhr);\n                    }\n\n                    if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {\n                        fill(xhr, 'onreadystatechange', function (orig) {\n                            return self.wrap(orig, undefined, onreadystatechangeHandler);\n                        } /* intentionally don't track this instrumentation */);\n                    } else {\n                        // if onreadystatechange wasn't actually set by the page on this xhr, we\n                        // are free to set our own and capture the breadcrumb\n                        xhr.onreadystatechange = onreadystatechangeHandler;\n                    }\n\n                    return origSend.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n        }\n\n        if (autoBreadcrumbs.xhr && 'fetch' in _window) {\n            fill(_window, 'fetch', function(origFetch) {\n                return function (fn, t) { // preserve arity\n                    // Make a copy of the arguments to prevent deoptimization\n                    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n                    var args = new Array(arguments.length);\n                    for(var i = 0; i < args.length; ++i) {\n                        args[i] = arguments[i];\n                    }\n\n                    var method = 'GET';\n\n                    if (args[1] && args[1].method) {\n                        method = args[1].method;\n                    }\n\n                    var fetchData = {\n                        method: method,\n                        url: args[0],\n                        status_code: null\n                    };\n\n                    self.captureBreadcrumb({\n                        type: 'http',\n                        category: 'fetch',\n                        data: fetchData\n                    });\n\n                    return origFetch.apply(this, args).then(function (response) {\n                        fetchData.status_code = response.status;\n\n                        return response;\n                    });\n                };\n            }, wrappedBuiltIns);\n        }\n\n        // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n        // to the document. Do this before we instrument addEventListener.\n        if (autoBreadcrumbs.dom && this._hasDocument) {\n            if (_document.addEventListener) {\n                _document.addEventListener('click', self._breadcrumbEventHandler('click'), false);\n                _document.addEventListener('keypress', self._keypressEventHandler(), false);\n            }\n            else {\n                // IE8 Compatibility\n                _document.attachEvent('onclick', self._breadcrumbEventHandler('click'));\n                _document.attachEvent('onkeypress', self._keypressEventHandler());\n            }\n        }\n\n        // record navigation (URL) changes\n        // NOTE: in Chrome App environment, touching history.pushState, *even inside\n        //       a try/catch block*, will cause Chrome to output an error to console.error\n        // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n        var chrome = _window.chrome;\n        var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n        var hasPushState = !isChromePackagedApp && _window.history && history.pushState;\n        if (autoBreadcrumbs.location && hasPushState) {\n            // TODO: remove onpopstate handler on uninstall()\n            var oldOnPopState = _window.onpopstate;\n            _window.onpopstate = function () {\n                var currentHref = self._location.href;\n                self._captureUrlChange(self._lastHref, currentHref);\n\n                if (oldOnPopState) {\n                    return oldOnPopState.apply(this, arguments);\n                }\n            };\n\n            fill(history, 'pushState', function (origPushState) {\n                // note history.pushState.length is 0; intentionally not declaring\n                // params to preserve 0 arity\n                return function (/* state, title, url */) {\n                    var url = arguments.length > 2 ? arguments[2] : undefined;\n\n                    // url argument is optional\n                    if (url) {\n                        // coerce to string (this is what pushState does)\n                        self._captureUrlChange(self._lastHref, url + '');\n                    }\n\n                    return origPushState.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n        }\n\n        if (autoBreadcrumbs.console && 'console' in _window && console.log) {\n            // console\n            var consoleMethodCallback = function (msg, data) {\n                self.captureBreadcrumb({\n                    message: msg,\n                    level: data.level,\n                    category: 'console'\n                });\n            };\n\n            each(['debug', 'info', 'warn', 'error', 'log'], function (_, level) {\n                wrapConsoleMethod(console, level, consoleMethodCallback);\n            });\n        }\n\n    },\n\n    _restoreBuiltIns: function () {\n        // restore any wrapped builtins\n        var builtin;\n        while (this._wrappedBuiltIns.length) {\n            builtin = this._wrappedBuiltIns.shift();\n\n            var obj = builtin[0],\n              name = builtin[1],\n              orig = builtin[2];\n\n            obj[name] = orig;\n        }\n    },\n\n    _drainPlugins: function() {\n        var self = this;\n\n        // FIX ME TODO\n        each(this._plugins, function(_, plugin) {\n            var installer = plugin[0];\n            var args = plugin[1];\n            installer.apply(self, [self].concat(args));\n        });\n    },\n\n    _parseDSN: function(str) {\n        var m = dsnPattern.exec(str),\n            dsn = {},\n            i = 7;\n\n        try {\n            while (i--) dsn[dsnKeys[i]] = m[i] || '';\n        } catch(e) {\n            throw new RavenConfigError('Invalid DSN: ' + str);\n        }\n\n        if (dsn.pass && !this._globalOptions.allowSecretKey) {\n            throw new RavenConfigError('Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key');\n        }\n\n        return dsn;\n    },\n\n    _getGlobalServer: function(uri) {\n        // assemble the endpoint from the uri pieces\n        var globalServer = '//' + uri.host +\n            (uri.port ? ':' + uri.port : '');\n\n        if (uri.protocol) {\n            globalServer = uri.protocol + ':' + globalServer;\n        }\n        return globalServer;\n    },\n\n    _handleOnErrorStackInfo: function() {\n        // if we are intentionally ignoring errors via onerror, bail out\n        if (!this._ignoreOnError) {\n            this._handleStackInfo.apply(this, arguments);\n        }\n    },\n\n    _handleStackInfo: function(stackInfo, options) {\n        var frames = this._prepareFrames(stackInfo, options);\n\n        this._triggerEvent('handle', {\n            stackInfo: stackInfo,\n            options: options\n        });\n\n        this._processException(\n            stackInfo.name,\n            stackInfo.message,\n            stackInfo.url,\n            stackInfo.lineno,\n            frames,\n            options\n        );\n    },\n\n    _prepareFrames: function(stackInfo, options) {\n        var self = this;\n        var frames = [];\n        if (stackInfo.stack && stackInfo.stack.length) {\n            each(stackInfo.stack, function(i, stack) {\n                var frame = self._normalizeFrame(stack);\n                if (frame) {\n                    frames.push(frame);\n                }\n            });\n\n            // e.g. frames captured via captureMessage throw\n            if (options && options.trimHeadFrames) {\n                for (var j = 0; j < options.trimHeadFrames && j < frames.length; j++) {\n                    frames[j].in_app = false;\n                }\n            }\n        }\n        frames = frames.slice(0, this._globalOptions.stackTraceLimit);\n        return frames;\n    },\n\n\n    _normalizeFrame: function(frame) {\n        if (!frame.url) return;\n\n        // normalize the frames data\n        var normalized = {\n            filename:   frame.url,\n            lineno:     frame.line,\n            colno:      frame.column,\n            'function': frame.func || '?'\n        };\n\n        normalized.in_app = !( // determine if an exception came from outside of our app\n            // first we check the global includePaths list.\n            !!this._globalOptions.includePaths.test && !this._globalOptions.includePaths.test(normalized.filename) ||\n            // Now we check for fun, if the function name is Raven or TraceKit\n            /(Raven|TraceKit)\\./.test(normalized['function']) ||\n            // finally, we do a last ditch effort and check for raven.min.js\n            /raven\\.(min\\.)?js$/.test(normalized.filename)\n        );\n\n        return normalized;\n    },\n\n    _processException: function(type, message, fileurl, lineno, frames, options) {\n        var stacktrace;\n        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(message)) return;\n\n        message += '';\n\n        if (frames && frames.length) {\n            fileurl = frames[0].filename || fileurl;\n            // Sentry expects frames oldest to newest\n            // and JS sends them as newest to oldest\n            frames.reverse();\n            stacktrace = {frames: frames};\n        } else if (fileurl) {\n            stacktrace = {\n                frames: [{\n                    filename: fileurl,\n                    lineno: lineno,\n                    in_app: true\n                }]\n            };\n        }\n\n        if (!!this._globalOptions.ignoreUrls.test && this._globalOptions.ignoreUrls.test(fileurl)) return;\n        if (!!this._globalOptions.whitelistUrls.test && !this._globalOptions.whitelistUrls.test(fileurl)) return;\n\n        var data = objectMerge({\n            // sentry.interfaces.Exception\n            exception: {\n                values: [{\n                    type: type,\n                    value: message,\n                    stacktrace: stacktrace\n                }]\n            },\n            culprit: fileurl\n        }, options);\n\n        // Fire away!\n        this._send(data);\n    },\n\n    _trimPacket: function(data) {\n        // For now, we only want to truncate the two different messages\n        // but this could/should be expanded to just trim everything\n        var max = this._globalOptions.maxMessageLength;\n        if (data.message) {\n            data.message = truncate(data.message, max);\n        }\n        if (data.exception) {\n            var exception = data.exception.values[0];\n            exception.value = truncate(exception.value, max);\n        }\n\n        var request = data.request;\n        if (request) {\n            if (request.url) {\n                request.url = truncate(request.url, this._globalOptions.maxUrlLength);\n            }\n            if (request.Referer) {\n                request.Referer = truncate(request.Referer, this._globalOptions.maxUrlLength);\n            }\n        }\n\n        if (data.breadcrumbs && data.breadcrumbs.values)\n            this._trimBreadcrumbs(data.breadcrumbs);\n\n        return data;\n    },\n\n    /**\n     * Truncate breadcrumb values (right now just URLs)\n     */\n    _trimBreadcrumbs: function (breadcrumbs) {\n        // known breadcrumb properties with urls\n        // TODO: also consider arbitrary prop values that start with (https?)?://\n        var urlprops = {to: 1, from: 1, url: 1},\n            crumb,\n            data;\n\n        for (var i = 0; i < breadcrumbs.values.length; i++) {\n            crumb = breadcrumbs.values[i];\n            if (!crumb.hasOwnProperty('data'))\n                continue;\n\n            data = crumb.data;\n            for (var prop in urlprops) {\n                if (data.hasOwnProperty(prop)) {\n                    data[prop] = truncate(data[prop], this._globalOptions.maxUrlLength);\n                }\n            }\n        }\n    },\n\n    _getHttpData: function() {\n        if (!this._hasNavigator && !this._hasDocument) return;\n        var httpData = {};\n\n        if (this._hasNavigator && _navigator.userAgent) {\n            httpData.headers = {\n              'User-Agent': navigator.userAgent\n            };\n        }\n\n        if (this._hasDocument) {\n            if (_document.location && _document.location.href) {\n                httpData.url = _document.location.href;\n            }\n            if (_document.referrer) {\n                if (!httpData.headers) httpData.headers = {};\n                httpData.headers.Referer = _document.referrer;\n            }\n        }\n\n        return httpData;\n    },\n\n    _resetBackoff: function() {\n        this._backoffDuration = 0;\n        this._backoffStart = null;\n    },\n\n    _shouldBackoff: function() {\n        return this._backoffDuration && now() - this._backoffStart < this._backoffDuration;\n    },\n\n    /**\n     * Returns true if the in-process data payload matches the signature\n     * of the previously-sent data\n     *\n     * NOTE: This has to be done at this level because TraceKit can generate\n     *       data from window.onerror WITHOUT an exception object (IE8, IE9,\n     *       other old browsers). This can take the form of an \"exception\"\n     *       data object with a single frame (derived from the onerror args).\n     */\n    _isRepeatData: function (current) {\n        var last = this._lastData;\n\n        if (!last ||\n            current.message !== last.message || // defined for captureMessage\n            current.culprit !== last.culprit)   // defined for captureException/onerror\n            return false;\n\n        // Stacktrace interface (i.e. from captureMessage)\n        if (current.stacktrace || last.stacktrace) {\n            return isSameStacktrace(current.stacktrace, last.stacktrace);\n        }\n        // Exception interface (i.e. from captureException/onerror)\n        else if (current.exception || last.exception) {\n            return isSameException(current.exception, last.exception);\n        }\n\n        return true;\n    },\n\n    _setBackoffState: function(request) {\n        // If we are already in a backoff state, don't change anything\n        if (this._shouldBackoff()) {\n            return;\n        }\n\n        var status = request.status;\n\n        // 400 - project_id doesn't exist or some other fatal\n        // 401 - invalid/revoked dsn\n        // 429 - too many requests\n        if (!(status === 400 || status === 401 || status === 429))\n            return;\n\n        var retry;\n        try {\n            // If Retry-After is not in Access-Control-Expose-Headers, most\n            // browsers will throw an exception trying to access it\n            retry = request.getResponseHeader('Retry-After');\n            retry = parseInt(retry, 10) * 1000; // Retry-After is returned in seconds\n        } catch (e) {\n            /* eslint no-empty:0 */\n        }\n\n\n        this._backoffDuration = retry\n            // If Sentry server returned a Retry-After value, use it\n            ? retry\n            // Otherwise, double the last backoff duration (starts at 1 sec)\n            : this._backoffDuration * 2 || 1000;\n\n        this._backoffStart = now();\n    },\n\n    _send: function(data) {\n        var globalOptions = this._globalOptions;\n\n        var baseData = {\n            project: this._globalProject,\n            logger: globalOptions.logger,\n            platform: 'javascript'\n        }, httpData = this._getHttpData();\n\n        if (httpData) {\n            baseData.request = httpData;\n        }\n\n        // HACK: delete `trimHeadFrames` to prevent from appearing in outbound payload\n        if (data.trimHeadFrames) delete data.trimHeadFrames;\n\n        data = objectMerge(baseData, data);\n\n        // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge\n        data.tags = objectMerge(objectMerge({}, this._globalContext.tags), data.tags);\n        data.extra = objectMerge(objectMerge({}, this._globalContext.extra), data.extra);\n\n        // Send along our own collected metadata with extra\n        data.extra['session:duration'] = now() - this._startTime;\n\n        if (this._breadcrumbs && this._breadcrumbs.length > 0) {\n            // intentionally make shallow copy so that additions\n            // to breadcrumbs aren't accidentally sent in this request\n            data.breadcrumbs = {\n                values: [].slice.call(this._breadcrumbs, 0)\n            };\n        }\n\n        // If there are no tags/extra, strip the key from the payload alltogther.\n        if (isEmptyObject(data.tags)) delete data.tags;\n\n        if (this._globalContext.user) {\n            // sentry.interfaces.User\n            data.user = this._globalContext.user;\n        }\n\n        // Include the environment if it's defined in globalOptions\n        if (globalOptions.environment) data.environment = globalOptions.environment;\n\n        // Include the release if it's defined in globalOptions\n        if (globalOptions.release) data.release = globalOptions.release;\n\n        // Include server_name if it's defined in globalOptions\n        if (globalOptions.serverName) data.server_name = globalOptions.serverName;\n\n        if (isFunction(globalOptions.dataCallback)) {\n            data = globalOptions.dataCallback(data) || data;\n        }\n\n        // Why??????????\n        if (!data || isEmptyObject(data)) {\n            return;\n        }\n\n        // Check if the request should be filtered or not\n        if (isFunction(globalOptions.shouldSendCallback) && !globalOptions.shouldSendCallback(data)) {\n            return;\n        }\n\n        // Backoff state: Sentry server previously responded w/ an error (e.g. 429 - too many requests),\n        // so drop requests until \"cool-off\" period has elapsed.\n        if (this._shouldBackoff()) {\n            this._logDebug('warn', 'Raven dropped error due to backoff: ', data);\n            return;\n        }\n\n        if (typeof globalOptions.sampleRate === 'number') {\n            if (Math.random() < globalOptions.sampleRate) {\n                this._sendProcessedPayload(data);\n            }\n        } else {\n            this._sendProcessedPayload(data);\n        }\n    },\n\n    _getUuid: function () {\n      return uuid4();\n    },\n\n    _sendProcessedPayload: function(data, callback) {\n        var self = this;\n        var globalOptions = this._globalOptions;\n\n        if (!this.isSetup()) return;\n\n        // Send along an event_id if not explicitly passed.\n        // This event_id can be used to reference the error within Sentry itself.\n        // Set lastEventId after we know the error should actually be sent\n        this._lastEventId = data.event_id || (data.event_id = this._getUuid());\n\n        // Try and clean up the packet before sending by truncating long values\n        data = this._trimPacket(data);\n\n        // ideally duplicate error testing should occur *before* dataCallback/shouldSendCallback,\n        // but this would require copying an un-truncated copy of the data packet, which can be\n        // arbitrarily deep (extra_data) -- could be worthwhile? will revisit\n        if (!this._globalOptions.allowDuplicates && this._isRepeatData(data)) {\n            this._logDebug('warn', 'Raven dropped repeat event: ', data);\n            return;\n        }\n\n        // Store outbound payload after trim\n        this._lastData = data;\n\n        this._logDebug('debug', 'Raven about to send:', data);\n\n        var auth = {\n            sentry_version: '7',\n            sentry_client: 'raven-js/' + this.VERSION,\n            sentry_key: this._globalKey\n        };\n        if (this._globalSecret) {\n            auth.sentry_secret = this._globalSecret;\n        }\n\n        var exception = data.exception && data.exception.values[0];\n        this.captureBreadcrumb({\n            category: 'sentry',\n            message: exception\n                ? (exception.type ? exception.type + ': ' : '') + exception.value\n                : data.message,\n            event_id: data.event_id,\n            level: data.level || 'error' // presume error unless specified\n        });\n\n        var url = this._globalEndpoint;\n        (globalOptions.transport || this._makeRequest).call(this, {\n            url: url,\n            auth: auth,\n            data: data,\n            options: globalOptions,\n            onSuccess: function success() {\n                self._resetBackoff();\n\n                self._triggerEvent('success', {\n                    data: data,\n                    src: url\n                });\n                callback && callback();\n            },\n            onError: function failure(error) {\n                self._logDebug('error', 'Raven transport failed to send: ', error);\n\n                if (error.request) {\n                    self._setBackoffState(error.request);\n                }\n\n                self._triggerEvent('failure', {\n                    data: data,\n                    src: url\n                });\n                error = error || new Error('Raven send failed (no additional details provided)');\n                callback && callback(error);\n            }\n        });\n    },\n\n    _makeRequest: function(opts) {\n        var request = new XMLHttpRequest();\n\n        // if browser doesn't support CORS (e.g. IE7), we are out of luck\n        var hasCORS =\n            'withCredentials' in request ||\n            typeof XDomainRequest !== 'undefined';\n\n        if (!hasCORS) return;\n\n        var url = opts.url;\n\n        if ('withCredentials' in request) {\n            request.onreadystatechange = function () {\n                if (request.readyState !== 4) {\n                    return;\n                } else if (request.status === 200) {\n                    opts.onSuccess && opts.onSuccess();\n                } else if (opts.onError) {\n                    var err = new Error('Sentry error code: ' + request.status);\n                    err.request = request;\n                    opts.onError(err);\n                }\n            };\n        } else {\n            request = new XDomainRequest();\n            // xdomainrequest cannot go http -> https (or vice versa),\n            // so always use protocol relative\n            url = url.replace(/^https?:/, '');\n\n            // onreadystatechange not supported by XDomainRequest\n            if (opts.onSuccess) {\n                request.onload = opts.onSuccess;\n            }\n            if (opts.onError) {\n                request.onerror = function () {\n                    var err = new Error('Sentry error code: XDomainRequest');\n                    err.request = request;\n                    opts.onError(err);\n                }\n            }\n        }\n\n        // NOTE: auth is intentionally sent as part of query string (NOT as custom\n        //       HTTP header) so as to avoid preflight CORS requests\n        request.open('POST', url + '?' + urlencode(opts.auth));\n        request.send(stringify(opts.data));\n    },\n\n    _logDebug: function(level) {\n        if (this._originalConsoleMethods[level] && this.debug) {\n            // In IE<10 console methods do not have their own 'apply' method\n            Function.prototype.apply.call(\n                this._originalConsoleMethods[level],\n                this._originalConsole,\n                [].slice.call(arguments, 1)\n            );\n        }\n    },\n\n    _mergeContext: function(key, context) {\n        if (isUndefined(context)) {\n            delete this._globalContext[key];\n        } else {\n            this._globalContext[key] = objectMerge(this._globalContext[key] || {}, context);\n        }\n    }\n};\n\n/*------------------------------------------------\n * utils\n *\n * conditionally exported for test via Raven.utils\n =================================================\n */\nvar objectPrototype = Object.prototype;\n\nfunction isUndefined(what) {\n    return what === void 0;\n}\n\nfunction isFunction(what) {\n    return typeof what === 'function';\n}\n\nfunction isString(what) {\n    return objectPrototype.toString.call(what) === '[object String]';\n}\n\n\nfunction isEmptyObject(what) {\n    for (var _ in what) return false;  // eslint-disable-line guard-for-in, no-unused-vars\n    return true;\n}\n\nfunction each(obj, callback) {\n    var i, j;\n\n    if (isUndefined(obj.length)) {\n        for (i in obj) {\n            if (hasKey(obj, i)) {\n                callback.call(null, i, obj[i]);\n            }\n        }\n    } else {\n        j = obj.length;\n        if (j) {\n            for (i = 0; i < j; i++) {\n                callback.call(null, i, obj[i]);\n            }\n        }\n    }\n}\n\nfunction objectMerge(obj1, obj2) {\n    if (!obj2) {\n        return obj1;\n    }\n    each(obj2, function(key, value){\n        obj1[key] = value;\n    });\n    return obj1;\n}\n\nfunction truncate(str, max) {\n    return !max || str.length <= max ? str : str.substr(0, max) + '\\u2026';\n}\n\n/**\n * hasKey, a better form of hasOwnProperty\n * Example: hasKey(MainHostObject, property) === true/false\n *\n * @param {Object} host object to check property\n * @param {string} key to check\n */\nfunction hasKey(object, key) {\n    return objectPrototype.hasOwnProperty.call(object, key);\n}\n\nfunction joinRegExp(patterns) {\n    // Combine an array of regular expressions and strings into one large regexp\n    // Be mad.\n    var sources = [],\n        i = 0, len = patterns.length,\n        pattern;\n\n    for (; i < len; i++) {\n        pattern = patterns[i];\n        if (isString(pattern)) {\n            // If it's a string, we need to escape it\n            // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n            sources.push(pattern.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'));\n        } else if (pattern && pattern.source) {\n            // If it's a regexp already, we want to extract the source\n            sources.push(pattern.source);\n        }\n        // Intentionally skip other cases\n    }\n    return new RegExp(sources.join('|'), 'i');\n}\n\nfunction urlencode(o) {\n    var pairs = [];\n    each(o, function(key, value) {\n        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    });\n    return pairs.join('&');\n}\n\n// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n// intentionally using regex and not <a/> href parsing trick because React Native and other\n// environments where DOM might not be available\nfunction parseUrl(url) {\n    var match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) return {};\n\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    var query = match[6] || '';\n    var fragment = match[8] || '';\n    return {\n        protocol: match[2],\n        host: match[4],\n        path: match[5],\n        relative: match[5] + query + fragment // everything minus origin\n    };\n}\nfunction uuid4() {\n    var crypto = _window.crypto || _window.msCrypto;\n\n    if (!isUndefined(crypto) && crypto.getRandomValues) {\n        // Use window.crypto API if available\n        var arr = new Uint16Array(8);\n        crypto.getRandomValues(arr);\n\n        // set 4 in byte 7\n        arr[3] = arr[3] & 0xFFF | 0x4000;\n        // set 2 most significant bits of byte 9 to '10'\n        arr[4] = arr[4] & 0x3FFF | 0x8000;\n\n        var pad = function(num) {\n            var v = num.toString(16);\n            while (v.length < 4) {\n                v = '0' + v;\n            }\n            return v;\n        };\n\n        return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) +\n        pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n    } else {\n        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0,\n                v = c === 'x' ? r : r&0x3|0x8;\n            return v.toString(16);\n        });\n    }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @param elem\n * @returns {string}\n */\nfunction htmlTreeAsString(elem) {\n    /* eslint no-extra-parens:0*/\n    var MAX_TRAVERSE_HEIGHT = 5,\n        MAX_OUTPUT_LEN = 80,\n        out = [],\n        height = 0,\n        len = 0,\n        separator = ' > ',\n        sepLength = separator.length,\n        nextStr;\n\n    while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n\n        nextStr = htmlElementAsString(elem);\n        // bail out if\n        // - nextStr is the 'html' element\n        // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n        //   (ignore this limit if we are on the first iteration)\n        if (nextStr === 'html' || height > 1 && len + (out.length * sepLength) + nextStr.length >= MAX_OUTPUT_LEN) {\n            break;\n        }\n\n        out.push(nextStr);\n\n        len += nextStr.length;\n        elem = elem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @param HTMLElement\n * @returns {string}\n */\nfunction htmlElementAsString(elem) {\n    var out = [],\n        className,\n        classes,\n        key,\n        attr,\n        i;\n\n    if (!elem || !elem.tagName) {\n        return '';\n    }\n\n    out.push(elem.tagName.toLowerCase());\n    if (elem.id) {\n        out.push('#' + elem.id);\n    }\n\n    className = elem.className;\n    if (className && isString(className)) {\n        classes = className.split(/\\s+/);\n        for (i = 0; i < classes.length; i++) {\n            out.push('.' + classes[i]);\n        }\n    }\n    var attrWhitelist = ['type', 'name', 'title', 'alt'];\n    for (i = 0; i < attrWhitelist.length; i++) {\n        key = attrWhitelist[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push('[' + key + '=\"' + attr + '\"]');\n        }\n    }\n    return out.join('');\n}\n\n/**\n * Returns true if either a OR b is truthy, but not both\n */\nfunction isOnlyOneTruthy(a, b) {\n    return !!(!!a ^ !!b);\n}\n\n/**\n * Returns true if the two input exception interfaces have the same content\n */\nfunction isSameException(ex1, ex2) {\n    if (isOnlyOneTruthy(ex1, ex2))\n        return false;\n\n    ex1 = ex1.values[0];\n    ex2 = ex2.values[0];\n\n    if (ex1.type !== ex2.type ||\n        ex1.value !== ex2.value)\n        return false;\n\n    return isSameStacktrace(ex1.stacktrace, ex2.stacktrace);\n}\n\n/**\n * Returns true if the two input stack trace interfaces have the same content\n */\nfunction isSameStacktrace(stack1, stack2) {\n    if (isOnlyOneTruthy(stack1, stack2))\n        return false;\n\n    var frames1 = stack1.frames;\n    var frames2 = stack2.frames;\n\n    // Exit early if frame count differs\n    if (frames1.length !== frames2.length)\n        return false;\n\n    // Iterate through every frame; bail out if anything differs\n    var a, b;\n    for (var i = 0; i < frames1.length; i++) {\n        a = frames1[i];\n        b = frames2[i];\n        if (a.filename !== b.filename ||\n            a.lineno !== b.lineno ||\n            a.colno !== b.colno ||\n            a['function'] !== b['function'])\n            return false;\n    }\n    return true;\n}\n\n/**\n * Polyfill a method\n * @param obj object e.g. `document`\n * @param name method name present on object e.g. `addEventListener`\n * @param replacement replacement function\n * @param track {optional} record instrumentation to an array\n */\nfunction fill(obj, name, replacement, track) {\n    var orig = obj[name];\n    obj[name] = replacement(orig);\n    if (track) {\n        track.push([obj, name, orig]);\n    }\n}\n\nif (typeof __DEV__ !== 'undefined' && __DEV__) {\n    Raven.utils = {\n        isUndefined: isUndefined,\n        isFunction: isFunction,\n        isString: isString,\n        isObject: isObject,\n        isEmptyObject: isEmptyObject,\n        isError: isError,\n        each: each,\n        objectMerge: objectMerge,\n        truncate: truncate,\n        hasKey: hasKey,\n        joinRegExp: joinRegExp,\n        urlencode: urlencode,\n        uuid4: uuid4,\n        htmlTreeAsString: htmlTreeAsString,\n        htmlElementAsString: htmlElementAsString,\n        parseUrl: parseUrl,\n        fill: fill\n    };\n};\n\n// Deprecations\nRaven.prototype.setUser = Raven.prototype.setUserContext;\nRaven.prototype.setReleaseContext = Raven.prototype.setRelease;\n\nmodule.exports = Raven;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raven-js/src/raven.js\n// module id = ../../../node_modules/raven-js/src/raven.js\n// module chunks = raven","/**\n * Enforces a single instance of the Raven client, and the\n * main entry point for Raven. If you are a consumer of the\n * Raven library, you SHOULD load this file (vs raven.js).\n **/\n\n'use strict';\n\nvar RavenConstructor = require('./raven');\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window\n            : typeof global !== 'undefined' ? global\n            : typeof self !== 'undefined' ? self\n            : {};\nvar _Raven = _window.Raven;\n\nvar Raven = new RavenConstructor();\n\n/*\n * Allow multiple versions of Raven to be installed.\n * Strip Raven from the global context and returns the instance.\n *\n * @return {Raven}\n */\nRaven.noConflict = function () {\n\t_window.Raven = _Raven;\n\treturn Raven;\n};\n\nRaven.afterLoad();\n\nmodule.exports = Raven;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raven-js/src/singleton.js\n// module id = ../../../node_modules/raven-js/src/singleton.js\n// module chunks = raven","'use strict';\n\nfunction isObject(what) {\n    return typeof what === 'object' && what !== null;\n}\n\n// Sorta yanked from https://github.com/joyent/node/blob/aa3b4b4/lib/util.js#L560\n// with some tiny modifications\nfunction isError(what) {\n    var toString = {}.toString.call(what);\n    return isObject(what) &&\n        toString === '[object Error]' ||\n        toString === '[object Exception]' || // Firefox NS_ERROR_FAILURE Exceptions\n        what instanceof Error;\n}\n\nmodule.exports = {\n    isObject: isObject,\n    isError: isError\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raven-js/src/utils.js\n// module id = ../../../node_modules/raven-js/src/utils.js\n// module chunks = raven","'use strict';\n\nvar utils = require('../../src/utils');\n\n/*\n TraceKit - Cross brower stack traces\n\n This was originally forked from github.com/occ/TraceKit, but has since been\n largely re-written and is now maintained as part of raven-js.  Tests for\n this are in test/vendor.\n\n MIT license\n*/\n\nvar TraceKit = {\n    collectWindowErrors: true,\n    debug: false\n};\n\n// This is to be defensive in environments where window does not exist (see https://github.com/getsentry/raven-js/pull/785)\nvar _window = typeof window !== 'undefined' ? window\n            : typeof global !== 'undefined' ? global\n            : typeof self !== 'undefined' ? self\n            : {};\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\nfunction getLocationHref() {\n    if (typeof document === 'undefined' || typeof document.location === 'undefined')\n        return '';\n\n    return document.location.href;\n}\n\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Remove all crash handlers.\n     */\n    function unsubscribeAll() {\n        uninstallGlobalHandler();\n        handlers = [];\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (handlers.hasOwnProperty(i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} colNo The column number at which the error\n     * occurred.\n     * @param {?Error} ex The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, colNo, ex) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n            processLastException();\n        } else if (ex && utils.isError(ex)) {\n            // non-string `ex` arg; attempt to extract stack trace\n\n            // New chrome and blink send along a real error object\n            // Let's just report that like a normal error.\n            // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n            stack = TraceKit.computeStackTrace(ex);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n                'url': url,\n                'line': lineNo,\n                'column': colNo\n            };\n\n            var name = undefined;\n            var msg = message; // must be new var or will modify original `arguments`\n            var groups;\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = UNKNOWN_FUNCTION;\n\n            stack = {\n                'name': name,\n                'message': msg,\n                'url': getLocationHref(),\n                'stack': [location]\n            };\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler ()\n    {\n        if (_onErrorHandlerInstalled) {\n            return;\n        }\n        _oldOnerrorHandler = _window.onerror;\n        _window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function uninstallGlobalHandler ()\n    {\n        if (!_onErrorHandlerInstalled) {\n            return;\n        }\n        _window.onerror = _oldOnerrorHandler;\n        _onErrorHandlerInstalled = false;\n        _oldOnerrorHandler = undefined;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @param {?boolean} rethrow If false, do not re-throw the exception.\n     * Only used for window.onerror to not cause an infinite loop of\n     * rethrowing.\n     */\n    function report(ex, rethrow) {\n        var args = _slice.call(arguments, 1);\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = args;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        if (rethrow !== false) {\n            throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n        }\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    report.uninstall = unsubscribeAll;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (typeof ex.stack === 'undefined' || !ex.stack) return;\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && typeof ex.columnNumber !== 'undefined') {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = UNKNOWN_FUNCTION;\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = UNKNOWN_FUNCTION;\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref()\n        };\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\n    return computeStackTrace;\n}());\n\nmodule.exports = TraceKit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raven-js/vendor/TraceKit/tracekit.js\n// module id = ../../../node_modules/raven-js/vendor/TraceKit/tracekit.js\n// module chunks = raven","'use strict';\n\n/*\n json-stringify-safe\n Like JSON.stringify, but doesn't throw on circular references.\n\n Originally forked from https://github.com/isaacs/json-stringify-safe\n version 5.0.1 on 3/8/2017 and modified for IE8 compatibility.\n Tests for this are in test/vendor.\n\n ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE\n*/\n\nexports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction indexOf(haystack, needle) {\n  for (var i = 0; i < haystack.length; ++i) {\n    if (haystack[i] === needle) return i;\n  }\n  return -1;\n}\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return '[Circular ~]'\n    return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']'\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = indexOf(stack, this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~indexOf(stack, value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /var/cache/omnibus/src/gitlab-rails/~/raven-js/vendor/json-stringify-safe/stringify.js\n// module id = ../../../node_modules/raven-js/vendor/json-stringify-safe/stringify.js\n// module chunks = raven","import RavenConfig from './raven_config';\n\nconst index = function index() {\n  RavenConfig.init({\n    sentryDsn: gon.sentry_dsn,\n    currentUserId: gon.current_user_id,\n    whitelistUrls: [gon.gitlab_url],\n    isProduction: process.env.NODE_ENV,\n    release: gon.revision,\n    tags: {\n      revision: gon.revision,\n    },\n  });\n\n  return RavenConfig;\n};\n\nindex();\n\nexport default index;\n\n\n\n// WEBPACK FOOTER //\n// ./raven/index.js","import Raven from 'raven-js';\nimport $ from 'jquery';\n\nconst IGNORE_ERRORS = [\n  // Random plugins/extensions\n  'top.GLOBALS',\n  // See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error. html\n  'originalCreateNotification',\n  'canvas.contentDocument',\n  'MyApp_RemoveAllHighlights',\n  'http://tt.epicplay.com',\n  'Can\\'t find variable: ZiteReader',\n  'jigsaw is not defined',\n  'ComboSearch is not defined',\n  'http://loading.retry.widdit.com/',\n  'atomicFindClose',\n  // Facebook borked\n  'fb_xd_fragment',\n  // ISP \"optimizing\" proxy - `Cache-Control: no-transform` seems to\n  // reduce this. (thanks @acdha)\n  // See http://stackoverflow.com/questions/4113268\n  'bmi_SafeAddOnload',\n  'EBCallBackMessageReceived',\n  // See http://toolbar.conduit.com/Developer/HtmlAndGadget/Methods/JSInjection.aspx\n  'conduitPage',\n];\n\nconst IGNORE_URLS = [\n  // Facebook flakiness\n  /graph\\.facebook\\.com/i,\n  // Facebook blocked\n  /connect\\.facebook\\.net\\/en_US\\/all\\.js/i,\n  // Woopra flakiness\n  /eatdifferent\\.com\\.woopra-ns\\.com/i,\n  /static\\.woopra\\.com\\/js\\/woopra\\.js/i,\n  // Chrome extensions\n  /extensions\\//i,\n  /^chrome:\\/\\//i,\n  // Other plugins\n  /127\\.0\\.0\\.1:4001\\/isrunning/i,  // Cacaoweb\n  /webappstoolbarba\\.texthelp\\.com\\//i,\n  /metrics\\.itunes\\.apple\\.com\\.edgesuite\\.net\\//i,\n];\n\nconst SAMPLE_RATE = 95;\n\nconst RavenConfig = {\n  IGNORE_ERRORS,\n  IGNORE_URLS,\n  SAMPLE_RATE,\n  init(options = {}) {\n    this.options = options;\n\n    this.configure();\n    this.bindRavenErrors();\n    if (this.options.currentUserId) this.setUser();\n  },\n\n  configure() {\n    Raven.config(this.options.sentryDsn, {\n      release: this.options.release,\n      tags: this.options.tags,\n      whitelistUrls: this.options.whitelistUrls,\n      environment: this.options.isProduction ? 'production' : 'development',\n      ignoreErrors: this.IGNORE_ERRORS,\n      ignoreUrls: this.IGNORE_URLS,\n      shouldSendCallback: this.shouldSendSample.bind(this),\n    }).install();\n  },\n\n  setUser() {\n    Raven.setUserContext({\n      id: this.options.currentUserId,\n    });\n  },\n\n  bindRavenErrors() {\n    $(document).on('ajaxError.raven', this.handleRavenErrors);\n  },\n\n  handleRavenErrors(event, req, config, err) {\n    const error = err || req.statusText;\n    const responseText = req.responseText || 'Unknown response text';\n\n    Raven.captureMessage(error, {\n      extra: {\n        type: config.type,\n        url: config.url,\n        data: config.data,\n        status: req.status,\n        response: responseText,\n        error,\n        event,\n      },\n    });\n  },\n\n  shouldSendSample() {\n    return Math.random() * 100 <= this.SAMPLE_RATE;\n  },\n};\n\nexport default RavenConfig;\n\n\n\n// WEBPACK FOOTER //\n// ./raven/raven_config.js"],"sourceRoot":""}